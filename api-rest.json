{
    "bravado": "1.0",
    "info": {
        "title": "WEGnology API",
        "description": "User API for accessing WEGnology data",
        "version": "1.17.0"
    },
    "basePath": "/",
    "params": [
    ],
    "deprecatedAuthScopes": [
        "applications",
        "dashboards",
        "dashboards.read",
        "devices",
        "devices.read",
        "devices.state",
        "devices.command",
        "events",
        "flows",
        "me",
        "orgs",
        "webhooks"
    ],
    "authGroups": {
        "applications": [
            "application.*",
            "applications.*",
            "applicationKey.*",
            "applicationKeys.*",
            "applicationApiToken.*",
            "applicationApiTokens.*"
        ],
        "dashboards": [
            "dashboard.*",
            "dashboards.*"
        ],
        "dashboards.read": [
            "dashboards.get"
        ],
        "devices": [
            "data.*",
            "deviceRecipe.*",
            "deviceRecipes.*",
            "device.*",
            "devices.*"
        ],
        "devices.read": [
            "data.export",
            "data.timeSeriesQuery",
            "data.lastValueQuery",
            "deviceRecipe.get",
            "deviceRecipes.get",
            "device.get",
            "device.export",
            "devices.get",
            "devices.detailedSummary"
        ],
        "devices.state": [
            "device.getCompositeState",
            "device.getState",
            "device.sendState"
        ],
        "devices.command": [
            "device.getCommand",
            "device.sendCommand",
            "devices.sendCommand"
        ],
        "events": [
            "event.*",
            "events.*"
        ],
        "flows": [
            "flow.*",
            "flows.*"
        ],
        "me": [
            "me.*"
        ],
        "orgs": [
            "auditLog.*",
            "auditLogs.*",
            "org.*",
            "orgs.*"
        ],
        "webhooks": [
            "webhook.*",
            "webhooks.*"
        ],
        "all.Application": [
            "applicationApiToken.*",
            "applicationApiTokens.*",
            "applicationCertificate.*",
            "applicationCertificates.*",
            "applicationCertificateAuthority.*",
            "applicationCertificateAuthorities.*",
            "applicationKey.*",
            "applicationKeys.*",
            "application.*",
            "data.*",
            "dataTable.*",
            "dataTableRow.*",
            "dataTableRows.*",
            "dataTables.*",
            "deviceRecipe.*",
            "deviceRecipes.*",
            "device.*",
            "devices.*",
            "edgeDeployments.*",
            "event.*",
            "events.*",
            "experience.*",
            "experienceDomain.*",
            "experienceDomains.*",
            "experienceEndpoint.*",
            "experienceEndpoints.*",
            "experienceGroup.*",
            "experienceGroups.*",
            "experienceSlug.*",
            "experienceSlugs.*",
            "experienceUser.*",
            "experienceUsers.*",
            "experienceVersion.*",
            "experienceVersions.*",
            "experienceView.*",
            "experienceViews.*",
            "file.*",
            "files.*",
            "flow.*",
            "flows.*",
            "flowVersion.*",
            "flowVersions.*",
            "integration.*",
            "integrations.*",
            "notebook.*",
            "notebooks.*",
            "webhook.*",
            "webhooks.*"
        ],
        "all.Application.read": [
            "applicationApiToken.get",
            "applicationApiTokens.get",
            "applicationCertificate.get",
            "applicationCertificates.get",
            "applicationCertificateAuthority.get",
            "applicationCertificateAuthorities.get",
            "applicationKey.get",
            "applicationKeys.get",
            "application.get",
            "application.debug",
            "application.mqttSubscriptionStream",
            "application.payloadCounts",
            "application.search",
            "data.export",
            "data.timeSeriesQuery",
            "data.lastValueQuery",
            "dataTable.get",
            "dataTableRow.get",
            "dataTableRows.get",
            "dataTableRows.query",
            "dataTableRows.export",
            "dataTables.get",
            "deviceRecipe.get",
            "deviceRecipes.get",
            "device.commandStream",
            "device.get",
            "device.getCompositeState",
            "device.getState",
            "device.stateStream",
            "device.getCommand",
            "device.export",
            "device.getLogEntries",
            "device.debug",
            "devices.get",
            "devices.detailedSummary",
            "devices.export",
            "edgeDeployments.get",
            "event.get",
            "events.delete",
            "events.get",
            "events.export",
            "events.mostRecentBySeverity",
            "experienceDomain.get",
            "experienceDomains.get",
            "experienceEndpoint.get",
            "experienceEndpoint.linkedResources",
            "experienceEndpoints.get",
            "experienceEndpoints.stats",
            "experienceGroup.get",
            "experienceGroups.get",
            "experienceGroups.detailedSummary",
            "experienceSlug.get",
            "experienceSlugs.get",
            "experienceUser.get",
            "experienceUsers.get",
            "experienceUsers.detailedSummary",
            "experienceVersion.get",
            "experienceVersions.get",
            "experienceView.get",
            "experienceView.debug",
            "experienceView.linkedResources",
            "experienceViews.get",
            "experienceViews.detailedSummary",
            "experienceViews.debug",
            "file.get",
            "files.get",
            "flow.get",
            "flow.debug",
            "flow.log",
            "flow.getStorageEntries",
            "flows.get",
            "flows.getByVersion",
            "flowVersion.get",
            "flowVersion.log",
            "flowVersions.get",
            "integration.get",
            "integrations.get",
            "notebook.get",
            "notebook.logs",
            "notebook.requestInputDataExport",
            "notebooks.get",
            "webhook.get",
            "webhooks.get"
        ],
        "all.Device": [
            "data.export",
            "data.timeSeriesQuery",
            "data.lastValueQuery",
            "device.commandStream",
            "device.get",
            "device.getCompositeState",
            "device.getState",
            "device.stateStream",
            "device.getLogEntries",
            "device.getCommand",
            "device.debug",
            "device.sendState",
            "device.sendCommand",
            "device.setConnectionStatus",
            "devices.get",
            "devices.sendCommand"
        ],
        "all.Device.read": [
            "data.export",
            "data.timeSeriesQuery",
            "data.lastValueQuery",
            "device.commandStream",
            "device.get",
            "device.getCompositeState",
            "device.getState",
            "device.getCommand",
            "device.stateStream",
            "device.getLogEntries",
            "device.debug",
            "devices.get"
        ],
        "all.Organization": [
            "applicationApiToken.*",
            "applicationApiTokens.*",
            "applicationCertificate.*",
            "applicationCertificates.*",
            "applicationCertificateAuthority.*",
            "applicationCertificateAuthorities.*",
            "applicationKey.*",
            "applicationKeys.*",
            "application.*",
            "data.*",
            "dataTable.*",
            "dataTableRow.*",
            "dataTableRows.*",
            "dataTables.*",
            "deviceRecipe.*",
            "deviceRecipes.*",
            "device.*",
            "devices.*",
            "edgeDeployments.*",
            "event.*",
            "events.*",
            "experience.*",
            "experienceDomain.*",
            "experienceDomains.*",
            "experienceEndpoint.*",
            "experienceEndpoints.*",
            "experienceGroup.*",
            "experienceGroups.*",
            "experienceSlug.*",
            "experienceSlugs.*",
            "experienceUser.*",
            "experienceUsers.*",
            "experienceVersion.*",
            "experienceVersions.*",
            "experienceView.*",
            "experienceViews.*",
            "file.*",
            "files.*",
            "flow.*",
            "flows.*",
            "flowVersion.*",
            "flowVersions.*",
            "integration.*",
            "integrations.*",
            "notebook.*",
            "notebooks.*",
            "webhook.*",
            "webhooks.*",
            "applications.*",
            "auditLog.*",
            "auditLogs.*",
            "dashboard.*",
            "dashboards.*",
            "org.*"
        ],
        "all.Organization.read": [
            "applicationApiToken.get",
            "applicationApiTokens.get",
            "applicationCertificate.get",
            "applicationCertificates.get",
            "applicationCertificateAuthority.get",
            "applicationCertificateAuthorities.get",
            "applicationKey.get",
            "applicationKeys.get",
            "application.get",
            "application.debug",
            "application.mqttSubscriptionStream",
            "application.payloadCounts",
            "application.search",
            "data.export",
            "data.timeSeriesQuery",
            "data.lastValueQuery",
            "dataTable.get",
            "dataTableRow.get",
            "dataTableRows.get",
            "dataTableRows.query",
            "dataTableRows.export",
            "dataTables.get",
            "deviceRecipe.get",
            "deviceRecipes.get",
            "device.commandStream",
            "device.get",
            "device.getCompositeState",
            "device.getState",
            "device.stateStream",
            "device.getCommand",
            "device.export",
            "device.getLogEntries",
            "device.debug",
            "devices.get",
            "devices.detailedSummary",
            "devices.export",
            "edgeDeployments.get",
            "event.get",
            "events.delete",
            "events.get",
            "events.export",
            "events.mostRecentBySeverity",
            "experienceDomain.get",
            "experienceDomains.get",
            "experienceEndpoint.get",
            "experienceEndpoint.linkedResources",
            "experienceEndpoints.get",
            "experienceEndpoints.stats",
            "experienceGroup.get",
            "experienceGroups.get",
            "experienceGroups.detailedSummary",
            "experienceSlug.get",
            "experienceSlugs.get",
            "experienceUser.get",
            "experienceUsers.get",
            "experienceUsers.detailedSummary",
            "experienceVersion.get",
            "experienceVersions.get",
            "experienceView.get",
            "experienceView.debug",
            "experienceView.linkedResources",
            "experienceViews.get",
            "experienceViews.detailedSummary",
            "experienceViews.debug",
            "file.get",
            "files.get",
            "flow.get",
            "flow.debug",
            "flow.log",
            "flow.getStorageEntries",
            "flows.get",
            "flows.getByVersion",
            "flowVersion.get",
            "flowVersion.log",
            "flowVersions.get",
            "integration.get",
            "integrations.get",
            "notebook.get",
            "notebook.logs",
            "notebook.requestInputDataExport",
            "notebooks.get",
            "webhook.get",
            "webhooks.get",
            "applications.get",
            "applications.detailedSummary",
            "auditLog.get",
            "auditLogs.get",
            "dashboards.get",
            "org.get",
            "org.pendingInvites",
            "org.payloadCounts",
            "org.invoices",
            "org.currentCard",
            "org.chargeDetails"
        ],
        "all.User": [
            "applicationApiToken.*",
            "applicationApiTokens.*",
            "applicationCertificate.*",
            "applicationCertificates.*",
            "applicationCertificateAuthority.*",
            "applicationCertificateAuthorities.*",
            "applicationKey.*",
            "applicationKeys.*",
            "application.*",
            "data.*",
            "dataTable.*",
            "dataTableRow.*",
            "dataTableRows.*",
            "dataTables.*",
            "deviceRecipe.*",
            "deviceRecipes.*",
            "device.*",
            "devices.*",
            "edgeDeployments.*",
            "event.*",
            "events.*",
            "experience.*",
            "experienceDomain.*",
            "experienceDomains.*",
            "experienceEndpoint.*",
            "experienceEndpoints.*",
            "experienceGroup.*",
            "experienceGroups.*",
            "experienceSlug.*",
            "experienceSlugs.*",
            "experienceUser.*",
            "experienceUsers.*",
            "experienceVersion.*",
            "experienceVersions.*",
            "experienceView.*",
            "experienceViews.*",
            "file.*",
            "files.*",
            "flow.*",
            "flows.*",
            "flowVersion.*",
            "flowVersions.*",
            "integration.*",
            "integrations.*",
            "notebook.*",
            "notebooks.*",
            "webhook.*",
            "webhooks.*",
            "applications.*",
            "auditLog.*",
            "auditLogs.*",
            "dashboard.*",
            "dashboards.*",
            "org.*",
            "orgs.*",
            "me.*",
            "applicationTemplates.*"
        ],
        "all.User.read": [
            "applicationApiToken.get",
            "applicationApiTokens.get",
            "applicationCertificate.get",
            "applicationCertificates.get",
            "applicationCertificateAuthority.get",
            "applicationCertificateAuthorities.get",
            "applicationKey.get",
            "applicationKeys.get",
            "application.get",
            "application.debug",
            "application.mqttSubscriptionStream",
            "application.payloadCounts",
            "application.search",
            "data.export",
            "data.timeSeriesQuery",
            "data.lastValueQuery",
            "dataTable.get",
            "dataTableRow.get",
            "dataTableRows.get",
            "dataTableRows.query",
            "dataTableRows.export",
            "dataTables.get",
            "deviceRecipe.get",
            "deviceRecipes.get",
            "device.commandStream",
            "device.get",
            "device.getCompositeState",
            "device.getState",
            "device.stateStream",
            "device.getCommand",
            "device.export",
            "device.getLogEntries",
            "device.debug",
            "devices.get",
            "devices.detailedSummary",
            "devices.export",
            "edgeDeployments.get",
            "event.get",
            "events.delete",
            "events.get",
            "events.export",
            "events.mostRecentBySeverity",
            "experienceDomain.get",
            "experienceDomains.get",
            "experienceEndpoint.get",
            "experienceEndpoint.linkedResources",
            "experienceEndpoints.get",
            "experienceEndpoints.stats",
            "experienceGroup.get",
            "experienceGroups.get",
            "experienceGroups.detailedSummary",
            "experienceSlug.get",
            "experienceSlugs.get",
            "experienceUser.get",
            "experienceUsers.get",
            "experienceUsers.detailedSummary",
            "experienceVersion.get",
            "experienceVersions.get",
            "experienceView.get",
            "experienceView.debug",
            "experienceView.linkedResources",
            "experienceViews.get",
            "experienceViews.detailedSummary",
            "experienceViews.debug",
            "file.get",
            "files.get",
            "flow.get",
            "flow.debug",
            "flow.log",
            "flow.getStorageEntries",
            "flows.get",
            "flows.getByVersion",
            "flowVersion.get",
            "flowVersion.log",
            "flowVersions.get",
            "integration.get",
            "integrations.get",
            "notebook.get",
            "notebook.logs",
            "notebook.requestInputDataExport",
            "notebooks.get",
            "webhook.get",
            "webhooks.get",
            "applications.get",
            "applications.detailedSummary",
            "auditLog.get",
            "auditLogs.get",
            "dashboards.get",
            "org.get",
            "org.pendingInvites",
            "org.payloadCounts",
            "org.invoices",
            "org.currentCard",
            "org.chargeDetails",
            "applicationTemplates.get",
            "orgs.get",
            "me.get",
            "me.fetchRecentItems",
            "me.payloadCounts"
        ]
    },
    "resources": {
        "applicationApiToken": {
            "path": "/applications/{applicationId}/tokens/{apiTokenId}",
            "auth": [
                "applicationApiToken.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "apiTokenId",
                    "description": "ID associated with the API token",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec7417ae143cd83dc4a95"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on an API token",
                    "auth": [
                        "applicationApiToken.get"
                    ],
                    "responses": {
                        "200": {
                            "description": "API token information",
                            "schema": {
                                "$ref": "#/definitions/apiToken"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if API token was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about an API token",
                    "auth": [
                        "applicationApiToken.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "apiToken",
                            "description": "Object containing new properties of the API token",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/apiTokenPatch"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated API token information",
                            "schema": {
                                "$ref": "#/definitions/apiToken"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if API token was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes an API Token",
                    "auth": [
                        "applicationApiToken.delete"
                    ],
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If API token was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if API token was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "applicationApiTokens": {
            "path": "/applications/{applicationId}/tokens",
            "auth": [
                "applicationApiTokens.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the API tokens for an application",
                    "auth": [
                        "applicationApiTokens.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "name",
                            "enum": [
                                "name",
                                "status",
                                "id",
                                "creationDate",
                                "lastUpdated"
                            ],
                            "description": "Field to sort the results by",
                            "example": "name"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "example": "asc",
                            "description": "Direction to sort the results by"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "example": 0,
                            "description": "Which page of results to return"
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "name",
                                "status"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "key"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "my*token"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of API tokens",
                            "schema": {
                                "$ref": "#/definitions/apiToken"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create a new API token for an application",
                    "auth": [
                        "applicationApiTokens.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "apiToken",
                            "description": "API token information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/applicationApiTokenPost"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "The successfully created API token",
                            "schema": {
                                "$ref": "#/definitions/apiToken"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "applicationCertificateAuthorities": {
            "path": "/applications/{applicationId}/certificate-authorities",
            "auth": [
                "applicationCertificateAuthorities.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the application certificate authorities for an application",
                    "auth": [
                        "applicationCertificateAuthorities.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "name",
                            "enum": [
                                "name",
                                "status",
                                "id",
                                "creationDate",
                                "lastUpdated"
                            ],
                            "description": "Field to sort the results by",
                            "example": "name"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "example": "asc",
                            "description": "Direction to sort the results by"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "example": 0,
                            "description": "Which page of results to return"
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "name",
                                "status"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "name"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "the*name"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of application certificate authorities",
                            "schema": {
                                "$ref": "#/definitions/applicationCertificateAuthorities"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create a new application certificate authority for an application",
                    "auth": [
                        "applicationCertificateAuthorities.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "applicationCertificateAuthority",
                            "description": "Application certificate authority information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/applicationCertificateAuthorityPost"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created application certificate authority",
                            "schema": {
                                "$ref": "#/definitions/applicationCertificateAuthority"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "applicationCertificateAuthority": {
            "path": "/applications/{applicationId}/certificate-authorities/{applicationCertificateAuthorityId}",
            "auth": [
                "applicationCertificateAuthority.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "applicationCertificateAuthorityId",
                    "description": "ID associated with the application certificate authority",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec76c7ae143cd83dc4a96"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on an application certificate authority",
                    "auth": [
                        "applicationCertificateAuthority.get"
                    ],
                    "responses": {
                        "200": {
                            "description": "Application certificate authority information",
                            "schema": {
                                "$ref": "#/definitions/applicationCertificateAuthority"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application certificate authority was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about an application certificate authority",
                    "auth": [
                        "applicationCertificateAuthority.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "applicationCertificateAuthority",
                            "description": "Object containing new properties of the application certificate authority",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/applicationCertificateAuthorityPatch"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated application certificate authority information",
                            "schema": {
                                "$ref": "#/definitions/applicationCertificateAuthority"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application certificate authority was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes an application certificate authority",
                    "auth": [
                        "applicationCertificateAuthority.delete"
                    ],
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If application certificate authority was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application certificate authority was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "applicationCertificate": {
            "path": "/applications/{applicationId}/certificates/{applicationCertificateId}",
            "auth": [
                "applicationCertificate.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "applicationCertificateId",
                    "description": "ID associated with the application certificate",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec76c7ae143cd83dc4a96"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on an application certificate",
                    "auth": [
                        "applicationCertificate.get"
                    ],
                    "responses": {
                        "200": {
                            "description": "Application certificate information",
                            "schema": {
                                "$ref": "#/definitions/applicationCertificate"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application certificate was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about an application certificate",
                    "auth": [
                        "applicationCertificate.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "applicationCertificate",
                            "description": "Object containing new properties of the application certificate",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/applicationCertificatePatch"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated application certificate information",
                            "schema": {
                                "$ref": "#/definitions/applicationCertificate"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application certificate was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes an application certificate",
                    "auth": [
                        "applicationCertificate.delete"
                    ],
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If application certificate was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application certificate was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "applicationCertificates": {
            "path": "/applications/{applicationId}/certificates",
            "auth": [
                "applicationCertificates.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the application certificates for an application",
                    "auth": [
                        "applicationCertificates.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "certificateInfo.commonName",
                            "enum": [
                                "certificateInfo.commonName",
                                "status",
                                "id",
                                "creationDate",
                                "lastUpdated"
                            ],
                            "description": "Field to sort the results by",
                            "example": "status"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "example": "asc",
                            "description": "Direction to sort the results by"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "example": 0,
                            "description": "Which page of results to return"
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "certificateInfo.commonName",
                                "status"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "status"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "the*status"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of application certificates",
                            "schema": {
                                "$ref": "#/definitions/applicationCertificates"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create a new application certificate for an application",
                    "auth": [
                        "applicationCertificates.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "applicationCertificate",
                            "description": "Application certificate information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/applicationCertificatePost"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created application certificate",
                            "schema": {
                                "$ref": "#/definitions/applicationCertificate"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "applicationKey": {
            "path": "/applications/{applicationId}/keys/{applicationKeyId}",
            "auth": [
                "applicationKey.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "applicationKeyId",
                    "description": "ID associated with the applicationKey",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec76c7ae143cd83dc4a96"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on an applicationKey",
                    "auth": [
                        "applicationKey.get"
                    ],
                    "responses": {
                        "200": {
                            "description": "applicationKey information",
                            "schema": {
                                "$ref": "#/definitions/applicationKey"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if applicationKey was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about an applicationKey",
                    "auth": [
                        "applicationKey.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "applicationKey",
                            "description": "Object containing new properties of the applicationKey",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/applicationKeyPatch"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated applicationKey information",
                            "schema": {
                                "$ref": "#/definitions/applicationKey"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if applicationKey was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes an applicationKey",
                    "auth": [
                        "applicationKey.delete"
                    ],
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If applicationKey was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if applicationKey was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            },
            "links": {
                "application": {
                    "href": "/applications/{applicationId}"
                },
                "applicationKeys": {
                    "href": "/applications/{applicationId}/keys"
                }
            }
        },
        "applicationKeys": {
            "path": "/applications/{applicationId}/keys",
            "auth": [
                "applicationKeys.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the applicationKeys for an application",
                    "auth": [
                        "applicationKeys.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "name",
                            "enum": [
                                "key",
                                "status",
                                "id",
                                "creationDate",
                                "lastUpdated"
                            ],
                            "description": "Field to sort the results by",
                            "example": "name"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "example": "asc",
                            "description": "Direction to sort the results by"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "example": 0,
                            "description": "Which page of results to return"
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "key",
                                "status"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "key"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "the*key"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of applicationKeys",
                            "schema": {
                                "$ref": "#/definitions/applicationKeys"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create a new applicationKey for an application",
                    "auth": [
                        "applicationKeys.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "applicationKey",
                            "description": "ApplicationKey information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/applicationKeyPost"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created applicationKey",
                            "schema": {
                                "$ref": "#/definitions/applicationKeyPostResponse"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            },
            "links": {
                "application": {
                    "href": "/applications/{applicationId}"
                }
            }
        },
        "applicationTemplates": {
            "path": "/applicationTemplates",
            "auth": [
                "applicationTemplates.*"
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the application templates the current user has permission to see",
                    "auth": [
                        "applicationTemplates.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "name",
                            "enum": [
                                "name",
                                "id",
                                "creationDate",
                                "lastUpdated"
                            ],
                            "description": "Field to sort the results by",
                            "example": "name"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the results by",
                            "example": "asc"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "Which page of results to return",
                            "example": 0
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "name"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "name"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "my * app"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of application templates",
                            "schema": {
                                "$ref": "#/definitions/applicationTemplates"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "application": {
            "path": "/applications/{applicationId}",
            "auth": [
                "application.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID of the associated application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on an application",
                    "auth": [
                        "application.get"
                    ],
                    "params": [
                        {
                            "name": "summaryExclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to exclude from application summary",
                            "example": "payloadCount"
                        },
                        {
                            "name": "summaryInclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to include in application summary",
                            "example": "payloadCount"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Application information",
                            "schema": {
                                "$ref": "#/definitions/application"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about an application",
                    "auth": [
                        "application.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "application",
                            "description": "Object containing new application properties",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/applicationPatch"
                            }
                        },
                        {
                            "name": "summaryExclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to exclude from application summary",
                            "example": "payloadCount"
                        },
                        {
                            "name": "summaryInclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to include in application summary",
                            "example": "payloadCount"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated application information",
                            "schema": {
                                "$ref": "#/definitions/application"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes an application",
                    "auth": [
                        "application.delete"
                    ],
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If application was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "readme": {
                    "path": "/readme",
                    "method": "GET",
                    "summary": "Get the current application readme information",
                    "auth": [
                        "application.get"
                    ],
                    "responses": {
                        "200": {
                            "description": "The application readme information",
                            "schema": {
                                "$ref": "#/definitions/applicationReadme"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "readmePatch": {
                    "path": "/readme",
                    "method": "PATCH",
                    "summary": "Update the current application readme information",
                    "auth": [
                        "application.patch"
                    ],
                    "params": [
                        {
                            "name": "readme",
                            "description": "Object containing new readme information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/applicationReadmePatch"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated readme information",
                            "schema": {
                                "$ref": "#/definitions/applicationReadme"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "payloadCounts": {
                    "path": "/payloadCounts",
                    "method": "GET",
                    "summary": "Returns payload counts for the time range specified for this application",
                    "auth": [
                        "application.payloadCounts"
                    ],
                    "params": [
                        {
                            "name": "start",
                            "type": "string",
                            "in": "query",
                            "default": -2592000000,
                            "description": "Start of range for payload count query (ms since epoch)",
                            "example": 0
                        },
                        {
                            "name": "end",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "End of range for payload count query (ms since epoch)",
                            "example": 1465790400000
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Payload counts, by type and source",
                            "schema": {
                                "$ref": "#/definitions/payloadCounts"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "archiveData": {
                    "path": "/archiveData",
                    "method": "GET",
                    "summary": "Returns success when a job has been enqueued to archive this application's device data for a given day",
                    "auth": [
                        "application.archiveData"
                    ],
                    "params": [
                        {
                            "name": "date",
                            "type": "string",
                            "in": "query",
                            "required": true,
                            "description": "The date to archive data (ms since epoch), it must be within the archive time range older than 31 days and newer than the organizations dataTTL",
                            "example": 1518556791829
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Enqueued a job to archive this applications device data",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "backfillArchiveData": {
                    "path": "/backfillArchiveData",
                    "method": "GET",
                    "summary": "Returns success when a job has been enqueued to backfill all current data to its archive",
                    "auth": [
                        "application.backfillArchiveData"
                    ],
                    "responses": {
                        "200": {
                            "description": "Enqueued a job to backfill device data to this application archive location",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "fullEventsArchive": {
                    "path": "/fullEventsArchive",
                    "method": "GET",
                    "summary": "Returns success when a job has been enqueued to archive all current events",
                    "auth": [
                        "application.fullEventsArchive"
                    ],
                    "responses": {
                        "200": {
                            "description": "Enqueued a job to archive all events to this application archive location",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "fullDataTablesArchive": {
                    "path": "/fullDataTablesArchive",
                    "method": "GET",
                    "summary": "Returns success when a job has been enqueued to archive all selected data tables",
                    "auth": [
                        "application.fullDataTablesArchive"
                    ],
                    "responses": {
                        "200": {
                            "description": "Enqueued a job to archive all selected data tables of this application archive location",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "mqttPublishMessage": {
                    "path": "/mqttPublishMessage",
                    "method": "POST",
                    "summary": "Publishes the given message to the given MQTT topic",
                    "auth": [
                        "application.mqttPublishMessage"
                    ],
                    "params": [
                        {
                            "name": "payload",
                            "description": "Object containing topic and message",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/mqttPublishBody"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Message successfully published",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "mqttSubscriptionStream": {
                    "path": "/mqttSubscriptionStream",
                    "sseStream": true,
                    "method": "GET",
                    "summary": "Attach to a real time stream of state messages for the given MQTT topic using Server Sent Events (SSE)",
                    "auth": [
                        "application.mqttSubscriptionStream"
                    ],
                    "params": [
                        {
                            "name": "keepAliveInterval",
                            "type": "string",
                            "in": "query",
                            "default": 2,
                            "description": "Number of seconds between keepalive messages",
                            "example": 2
                        },
                        {
                            "name": "topic",
                            "type": "string",
                            "in": "query",
                            "required": true,
                            "description": "The MQTT topic to subscribe to",
                            "example": "my/topic"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "SSE stream of mqtt messages for the requested topic",
                            "sseEvents": {
                                "mqttMessage": {
                                    "description": "An SSE event representing a single mqtt payload",
                                    "schema": {
                                        "$ref": "#/definitions/mqttPublishBody"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if device was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "search": {
                    "path": "/search",
                    "method": "GET",
                    "summary": "Search across an application's resources by target identifier",
                    "auth": [
                        "application.search"
                    ],
                    "params": [
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "required": true,
                            "minLength": 1,
                            "description": "The partial resource name being searched for",
                            "example": "my dev"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "An array of resource ids, names, descriptions, and types matching the search query",
                            "schema": {
                                "$ref": "#/definitions/applicationSearchResult"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application is not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "clone": {
                    "path": "/clone",
                    "method": "POST",
                    "summary": "Copy an application into a new application",
                    "auth": [
                        "application.clone"
                    ],
                    "params": [
                        {
                            "name": "options",
                            "description": "Object containing optional clone fields",
                            "in": "body",
                            "schema": {
                                "$ref": "#/definitions/applicationClonePost"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "if dryRun is set and successful, then return success",
                            "schema": {
                                "$ref": "#/definitions/applicationCloneDryRunResult"
                            }
                        },
                        "201": {
                            "description": "If application was successfully cloned",
                            "schema": {
                                "$ref": "#/definitions/applicationCreationByTemplateResult"
                            }
                        },
                        "202": {
                            "description": "If application was enqueued to be cloned",
                            "schema": {
                                "$ref": "#/definitions/jobEnqueuedResult"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application is not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "422": {
                            "description": "Error if too many validation errors occurred on other resources",
                            "schema": {
                                "$ref": "#/definitions/validationErrors"
                            }
                        }
                    }
                },
                "export": {
                    "path": "/export",
                    "method": "POST",
                    "summary": "Export an application and all of its resources",
                    "auth": [
                        "application.export"
                    ],
                    "params": [
                        {
                            "name": "options",
                            "description": "Object containing export application options",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/applicationExportPost"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "a url to download the zip of exported resources",
                            "schema": {
                                "$ref": "#/definitions/applicationExportResult"
                            }
                        },
                        "202": {
                            "description": "If application was enqueued to be exported",
                            "schema": {
                                "$ref": "#/definitions/jobEnqueuedResult"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application is not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            },
            "links": {
                "devices": {
                    "href": "/applications/{applicationId}/devices"
                },
                "flows": {
                    "href": "/applications/{applicationId}/flows"
                },
                "applicationKeys": {
                    "href": "/applications/{applicationId}/keys"
                },
                "webhooks": {
                    "href": "/applications/{applicationId}/webhooks"
                },
                "events": {
                    "href": "/applications/{applicationId}/events"
                },
                "data": {
                    "href": "/applications/{applicationId}/data"
                },
                "deviceRecipes": {
                    "href": "/applications/{applicationId}/device-recipes"
                },
                "applications": {
                    "href": "/applications"
                }
            }
        },
        "applications": {
            "path": "/applications",
            "auth": [
                "applications.*"
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the applications the current user has permission to see",
                    "auth": [
                        "applications.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "name",
                            "enum": [
                                "name",
                                "id",
                                "creationDate",
                                "ownerId",
                                "lastUpdated"
                            ],
                            "description": "Field to sort the results by",
                            "example": "name"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the results by",
                            "example": "asc"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "Which page of results to return",
                            "example": 0
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "name"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "name"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "my * app"
                        },
                        {
                            "name": "orgId",
                            "type": "string",
                            "pattern": "^([A-Fa-f\\d]{24}|)$",
                            "in": "query",
                            "description": "If not provided, return all applications. If provided but blank, only return applications belonging to the current user. If provided and an id, only return applications belonging to the given organization id.",
                            "example": "575ecdf07ae143cd83dc4a9a"
                        },
                        {
                            "name": "summaryExclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to exclude from application summary",
                            "example": "payloadCount"
                        },
                        {
                            "name": "summaryInclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to include in application summary",
                            "example": "payloadCount"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of applications",
                            "schema": {
                                "$ref": "#/definitions/applications"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create a new application",
                    "auth": [
                        "applications.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "application",
                            "description": "New application information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/applicationPost"
                            }
                        },
                        {
                            "name": "summaryExclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to exclude from application summary",
                            "example": "payloadCount"
                        },
                        {
                            "name": "summaryInclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to include in application summary",
                            "example": "payloadCount"
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created application",
                            "schema": {
                                "$ref": "#/definitions/application"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "import": {
                    "path": "/import",
                    "method": "POST",
                    "summary": "Create a new application from an import bundle",
                    "auth": [
                        "applications.import"
                    ],
                    "params": [
                        {
                            "name": "importBundle",
                            "description": "The zip file containing the application to import and all of its resources",
                            "in": "multipart",
                            "type": "file",
                            "required": true
                        },
                        {
                            "name": "ownerId",
                            "description": "The owner id of the new application, defaults to the id of the user making the request",
                            "in": "multipart",
                            "type": "string",
                            "pattern": "^[A-Fa-f\\d]{24}$",
                            "example": "575ed6e87ae143cd83dc4aa8"
                        },
                        {
                            "name": "ownerType",
                            "description": "The type of the owner id",
                            "in": "multipart",
                            "type": "string",
                            "enum": [
                                "user",
                                "organization"
                            ],
                            "default": "user",
                            "example": "user"
                        },
                        {
                            "name": "includeDevices",
                            "description": "If set, import devices from the import bundle",
                            "in": "multipart",
                            "type": "string",
                            "example": true
                        },
                        {
                            "name": "includeDataTableRows",
                            "description": "If set, import data table rows from import bundle",
                            "in": "multipart",
                            "type": "string",
                            "example": true
                        },
                        {
                            "name": "includeFiles",
                            "description": "If set, import files from import bundle",
                            "in": "multipart",
                            "type": "string",
                            "example": true
                        },
                        {
                            "name": "email",
                            "description": "Email address to notify the user when the job to import the application has completed or errored, defaults to the email address of the user making the request",
                            "in": "multipart",
                            "type": "string",
                            "example": "email@example.com"
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created application",
                            "schema": {
                                "$ref": "#/definitions/applicationCreationByTemplateResult"
                            }
                        },
                        "202": {
                            "description": "If application was enqueued to be imported",
                            "schema": {
                                "$ref": "#/definitions/jobEnqueuedResult"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application is not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "422": {
                            "description": "Error if too many validation errors occurred on other resources",
                            "schema": {
                                "$ref": "#/definitions/validationErrors"
                            }
                        }
                    }
                }
            }
        },
        "auditLog": {
            "path": "/orgs/{orgId}/audit-logs/{auditLogId}",
            "auth": [
                "auditLog.*"
            ],
            "params": [
                {
                    "name": "orgId",
                    "description": "ID associated with the organization",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ed6e87ae143cd83dc4aa8"
                },
                {
                    "name": "auditLogId",
                    "description": "ID associated with the audit log",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "57955788124b37010084c053"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on an audit log",
                    "auth": [
                        "auditLog.get"
                    ],
                    "responses": {
                        "200": {
                            "description": "Audit log information",
                            "schema": {
                                "$ref": "#/definitions/auditLog"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if audit log was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "auditLogs": {
            "path": "/orgs/{orgId}/audit-logs",
            "auth": [
                "auditLogs.*"
            ],
            "params": [
                {
                    "name": "orgId",
                    "description": "ID associated with the organization",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ed6e87ae143cd83dc4aa8"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the audit logs for the organization",
                    "auth": [
                        "auditLogs.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "creationDate",
                            "enum": [
                                "creationDate",
                                "responseStatus",
                                "actorName"
                            ],
                            "description": "Field to sort the results by",
                            "example": "creationDate"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "desc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the results by",
                            "example": "asc"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "Which page of results to return",
                            "example": 0
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "start",
                            "type": "string",
                            "in": "query",
                            "description": "Start of time range for audit log query",
                            "example": 1465790400000
                        },
                        {
                            "name": "end",
                            "type": "string",
                            "in": "query",
                            "description": "End of time range for audit log query",
                            "example": 1465790400000
                        },
                        {
                            "name": "auditLogFilter",
                            "description": "Filters for the audit log query",
                            "schema": {
                                "$ref": "#/definitions/auditLogFilter"
                            },
                            "in": "query"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of audit logs",
                            "schema": {
                                "$ref": "#/definitions/auditLogs"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if organization was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            },
            "links": {
                "org": {
                    "href": "/orgs/{orgId}"
                }
            }
        },
        "auth": {
            "path": "/auth",
            "actions": {
                "authenticateUser": {
                    "path": "/user",
                    "method": "POST",
                    "description": "Authenticates a user using the provided credentials.",
                    "params": [
                        {
                            "name": "credentials",
                            "description": "User authentication credentials",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/userCredentials"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Successful authentication. The included api access token has the scope 'all.User'.",
                            "schema": {
                                "$ref": "#/definitions/authedUser"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "401": {
                            "description": "Unauthorized error if authentication fails",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "authenticateUserGithub": {
                    "path": "/user/github",
                    "method": "POST",
                    "description": "Authenticates a user via GitHub OAuth.",
                    "params": [
                        {
                            "name": "oauth",
                            "description": "User authentication credentials (access token)",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/githubLogin"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Successful authentication. The included api access token has the scope 'all.User'.",
                            "schema": {
                                "$ref": "#/definitions/authedUser"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "401": {
                            "description": "Unauthorized error if authentication fails",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "authenticateDevice": {
                    "path": "/device",
                    "method": "POST",
                    "description": "Authenticates a device using the provided credentials.",
                    "params": [
                        {
                            "name": "credentials",
                            "description": "Device authentication credentials",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/deviceCredentials"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Successful authentication. The included api access token by default has the scope 'all.Device'.",
                            "schema": {
                                "$ref": "#/definitions/authedDevice"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "401": {
                            "description": "Unauthorized error if authentication fails",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "ssoDomain": {
                    "path": "/ssoDomain",
                    "method": "GET",
                    "description": "Checks email domain for SSO configuration.",
                    "params": [
                        {
                            "name": "email",
                            "type": "string",
                            "in": "query",
                            "required": true,
                            "description": "The email address associated with the user login",
                            "example": "example@example.com"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Successful finding SSO for domain. Returns SSO request URL and type.",
                            "schema": {
                                "$ref": "#/definitions/ssoRequest"
                            }
                        },
                        "204": {
                            "description": "No domain associated with an SSO configuration"
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "authenticateUserSaml": {
                    "path": "/user/saml",
                    "method": "POST",
                    "description": "Authenticates a user via a SAML response.",
                    "params": [
                        {
                            "name": "saml",
                            "description": "Encoded SAML response from an IDP for a user.",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/samlResponse"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Successful authentication. The included api access token has the scope 'all.User'.",
                            "schema": {
                                "$ref": "#/definitions/authedUser"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "401": {
                            "description": "Unauthorized error if authentication fails",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "dashboard": {
            "path": "/dashboards/{dashboardId}",
            "params": [
                {
                    "name": "dashboardId",
                    "description": "ID of the associated dashboard",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ece2b7ae143cd83dc4a9b"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on a dashboard",
                    "params": [
                        {
                            "name": "password",
                            "description": "Password for password-protected dashboards",
                            "type": "string",
                            "in": "query",
                            "example": "myPassword"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Dashboard information",
                            "schema": {
                                "$ref": "#/definitions/dashboard"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if dashboard was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about a dashboard",
                    "auth": [
                        "dashboard.*",
                        "dashboard.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "dashboard",
                            "description": "Object containing new dashboard properties",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/dashboardPatch"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Update dashboard information",
                            "schema": {
                                "$ref": "#/definitions/dashboard"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if dashboard was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes a dashboard",
                    "auth": [
                        "dashboard.*",
                        "dashboard.delete"
                    ],
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If dashboard was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if dashboard was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "validateContext": {
                    "method": "POST",
                    "path": "/validateContext",
                    "summary": "Validates a context object against the dashboard's context configuration",
                    "params": [
                        {
                            "name": "ctx",
                            "description": "The context object to validate",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/dashboardContextInstance"
                            }
                        },
                        {
                            "name": "password",
                            "description": "Password for password-protected dashboards",
                            "type": "string",
                            "in": "query",
                            "example": "myPassword"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "If context is valid",
                            "schema": {
                                "$ref": "#/definitions/validateContextSuccess"
                            }
                        },
                        "400": {
                            "description": "Error if context is invalid",
                            "schema": {
                                "$ref": "#/definitions/validateContextError"
                            }
                        },
                        "404": {
                            "description": "Error if dashboard or application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "sendReport": {
                    "method": "POST",
                    "summary": "Sends a snapshot of a dashboard",
                    "auth": [
                        "dashboard.*",
                        "dashboard.sendReport"
                    ],
                    "params": [
                        {
                            "name": "reportConfig",
                            "description": "Object containing report options",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/dashboardSendReport"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Send dashboard report",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if dashboard was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            },
            "links": {
                "dashboards": {
                    "href": "/dashboards"
                }
            }
        },
        "dashboards": {
            "path": "/dashboards",
            "auth": [
                "dashboards.*"
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the dashboards the current user has permission to see",
                    "auth": [
                        "dashboards.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "name",
                            "enum": [
                                "name",
                                "id",
                                "creationDate",
                                "ownerId",
                                "applicationId"
                            ],
                            "description": "Field to sort the results by",
                            "example": "name"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the results by",
                            "example": "asc"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "Which page of results to return",
                            "example": 0
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "name"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "name"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "my * dashboard"
                        },
                        {
                            "name": "applicationId",
                            "type": "string",
                            "pattern": "^([A-Fa-f\\d]{24}|)$",
                            "in": "query",
                            "description": "If not provided, return all dashboards. If provided but blank, only return dashboards that are not linked to applications. If provided and an id, only return dashboards linked to the given application id.",
                            "example": "575ec8687ae143cd83dc4a97"
                        },
                        {
                            "name": "orgId",
                            "type": "string",
                            "pattern": "^([A-Fa-f\\d]{24}|)$",
                            "in": "query",
                            "description": "If not provided, return all dashboards. If provided but blank, only return dashboards belonging to the current user. If provided and an id, only return dashboards belonging to the given organization id.",
                            "example": "575ece7e7ae143cd83dc4a9c"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of dashboards",
                            "schema": {
                                "$ref": "#/definitions/dashboards"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create a new dashboard",
                    "auth": [
                        "dashboards.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "dashboard",
                            "description": "New dashboard information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/dashboardPost"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created dashboard",
                            "schema": {
                                "$ref": "#/definitions/dashboard"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "dataTableRow": {
            "path": "/applications/{applicationId}/data-tables/{dataTableId}/rows/{rowId}",
            "auth": [
                "dataTableRow.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "dataTableId",
                    "description": "ID associated with the data table",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ed78e7ae143cd83dc4aab"
                },
                {
                    "name": "rowId",
                    "description": "ID associated with the data table row",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "596f832b128eda5cfe765443"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves the data table row",
                    "auth": [
                        "dataTableRow.get"
                    ],
                    "responses": {
                        "200": {
                            "description": "Data table row information",
                            "schema": {
                                "$ref": "#/definitions/dataTableRow"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if data table row was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates the data table row",
                    "auth": [
                        "dataTableRow.patch"
                    ],
                    "params": [
                        {
                            "name": "dataTableRow",
                            "description": "Object containing updated properties for the data table row",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/dataTableRowInsertUpdate"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated data table row information",
                            "schema": {
                                "$ref": "#/definitions/dataTableRow"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if data table row was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes a data table row",
                    "auth": [
                        "dataTableRow.delete"
                    ],
                    "responses": {
                        "200": {
                            "description": "If data table row was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if data table row was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "dataTableRows": {
            "path": "/applications/{applicationId}/data-tables/{dataTableId}/rows",
            "auth": [
                "dataTableRows.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "dataTableId",
                    "description": "ID associated with the data table",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ed78e7ae143cd83dc4aab"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the rows for a data table",
                    "auth": [
                        "dataTableRows.get"
                    ],
                    "params": [
                        {
                            "name": "sortColumn",
                            "type": "string",
                            "in": "query",
                            "description": "Column to sort the rows by",
                            "example": "myColumnName"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the rows by",
                            "example": "asc"
                        },
                        {
                            "name": "limit",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many rows to return",
                            "example": 0
                        },
                        {
                            "name": "offset",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "How many rows to skip",
                            "example": 0
                        },
                        {
                            "name": "includeFields",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of fields to include in resulting rows. When not provided, returns all fields.",
                            "example": "id,createdAt"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of data table rows",
                            "schema": {
                                "$ref": "#/definitions/dataTableRows"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if data table was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "query": {
                    "method": "POST",
                    "path": "/query",
                    "summary": "Queries for rows from a data table",
                    "auth": [
                        "dataTableRows.query"
                    ],
                    "params": [
                        {
                            "name": "sortColumn",
                            "type": "string",
                            "in": "query",
                            "description": "Column to sort the rows by",
                            "example": "myColumnName"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the rows by",
                            "example": "asc"
                        },
                        {
                            "name": "limit",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many rows to return",
                            "example": 0
                        },
                        {
                            "name": "offset",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "How many rows to skip",
                            "example": 0
                        },
                        {
                            "name": "includeFields",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of fields to include in resulting rows. When not provided, returns all fields.",
                            "example": "id,createdAt"
                        },
                        {
                            "name": "query",
                            "in": "body",
                            "description": "Query to apply to filter the data table",
                            "schema": {
                                "$ref": "#/definitions/advancedQuery"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of data table rows",
                            "schema": {
                                "$ref": "#/definitions/dataTableRows"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if data table was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Inserts a new row(s) into a data table",
                    "auth": [
                        "dataTableRows.post"
                    ],
                    "params": [
                        {
                            "name": "dataTableRow",
                            "description": "The row(s) to insert",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/dataTableRowInsert"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created data table row, or bulk insert count",
                            "schema": {
                                "$ref": "#/definitions/dataTableRowInsertResult"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if data table was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "export": {
                    "method": "POST",
                    "path": "/export",
                    "summary": "Request an export of the data table's data",
                    "auth": [
                        "dataTableRows.export"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "exportData",
                            "required": true,
                            "description": "Object containing export specifications",
                            "in": "body",
                            "schema": {
                                "$ref": "#/definitions/dataTableRowsExport"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "If request was successfully queued",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if data table was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "POST",
                    "path": "/delete",
                    "summary": "Delete rows from a data table",
                    "auth": [
                        "dataTableRows.delete"
                    ],
                    "params": [
                        {
                            "name": "query",
                            "in": "body",
                            "description": "Query to apply to filter the data table",
                            "schema": {
                                "$ref": "#/definitions/advancedQuery"
                            }
                        },
                        {
                            "name": "limit",
                            "in": "query",
                            "description": "Limit number of rows to delete from data table",
                            "type": "string",
                            "default": "1000",
                            "example": "10"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "If request successfully deletes a set of Data Table rows",
                            "schema": {
                                "$ref": "#/definitions/dataTableRowsDelete"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if data table was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "truncate": {
                    "method": "POST",
                    "path": "/truncate",
                    "summary": "Delete all data in the data table",
                    "auth": [
                        "dataTableRows.truncate"
                    ],
                    "responses": {
                        "200": {
                            "description": "If request successfully deleted **all** rows in the data table, this will **not** send workflow data table deletion triggers",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if data table was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "dataTable": {
            "path": "/applications/{applicationId}/data-tables/{dataTableId}",
            "auth": [
                "dataTable.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "dataTableId",
                    "description": "ID associated with the data table",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ed78e7ae143cd83dc4aab"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on a data table",
                    "auth": [
                        "dataTable.get"
                    ],
                    "responses": {
                        "200": {
                            "description": "Data table information",
                            "schema": {
                                "$ref": "#/definitions/dataTable"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if data table was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about a data table",
                    "auth": [
                        "dataTable.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "dataTable",
                            "description": "Object containing updated properties of the data table",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/dataTablePatch"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated data table information",
                            "schema": {
                                "$ref": "#/definitions/dataTable"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if data table was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "addColumn": {
                    "method": "POST",
                    "path": "/column",
                    "summary": "Adds a new column to this data table",
                    "auth": [
                        "dataTable.addColumn"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "dataTableColumn",
                            "description": "Object containing the new column properties",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/dataTableColumn"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated data table information",
                            "schema": {
                                "$ref": "#/definitions/dataTable"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if data table was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "removeColumn": {
                    "method": "DELETE",
                    "path": "/column",
                    "summary": "Removes a column from this data table",
                    "auth": [
                        "dataTable.removeColumn"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "columnName",
                            "description": "Name of the column to remove",
                            "in": "query",
                            "type": "string",
                            "required": true,
                            "pattern": "^[0-9a-zA-Z_-]{1,255}$",
                            "example": "myColumnName"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated data table information",
                            "schema": {
                                "$ref": "#/definitions/dataTable"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if data table was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes a data table",
                    "auth": [
                        "dataTable.delete"
                    ],
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If data table was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if data table was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "dataTables": {
            "path": "/applications/{applicationId}/data-tables",
            "auth": [
                "dataTables.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the data tables for an application",
                    "auth": [
                        "dataTables.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "name",
                            "enum": [
                                "name",
                                "id",
                                "creationDate",
                                "lastUpdated"
                            ],
                            "description": "Field to sort the results by",
                            "example": "name"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the results by",
                            "example": "asc"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "Which page of results to return",
                            "example": 0
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "name"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "name"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "my*table"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of data tables",
                            "schema": {
                                "$ref": "#/definitions/dataTables"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create a new data table for an application",
                    "auth": [
                        "dataTables.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "dataTable",
                            "description": "New data table information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/dataTablePost"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created data table",
                            "schema": {
                                "$ref": "#/definitions/dataTable"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "data": {
            "path": "/applications/{applicationId}/data",
            "auth": [
                "data.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "timeSeriesQuery": {
                    "method": "POST",
                    "path": "/time-series-query",
                    "summary": "Returns the data for the given query",
                    "auth": [
                        "data.timeSeriesQuery"
                    ],
                    "params": [
                        {
                            "name": "query",
                            "description": "The query parameters",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/timeSeriesQuery"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Data for requested time range",
                            "schema": {
                                "$ref": "#/definitions/timeSeriesData"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "lastValueQuery": {
                    "method": "POST",
                    "path": "/last-value-query",
                    "summary": "Returns the last known data for the given attribute",
                    "auth": [
                        "data.lastValueQuery"
                    ],
                    "params": [
                        {
                            "name": "query",
                            "description": "The query parameters",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/lastValueQuery"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Last known data for the requested attribute",
                            "schema": {
                                "$ref": "#/definitions/lastValueData"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "export": {
                    "path": "/export",
                    "method": "POST",
                    "summary": "Creates a csv file from a query of devices and attributes over a time range.",
                    "auth": [
                        "data.export"
                    ],
                    "params": [
                        {
                            "name": "query",
                            "description": "The query parameters",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/dataExport"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "If command was successfully sent",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            },
            "links": {
                "application": {
                    "href": "/applications/{applicationId}"
                }
            }
        },
        "deviceRecipe": {
            "path": "/applications/{applicationId}/device-recipes/{deviceRecipeId}",
            "auth": [
                "deviceRecipe.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "deviceRecipeId",
                    "description": "ID associated with the device recipe",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ecec57ae143cd83dc4a9f"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on a device recipe",
                    "auth": [
                        "deviceRecipe.get"
                    ],
                    "responses": {
                        "200": {
                            "description": "Device recipe information",
                            "schema": {
                                "$ref": "#/definitions/deviceRecipe"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if device recipe was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about a device recipe",
                    "auth": [
                        "deviceRecipe.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "deviceRecipe",
                            "description": "Object containing new properties of the device recipe",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/deviceRecipePatch"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated device recipe information",
                            "schema": {
                                "$ref": "#/definitions/deviceRecipe"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if device recipe was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes a device recipe",
                    "auth": [
                        "deviceRecipe.delete"
                    ],
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If device recipe was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if device recipe was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "bulkCreate": {
                    "path": "/bulkCreate",
                    "method": "POST",
                    "summary": "Bulk creates devices using this recipe from a CSV",
                    "auth": [
                        "deviceRecipe.bulkCreate"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "bulkInfo",
                            "description": "Object containing bulk creation info",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/deviceRecipeBulkCreatePost"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "If devices were successfully created",
                            "schema": {
                                "$ref": "#/definitions/deviceRecipeBulkCreate"
                            }
                        },
                        "202": {
                            "description": "If devices were enqueued to be created",
                            "schema": {
                                "$ref": "#/definitions/deviceRecipeBulkCreateEnqueued"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if device recipe was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            },
            "links": {
                "application": {
                    "href": "/applications/{applicationId}"
                },
                "deviceRecipes": {
                    "href": "/applications/{applicationId}/device-recipes"
                }
            }
        },
        "deviceRecipes": {
            "path": "/applications/{applicationId}/device-recipes",
            "auth": [
                "deviceRecipes.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the device recipes for an application",
                    "auth": [
                        "deviceRecipes.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "name",
                            "enum": [
                                "name",
                                "id",
                                "creationDate",
                                "lastUpdated"
                            ],
                            "description": "Field to sort the results by",
                            "example": "name"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the results by",
                            "example": "asc"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "Which page of results to return",
                            "example": 0
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "name"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "name"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "my * recipe"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of device recipes",
                            "schema": {
                                "$ref": "#/definitions/deviceRecipes"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create a new device recipe for an application",
                    "auth": [
                        "deviceRecipes.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "deviceRecipe",
                            "description": "New device recipe information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/deviceRecipePost"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created device recipe",
                            "schema": {
                                "$ref": "#/definitions/deviceRecipe"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            },
            "links": {
                "application": {
                    "href": "/applications/{applicationId}"
                }
            }
        },
        "device": {
            "path": "/applications/{applicationId}/devices/{deviceId}",
            "auth": [
                "device.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "deviceId",
                    "description": "ID associated with the device",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ecf887ae143cd83dc4aa2"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on a device",
                    "auth": [
                        "device.get"
                    ],
                    "params": [
                        {
                            "name": "excludeConnectionInfo",
                            "type": "string",
                            "in": "query",
                            "description": "If set, do not return connection info",
                            "example": true
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Device information",
                            "schema": {
                                "$ref": "#/definitions/device"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if device was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about a device",
                    "auth": [
                        "device.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "device",
                            "description": "Object containing new properties of the device",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/devicePatch"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated device information",
                            "schema": {
                                "$ref": "#/definitions/device"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if device was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes a device",
                    "auth": [
                        "device.delete"
                    ],
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If device was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if device was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "getCompositeState": {
                    "path": "/compositeState",
                    "method": "GET",
                    "summary": "Retrieve the composite last complete state of the device",
                    "auth": [
                        "device.getCompositeState"
                    ],
                    "params": [
                        {
                            "name": "start",
                            "type": "string",
                            "in": "query",
                            "default": 1,
                            "description": "Start of time range to look at to build composite state",
                            "example": 1465790400000
                        },
                        {
                            "name": "end",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "End of time range to look at to build composite state",
                            "example": 1465790400000
                        },
                        {
                            "name": "attributes",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of attributes to include. When not provided, returns all attributes.",
                            "example": "myAttr1,myAttr2"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Composite last state of the device",
                            "schema": {
                                "$ref": "#/definitions/compositeDeviceState"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if device was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "getState": {
                    "path": "/state",
                    "method": "GET",
                    "summary": "Retrieve the last known state(s) of the device",
                    "auth": [
                        "device.getState"
                    ],
                    "params": [
                        {
                            "name": "limit",
                            "type": "string",
                            "in": "query",
                            "default": 1,
                            "description": "Max state entries to return (ordered by time descending)",
                            "example": 10
                        },
                        {
                            "name": "since",
                            "type": "string",
                            "in": "query",
                            "description": "Look for state entries since this time (ms since epoch)",
                            "example": 1465790400000
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Recent device states",
                            "schema": {
                                "$ref": "#/definitions/deviceStates"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if device was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "stateStream": {
                    "path": "/stateStream",
                    "sseStream": true,
                    "method": "GET",
                    "summary": "Attach to a real time stream of state messages from this device using Server Sent Events (SSE)",
                    "auth": [
                        "device.stateStream"
                    ],
                    "params": [
                        {
                            "name": "keepAliveInterval",
                            "type": "string",
                            "in": "query",
                            "default": 2,
                            "description": "Number of seconds between keepalive messages",
                            "example": 2
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "SSE stream of new state messages for this device",
                            "sseEvents": {
                                "deviceState": {
                                    "description": "An SSE event representing a single device state",
                                    "schema": {
                                        "$ref": "#/definitions/deviceState"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if device was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "sendState": {
                    "path": "/state",
                    "method": "POST",
                    "summary": "Send the current state of the device",
                    "auth": [
                        "device.sendState"
                    ],
                    "params": [
                        {
                            "name": "deviceState",
                            "description": "A single device state object, or an array of device state objects",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/deviceStateOrStates"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "If state was successfully received",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if device was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "getCommand": {
                    "path": "/command",
                    "method": "GET",
                    "summary": "Retrieve the last known commands(s) sent to the device",
                    "auth": [
                        "device.getCommand"
                    ],
                    "params": [
                        {
                            "name": "limit",
                            "type": "string",
                            "in": "query",
                            "default": 1,
                            "description": "Max command entries to return (ordered by time descending)",
                            "example": 10
                        },
                        {
                            "name": "since",
                            "type": "string",
                            "in": "query",
                            "description": "Look for command entries since this time (ms since epoch)",
                            "example": 1465790400000
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Recent device commands",
                            "schema": {
                                "$ref": "#/definitions/deviceCommands"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if device was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "sendCommand": {
                    "path": "/command",
                    "method": "POST",
                    "summary": "Send a command to a device",
                    "auth": [
                        "device.sendCommand"
                    ],
                    "params": [
                        {
                            "name": "deviceCommand",
                            "description": "Command to send to the device",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/deviceCommand"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "If command was successfully sent",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if device was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "commandStream": {
                    "path": "/commandStream",
                    "sseStream": true,
                    "method": "GET",
                    "summary": "Attach to a real time stream of command messages to this device using Server Sent Events (SSE)",
                    "auth": [
                        "device.commandStream"
                    ],
                    "params": [
                        {
                            "name": "keepAliveInterval",
                            "type": "string",
                            "in": "query",
                            "default": 2,
                            "description": "Number of seconds between keepalive messages",
                            "example": 2
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "SSE stream of new command messages for this device",
                            "sseEvents": {
                                "deviceCommand": {
                                    "description": "An SSE event representing a single device command",
                                    "schema": {
                                        "$ref": "#/definitions/deviceCommand"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if device was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "export": {
                    "path": "/export",
                    "method": "POST",
                    "summary": "Creates a device data export. Defaults to all data.",
                    "auth": [
                        "device.export"
                    ],
                    "params": [
                        {
                            "name": "start",
                            "type": "string",
                            "in": "query",
                            "default": 1,
                            "description": "Start time of export (ms since epoch - 0 means now, negative is relative to now)",
                            "example": 1465790400000
                        },
                        {
                            "name": "end",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "End time of export (ms since epoch - 0 means now, negative is relative to now)",
                            "example": 1465790400000
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "in": "query",
                            "example": "email@example.com",
                            "description": "Email address to send export to. Defaults to current user's email."
                        },
                        {
                            "name": "callbackUrl",
                            "type": "string",
                            "in": "query",
                            "example": "https://example.com/cburl",
                            "description": "Callback URL to call with export result"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "If generation of export was successfully started",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if device was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "removeData": {
                    "path": "/data",
                    "method": "DELETE",
                    "summary": "Removes all device data for the specified time range. Defaults to all data.",
                    "auth": [
                        "device.removeData"
                    ],
                    "params": [
                        {
                            "name": "start",
                            "type": "string",
                            "in": "query",
                            "default": 1,
                            "description": "Start time of export (ms since epoch - 0 means now, negative is relative to now)",
                            "example": 1465790400000
                        },
                        {
                            "name": "end",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "End time of export (ms since epoch - 0 means now, negative is relative to now)",
                            "example": 1465790400000
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "If data removal was successfully started",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if device was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "getLogEntries": {
                    "path": "/logs",
                    "method": "GET",
                    "summary": "Retrieve the recent log entries about the device",
                    "auth": [
                        "device.getLogEntries"
                    ],
                    "params": [
                        {
                            "name": "limit",
                            "type": "string",
                            "in": "query",
                            "default": 1,
                            "description": "Max log entries to return (ordered by time descending)",
                            "example": 10
                        },
                        {
                            "name": "since",
                            "type": "string",
                            "in": "query",
                            "description": "Look for log entries since this time (ms since epoch)",
                            "example": 1465790400000
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Recent log entries",
                            "schema": {
                                "$ref": "#/definitions/deviceLog"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if device was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "setConnectionStatus": {
                    "path": "/setConnectionStatus",
                    "method": "POST",
                    "summary": "Set the current connection status of the device",
                    "auth": [
                        "device.setConnectionStatus"
                    ],
                    "params": [
                        {
                            "name": "connectionStatus",
                            "description": "The current connection status of the device",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/deviceConnectionStatus"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "If connection status was successfully applied",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if device was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            },
            "links": {
                "application": {
                    "href": "/applications/{applicationId}"
                },
                "devices": {
                    "href": "/applications/{applicationId}/devices"
                }
            }
        },
        "devices": {
            "path": "/applications/{applicationId}/devices",
            "auth": [
                "devices.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the devices for an application",
                    "auth": [
                        "devices.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "name",
                            "enum": [
                                "name",
                                "id",
                                "creationDate",
                                "lastUpdated"
                            ],
                            "description": "Field to sort the results by",
                            "example": "name"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the results by",
                            "example": "asc"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "Which page of results to return",
                            "example": 0
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "name"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "name"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "my * device"
                        },
                        {
                            "name": "deviceClass",
                            "description": "Filter the devices by the given device class or classes",
                            "schema": {
                                "$ref": "#/definitions/deviceClassFilter"
                            },
                            "in": "query"
                        },
                        {
                            "name": "tagFilter",
                            "description": "Array of tag pairs to filter by",
                            "schema": {
                                "$ref": "#/definitions/deviceTagFilter"
                            },
                            "in": "query"
                        },
                        {
                            "name": "excludeConnectionInfo",
                            "type": "string",
                            "in": "query",
                            "description": "If set, do not return connection info",
                            "example": true
                        },
                        {
                            "name": "parentId",
                            "type": "string",
                            "in": "query",
                            "description": "Filter devices as children of a given system id",
                            "example": "575ecf887ae143cd83dc4aa2"
                        },
                        {
                            "name": "query",
                            "type": "object",
                            "description": "Device filter JSON object which overides the filterField, filter, deviceClass, tagFilter, and parentId parameters.",
                            "schema": {
                                "$ref": "#/definitions/advancedDeviceQuery"
                            },
                            "in": "query"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of devices",
                            "schema": {
                                "$ref": "#/definitions/devices"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create a new device for an application",
                    "auth": [
                        "devices.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "device",
                            "description": "New device information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/devicePost"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created device",
                            "schema": {
                                "$ref": "#/definitions/device"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Update the fields of one or more devices",
                    "auth": [
                        "devices.patch"
                    ],
                    "params": [
                        {
                            "name": "patchInfo",
                            "description": "Object containing device filter fields and updated properties",
                            "in": "body",
                            "schema": {
                                "$ref": "#/definitions/devicesPatch"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully queued bulk update job",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "sendCommand": {
                    "path": "/command",
                    "method": "POST",
                    "summary": "Send a command to multiple devices",
                    "auth": [
                        "devices.sendCommand"
                    ],
                    "params": [
                        {
                            "name": "multiDeviceCommand",
                            "description": "Command to send to the device",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/multiDeviceCommand"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "If command was successfully sent",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "export": {
                    "path": "/export",
                    "method": "POST",
                    "summary": "Creates an export of all device metadata",
                    "auth": [
                        "devices.export"
                    ],
                    "params": [
                        {
                            "name": "email",
                            "type": "string",
                            "in": "query",
                            "example": "email@example.com",
                            "description": "Email address to send export to. Defaults to current user's email."
                        },
                        {
                            "name": "callbackUrl",
                            "type": "string",
                            "in": "query",
                            "example": "https://example.com/cburl",
                            "description": "Callback URL to call with export result"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "If generation of export was successfully started",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            },
            "links": {
                "application": {
                    "href": "/applications/{applicationId}"
                }
            }
        },
        "edgeDeployments": {
            "path": "/applications/{applicationId}/edge/deployments",
            "auth": [
                "edgeDeployments.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the edge deployments for an application",
                    "auth": [
                        "edgeDeployments.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "lastUpdated",
                            "enum": [
                                "id",
                                "deviceId",
                                "flowId",
                                "desiredVersion",
                                "currentVersion",
                                "creationDate",
                                "lastUpdated"
                            ],
                            "description": "Field to sort the results by",
                            "example": "creationDate"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the results by",
                            "example": "asc"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "Which page of results to return",
                            "example": 0
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "deviceId",
                            "type": "string",
                            "in": "query",
                            "pattern": "^[A-Fa-f\\d]{24}$",
                            "description": "Filter deployments to the given Device ID",
                            "example": "575ecf887ae143cd83dc4aa2"
                        },
                        {
                            "name": "version",
                            "type": "string",
                            "in": "query",
                            "description": "Filter deployments to the given Workflow Version (matches against both current and desired)",
                            "example": "myFlowVersion"
                        },
                        {
                            "name": "filterEmpty",
                            "in": "query",
                            "description": "Filter out deployments where both the current and desired version are null.",
                            "example": true
                        },
                        {
                            "name": "flowId",
                            "type": "string",
                            "in": "query",
                            "pattern": "^[A-Fa-f\\d]{24}$",
                            "description": "Filter deployments to the given Workflow ID",
                            "example": "575ed18f7ae143cd83dc4aa6"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of edge deployments",
                            "schema": {
                                "$ref": "#/definitions/edgeDeployments"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "release": {
                    "method": "POST",
                    "path": "/release",
                    "summary": "Deploy an edge workflow version to one or more edge devices. Version can be blank, if removal is desired.",
                    "auth": [
                        "edgeDeployments.release"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "deployment",
                            "description": "Deployment release information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/edgeDeploymentRelease"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "If deployment release has been initiated successfully",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "remove": {
                    "method": "POST",
                    "path": "/remove",
                    "summary": "Remove all edge deployments from a device, remove all edge deployments of a workflow, or remove a specific workflow from a specific device",
                    "auth": [
                        "edgeDeployments.remove"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "deployment",
                            "description": "Deployment removal information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/edgeDeploymentRemove"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "If deployment removal has been initiated successfully",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "replace": {
                    "method": "POST",
                    "path": "/replace",
                    "summary": "Replace deployments of an edge workflow version with a new version. New version can be blank, if removal is desired.",
                    "auth": [
                        "edgeDeployments.replace"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "deployment",
                            "description": "Deployment replacement information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/edgeDeploymentReplace"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "If deployment replacement has been initiated successfully",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "event": {
            "path": "/applications/{applicationId}/events/{eventId}",
            "auth": [
                "event.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "eventId",
                    "description": "ID associated with the event",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ed0de7ae143cd83dc4aa5"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on an event",
                    "auth": [
                        "event.get"
                    ],
                    "responses": {
                        "200": {
                            "description": "Event information",
                            "schema": {
                                "$ref": "#/definitions/event"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if event was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about an event",
                    "auth": [
                        "event.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "event",
                            "description": "Object containing new properties of the event",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/eventPatch"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated event information",
                            "schema": {
                                "$ref": "#/definitions/event"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if event is not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes an event",
                    "auth": [
                        "event.delete"
                    ],
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If event was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if event was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            },
            "links": {
                "application": {
                    "href": "/applications/{applicationId}"
                },
                "events": {
                    "href": "/applications/{applicationId}/events"
                }
            }
        },
        "events": {
            "path": "/applications/{applicationId}/events",
            "auth": [
                "events.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the events for an application",
                    "auth": [
                        "events.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "creationDate",
                            "enum": [
                                "subject",
                                "id",
                                "creationDate",
                                "lastUpdated",
                                "level",
                                "state",
                                "deviceId"
                            ],
                            "description": "Field to sort the results by",
                            "example": "subject"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "desc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the results by",
                            "example": "asc"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "Which page of results to return",
                            "example": 0
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "subject"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "subject"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "abnormal power to *"
                        },
                        {
                            "name": "state",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "new",
                                "acknowledged",
                                "resolved"
                            ],
                            "description": "If provided, return events only in the given state.",
                            "example": "new"
                        },
                        {
                            "name": "query",
                            "type": "object",
                            "description": "Event filter JSON object which overides the filterField, filter, and state parameters.",
                            "schema": {
                                "$ref": "#/definitions/advancedEventQuery"
                            },
                            "in": "query"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of events",
                            "schema": {
                                "$ref": "#/definitions/events"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create a new event for an application",
                    "auth": [
                        "events.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "event",
                            "description": "New event information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/eventPost"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created event",
                            "schema": {
                                "$ref": "#/definitions/event"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "429": {
                            "description": "Error if event creation rate limit exceeded",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Asynchronously updates information for matching events by subject and/or current state",
                    "auth": [
                        "events.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "subject"
                            ],
                            "description": "Field to filter the events to act on by. Blank or not provided means no filtering.",
                            "example": "subject"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "abnormal power to *"
                        },
                        {
                            "name": "state",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "new",
                                "acknowledged",
                                "resolved"
                            ],
                            "description": "If provided, act on events only in the given state.",
                            "example": "new"
                        },
                        {
                            "name": "query",
                            "description": "Event filter JSON object which overides the filterField, filter, and state parameters.",
                            "type": "object",
                            "schema": {
                                "$ref": "#/definitions/advancedEventQuery"
                            },
                            "in": "query"
                        },
                        {
                            "name": "updates",
                            "description": "Object containing updated information for the events",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/eventPatch"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "If the bulk update has been successfully started",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application is not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "POST",
                    "path": "/delete",
                    "summary": "Delete events",
                    "auth": [
                        "events.delete"
                    ],
                    "params": [
                        {
                            "name": "query",
                            "in": "body",
                            "description": "Query to apply to filter the events",
                            "schema": {
                                "$ref": "#/definitions/advancedEventQuery"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "If request successfully deletes a set of Events",
                            "schema": {
                                "$ref": "#/definitions/eventsDeleted"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if events were not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "mostRecentBySeverity": {
                    "method": "GET",
                    "path": "/mostRecentBySeverity",
                    "summary": "Returns the first new event ordered by severity and then creation",
                    "auth": [
                        "events.mostRecentBySeverity"
                    ],
                    "params": [
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against event subjects. Supports globbing. Blank or not provided means no filtering.",
                            "example": "abnormal power to *"
                        },
                        {
                            "name": "query",
                            "description": "Event filter JSON object which overides the filter parameter.",
                            "type": "object",
                            "schema": {
                                "$ref": "#/definitions/advancedEventQuery"
                            },
                            "in": "query"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The event, plus count of currently new events",
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "event": {
                                        "$ref": "#/definitions/event"
                                    },
                                    "newCount": {
                                        "type": "number"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "export": {
                    "method": "POST",
                    "path": "/export",
                    "summary": "Request an export of an application's event data",
                    "auth": [
                        "events.export"
                    ],
                    "params": [
                        {
                            "name": "exportData",
                            "type": "object",
                            "in": "body",
                            "description": "Export options for events",
                            "schema": {
                                "$ref": "#/definitions/eventsExport"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "If generation of export was successfully started",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            },
            "links": {
                "application": {
                    "href": "/applications/{applicationId}"
                }
            }
        },
        "experienceDomain": {
            "path": "/applications/{applicationId}/experience/domains/{experienceDomainId}",
            "auth": [
                "experienceDomain.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "experienceDomainId",
                    "description": "ID associated with the experience domain",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ed78e7ae143cd83dc4aab"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on an experience domain",
                    "auth": [
                        "experienceDomain.get"
                    ],
                    "responses": {
                        "200": {
                            "description": "Experience domain information",
                            "schema": {
                                "$ref": "#/definitions/experienceDomain"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if experience domain was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about an experience domain",
                    "auth": [
                        "experienceDomain.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "experienceDomain",
                            "description": "Object containing new properties of the experience domain",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/experienceDomainPatch"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated experience domain information",
                            "schema": {
                                "$ref": "#/definitions/experienceDomain"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if experience domain was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes an experience domain",
                    "auth": [
                        "experienceDomain.delete"
                    ],
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If experience domain was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if experience domain was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "experienceDomains": {
            "path": "/applications/{applicationId}/experience/domains",
            "auth": [
                "experienceDomains.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the experience domains for an application",
                    "auth": [
                        "experienceDomains.get"
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of experience domains",
                            "schema": {
                                "$ref": "#/definitions/experienceDomains"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create a new experience domain for an application",
                    "auth": [
                        "experienceDomains.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "experienceDomain",
                            "description": "New experience domain information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/experienceDomainPost"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created experience domain",
                            "schema": {
                                "$ref": "#/definitions/experienceDomain"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "experienceEndpoint": {
            "path": "/applications/{applicationId}/experience/endpoints/{experienceEndpointId}",
            "auth": [
                "experienceEndpoint.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "experienceEndpointId",
                    "description": "ID associated with the experience endpoint",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ed78e7ae143cd83dc4aab"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on an experience endpoint",
                    "auth": [
                        "experienceEndpoint.get"
                    ],
                    "params": [
                        {
                            "name": "version",
                            "type": "string",
                            "description": "Version of this experience endpoint to return",
                            "in": "query",
                            "example": "develop",
                            "default": "develop"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Experience endpoint information",
                            "schema": {
                                "$ref": "#/definitions/experienceEndpoint"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if experience endpoint was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "linkedResources": {
                    "method": "GET",
                    "path": "/linkedResources",
                    "summary": "Retrieves information on resources linked to an experience endpoint",
                    "auth": [
                        "experienceEndpoint.linkedResources"
                    ],
                    "params": [
                        {
                            "name": "version",
                            "type": "string",
                            "description": "Version of this experience endpoint to query",
                            "in": "query",
                            "example": "develop",
                            "default": "develop"
                        },
                        {
                            "name": "includeCustomNodes",
                            "description": "If the result of the request should also include the details of any custom nodes referenced by returned workflows",
                            "type": "string",
                            "example": true,
                            "default": false,
                            "in": "query"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Linked resource information",
                            "schema": {
                                "$ref": "#/definitions/experienceLinkedResources"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if experience endpoint was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about an experience endpoint",
                    "auth": [
                        "experienceEndpoint.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "experienceEndpoint",
                            "description": "Object containing new properties of the experience endpoint",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/experienceEndpointPatch"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated experience endpoint information",
                            "schema": {
                                "$ref": "#/definitions/experienceEndpoint"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if experience endpoint was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes an experience endpoint",
                    "auth": [
                        "experienceEndpoint.delete"
                    ],
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If experience endpoint was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if experience endpoint was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "experienceEndpoints": {
            "path": "/applications/{applicationId}/experience/endpoints",
            "auth": [
                "experienceEndpoints.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the experience endpoints for an application",
                    "auth": [
                        "experienceEndpoints.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "order",
                            "enum": [
                                "order",
                                "method",
                                "route",
                                "id",
                                "creationDate",
                                "requestCount",
                                "lastUpdated"
                            ],
                            "description": "Field to sort the results by",
                            "example": "order"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the results by",
                            "example": "asc"
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "method",
                                "route"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "method"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "my*route"
                        },
                        {
                            "name": "experienceGroupId",
                            "type": "string",
                            "in": "query",
                            "pattern": "^[A-Fa-f\\d]{24}$",
                            "example": "575ec8687ae143cd83dc4a97",
                            "description": "Filter endpoints to those only in the specified group"
                        },
                        {
                            "name": "requestCountDuration",
                            "type": "string",
                            "in": "query",
                            "description": "If set, a count of recent requests is included on each endpoint for the duration requested (milliseconds)",
                            "example": 86400000
                        },
                        {
                            "name": "version",
                            "type": "string",
                            "description": "Return the experience endpoints belonging to this version",
                            "in": "query",
                            "example": "develop",
                            "default": "develop"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of experience endpoints",
                            "schema": {
                                "$ref": "#/definitions/experienceEndpoints"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create a new experience endpoint for an application",
                    "auth": [
                        "experienceEndpoints.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "experienceEndpoint",
                            "description": "New experience endpoint information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/experienceEndpointPost"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created experience endpoint",
                            "schema": {
                                "$ref": "#/definitions/experienceEndpoint"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "stats": {
                    "method": "GET",
                    "path": "/stats",
                    "summary": "Get statistics about endpoint requests",
                    "auth": [
                        "experienceEndpoints.stats"
                    ],
                    "params": [
                        {
                            "name": "statGrouping",
                            "type": "string",
                            "in": "query",
                            "default": "statusCode",
                            "enum": [
                                "statusCode",
                                "endpointId",
                                "version",
                                "domain"
                            ],
                            "description": "Field to group the statistics by",
                            "example": "statusCode"
                        },
                        {
                            "name": "duration",
                            "type": "string",
                            "in": "query",
                            "default": 86400000,
                            "description": "Duration in milliseconds",
                            "example": 86400000
                        },
                        {
                            "name": "resolution",
                            "type": "string",
                            "in": "query",
                            "default": 3600000,
                            "description": "Resolution in milliseconds",
                            "example": 3600000
                        },
                        {
                            "name": "versionFilter",
                            "type": "string",
                            "in": "query",
                            "description": "Filters the stats to a particular experience version",
                            "example": "myVersion"
                        },
                        {
                            "name": "domainFilter",
                            "type": "string",
                            "in": "query",
                            "description": "Filters the stats to a particular experience domain or slug",
                            "example": "mycustomdomain.com"
                        },
                        {
                            "name": "statusCodeFilter",
                            "type": "string",
                            "in": "query",
                            "description": "Filters the stats to a particular status code",
                            "example": 200
                        },
                        {
                            "name": "endpointIdFilter",
                            "type": "string",
                            "in": "query",
                            "description": "Filters the stats to a particular endpoint",
                            "example": "575ec8687ae143cd83dc4a98"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Statistics for endpoint requests",
                            "schema": {
                                "$ref": "#/definitions/experienceEndpointStats"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "experienceGroup": {
            "path": "/applications/{applicationId}/experience/groups/{experienceGroupId}",
            "auth": [
                "experienceGroup.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "experienceGroupId",
                    "description": "ID associated with the experience group",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ed78e7ae143cd83dc4aab"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on an experience group",
                    "auth": [
                        "experienceGroup.get"
                    ],
                    "responses": {
                        "200": {
                            "description": "Experience group information",
                            "schema": {
                                "$ref": "#/definitions/experienceGroup"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if experience group was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about an experience group",
                    "auth": [
                        "experienceGroup.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "experienceGroup",
                            "description": "Object containing new properties of the experience group",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/experienceGroupPatch"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated experience group information",
                            "schema": {
                                "$ref": "#/definitions/experienceGroup"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if experience group was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes an experience group",
                    "auth": [
                        "experienceGroup.delete"
                    ],
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If experience group was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if experience group was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "experienceGroups": {
            "path": "/applications/{applicationId}/experience/groups",
            "auth": [
                "experienceGroups.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the experience groups for an application",
                    "auth": [
                        "experienceGroups.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "name",
                            "enum": [
                                "name",
                                "id",
                                "creationDate",
                                "lastUpdated"
                            ],
                            "description": "Field to sort the results by",
                            "example": "name"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the results by",
                            "example": "asc"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "Which page of results to return",
                            "example": 0
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "name"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "name"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "my*group"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of experience groups",
                            "schema": {
                                "$ref": "#/definitions/experienceGroups"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create a new experience group for an application",
                    "auth": [
                        "experienceGroups.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "experienceGroup",
                            "description": "New experience group information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/experienceGroupPost"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created experience group",
                            "schema": {
                                "$ref": "#/definitions/experienceGroup"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "experienceSlug": {
            "path": "/applications/{applicationId}/experience/slugs/{experienceSlugId}",
            "auth": [
                "experienceSlug.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "experienceSlugId",
                    "description": "ID associated with the experience slug",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ed78e7ae143cd83dc4aab"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on an experience slug",
                    "auth": [
                        "experienceSlug.get"
                    ],
                    "responses": {
                        "200": {
                            "description": "Experience slug information",
                            "schema": {
                                "$ref": "#/definitions/experienceSlug"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if experience slug was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about an experience slug",
                    "auth": [
                        "experienceSlug.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "experienceSlug",
                            "description": "Object containing new properties of the experience slug",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/experienceSlugPatch"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated experience slug information",
                            "schema": {
                                "$ref": "#/definitions/experienceSlug"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if experience slug was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes an experience slug",
                    "auth": [
                        "experienceSlug.delete"
                    ],
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If experience slug was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if experience slug was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "experienceSlugs": {
            "path": "/applications/{applicationId}/experience/slugs",
            "auth": [
                "experienceSlugs.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the experience slugs for an application",
                    "auth": [
                        "experienceSlugs.get"
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of experience slugs",
                            "schema": {
                                "$ref": "#/definitions/experienceSlugs"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create a new experience slug for an application",
                    "auth": [
                        "experienceSlugs.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "experienceSlug",
                            "description": "New experience slug information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/experienceSlugPost"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created experience slug",
                            "schema": {
                                "$ref": "#/definitions/experienceSlug"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "experienceUser": {
            "path": "/applications/{applicationId}/experience/users/{experienceUserId}",
            "auth": [
                "experienceUser.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "experienceUserId",
                    "description": "ID associated with the experience user",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ed78e7ae143cd83dc4aab"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on an experience user",
                    "auth": [
                        "experienceUser.get"
                    ],
                    "responses": {
                        "200": {
                            "description": "Experience user information",
                            "schema": {
                                "$ref": "#/definitions/experienceUser"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if experience user was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about an experience user",
                    "auth": [
                        "experienceUser.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "experienceUser",
                            "description": "Object containing new properties of the experience user",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/experienceUserPatch"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated experience user information",
                            "schema": {
                                "$ref": "#/definitions/experienceUser"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if experience user was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes an experience user",
                    "auth": [
                        "experienceUser.delete"
                    ],
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If experience user was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if experience user was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "experienceUsers": {
            "path": "/applications/{applicationId}/experience/users",
            "auth": [
                "experienceUsers.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the experience users for an application",
                    "auth": [
                        "experienceUsers.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "email",
                            "enum": [
                                "firstName",
                                "lastName",
                                "email",
                                "id",
                                "creationDate",
                                "lastLogin",
                                "lastUpdated"
                            ],
                            "description": "Field to sort the results by",
                            "example": "email"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the results by",
                            "example": "asc"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "Which page of results to return",
                            "example": 0
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "firstName",
                                "lastName",
                                "email"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "email"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "my*user"
                        },
                        {
                            "name": "experienceGroupId",
                            "type": "string",
                            "in": "query",
                            "example": "575ec8687ae143cd83dc4a97",
                            "description": "Filter users to those only in the specified group, special experienceGroupIds of 'any' which will give users who are in at least one group and 'none' will give you users who are not in any groups."
                        },
                        {
                            "name": "includeAncestorGroups",
                            "type": "string",
                            "in": "query",
                            "example": "true",
                            "description": "If set will include members from ancestors of the specified experienceGroupId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of experience users",
                            "schema": {
                                "$ref": "#/definitions/experienceUsers"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create a new experience user for an application",
                    "auth": [
                        "experienceUsers.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "experienceUser",
                            "description": "New experience user information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/experienceUserPost"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created experience user",
                            "schema": {
                                "$ref": "#/definitions/experienceUser"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "experienceVersion": {
            "path": "/applications/{applicationId}/experience/versions/{experienceVersionIdOrName}",
            "auth": [
                "experienceVersion.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "experienceVersionIdOrName",
                    "description": "Version ID or version name associated with the experience version",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "minLength": 1,
                    "maxLength": 255,
                    "example": "575ed78e7ae143cd83dc4aab"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on an experience version",
                    "auth": [
                        "experienceVersion.get"
                    ],
                    "responses": {
                        "200": {
                            "description": "Experience version information",
                            "schema": {
                                "$ref": "#/definitions/experienceVersion"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if experience version was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about an experience version",
                    "auth": [
                        "experienceVersion.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "experienceVersion",
                            "description": "Object containing new properties of the experience version",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/experienceVersionPatch"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated experience version information",
                            "schema": {
                                "$ref": "#/definitions/experienceVersion"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if experience version was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes an experience version",
                    "auth": [
                        "experienceVersion.delete"
                    ],
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If experience version was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if experience version was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "experienceVersions": {
            "path": "/applications/{applicationId}/experience/versions",
            "auth": [
                "experienceVersions.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the experience versions for an application",
                    "auth": [
                        "experienceVersions.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "version",
                            "enum": [
                                "version",
                                "id",
                                "creationDate",
                                "lastUpdated"
                            ],
                            "description": "Field to sort the results by",
                            "example": "version"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the results by",
                            "example": "asc"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "Which page of results to return",
                            "example": 0
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "version"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "email"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "my*version"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of experience versions",
                            "schema": {
                                "$ref": "#/definitions/experienceVersions"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create a new experience version for an application",
                    "auth": [
                        "experienceVersions.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "experienceVersion",
                            "description": "New experience version information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/experienceVersionPost"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created experience version",
                            "schema": {
                                "$ref": "#/definitions/experienceVersion"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "experienceView": {
            "path": "/applications/{applicationId}/experience/views/{experienceViewId}",
            "auth": [
                "experienceView.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "experienceViewId",
                    "description": "ID associated with the experience view",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ed78e7ae143cd83dc4aab"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on an experience view",
                    "auth": [
                        "experienceView.get"
                    ],
                    "params": [
                        {
                            "name": "version",
                            "type": "string",
                            "description": "Version of this experience view to return",
                            "in": "query",
                            "example": "develop",
                            "default": "develop"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Experience view information",
                            "schema": {
                                "$ref": "#/definitions/experienceView"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if experience view was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "linkedResources": {
                    "method": "GET",
                    "path": "/linkedResources",
                    "summary": "Retrieves information on resources linked to an experience view",
                    "auth": [
                        "experienceView.linkedResources"
                    ],
                    "params": [
                        {
                            "name": "version",
                            "type": "string",
                            "description": "Version of this experience view to query",
                            "in": "query",
                            "example": "develop",
                            "default": "develop"
                        },
                        {
                            "name": "includeCustomNodes",
                            "description": "If the result of the request should also include the details of any custom nodes referenced by returned workflows",
                            "type": "string",
                            "example": true,
                            "default": false,
                            "in": "query"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Linked resource information",
                            "schema": {
                                "$ref": "#/definitions/experienceLinkedResources"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if experience view was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about an experience view",
                    "auth": [
                        "experienceView.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "experienceView",
                            "description": "Object containing new properties of the experience view",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/experienceViewPatch"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated experience view information",
                            "schema": {
                                "$ref": "#/definitions/experienceView"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if experience view was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes an experience view",
                    "auth": [
                        "experienceView.delete"
                    ],
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If experience view was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if experience view was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "experienceViews": {
            "path": "/applications/{applicationId}/experience/views",
            "auth": [
                "experienceViews.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the experience views for an application",
                    "auth": [
                        "experienceViews.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "name",
                            "enum": [
                                "id",
                                "creationDate",
                                "name",
                                "lastUpdated"
                            ],
                            "description": "Field to sort the results by",
                            "example": "name"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the results by",
                            "example": "asc"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "Which page of results to return",
                            "example": 0
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "name"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "name"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "my*view"
                        },
                        {
                            "name": "viewType",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "page",
                                "layout",
                                "component"
                            ],
                            "example": "page",
                            "description": "Filter views to those only of the given type"
                        },
                        {
                            "name": "version",
                            "type": "string",
                            "description": "Return the experience views belonging to this version",
                            "in": "query",
                            "example": "develop",
                            "default": "develop"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of experience views",
                            "schema": {
                                "$ref": "#/definitions/experienceViews"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create a new experience view for an application",
                    "auth": [
                        "experienceViews.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "experienceView",
                            "description": "New experience view information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/experienceViewPost"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created experience view",
                            "schema": {
                                "$ref": "#/definitions/experienceView"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "experience": {
            "path": "/applications/{applicationId}/experience",
            "auth": [
                "experience.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "bootstrap": {
                    "path": "/bootstrap",
                    "method": "PATCH",
                    "summary": "Bootstraps the experience for this application with standard endpoints and views",
                    "auth": [
                        "experience.bootstrap"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "options",
                            "description": "Bootstrap options",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/experienceBootstrapOptions"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "If bootstrap was successful",
                            "schema": {
                                "$ref": "#/definitions/experienceBootstrapResult"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes multiple parts of an experience including users, groups, slugs, domains, versions, endpoints, views, and workflows",
                    "auth": [
                        "experience.delete"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "keepUsers",
                            "description": "If this is set, Experience Users will not be removed.",
                            "type": "string",
                            "in": "query",
                            "example": "true"
                        },
                        {
                            "name": "keepGroups",
                            "description": "If this is set, Experience Groups will not be removed.",
                            "type": "string",
                            "in": "query",
                            "example": "true"
                        },
                        {
                            "name": "keepSlugs",
                            "description": "If this is set, Experience Slugs will not be removed.",
                            "type": "string",
                            "in": "query",
                            "example": "true"
                        },
                        {
                            "name": "keepDomains",
                            "description": "If this is set, Experience Domains will not be removed.",
                            "type": "string",
                            "in": "query",
                            "example": "true"
                        },
                        {
                            "name": "removeVersions",
                            "description": "If this is set, all Experience Versions and their contents will be removed (except for develop).",
                            "type": "string",
                            "in": "query",
                            "example": "true"
                        },
                        {
                            "name": "keepViews",
                            "description": "If this is set, Experience Views (in the develop version) will not be removed.",
                            "type": "string",
                            "in": "query",
                            "example": "true"
                        },
                        {
                            "name": "keepEndpoints",
                            "description": "If this is set, Experience Endpoints (in the develop version) will not be removed.",
                            "type": "string",
                            "in": "query",
                            "example": "true"
                        },
                        {
                            "name": "removeWorkflows",
                            "description": "If this is set, all Experience Workflows (in the develop version) will ve removed.",
                            "type": "string",
                            "in": "query",
                            "example": "true"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "If deletion was successful",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "file": {
            "path": "/applications/{applicationId}/file/{fileId}",
            "auth": [
                "file.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "fileId",
                    "description": "ID associated with the file",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec76c7ae143cd83dc4a96"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on a file",
                    "auth": [
                        "file.get"
                    ],
                    "responses": {
                        "200": {
                            "description": "file information",
                            "schema": {
                                "$ref": "#/definitions/file"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if file was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Reupload a file",
                    "auth": [
                        "file.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "updates",
                            "description": "Reupload a file",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/filePatch"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully updated file and returned a post url to respond with",
                            "schema": {
                                "$ref": "#/definitions/fileUploadPostResponse"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "move": {
                    "method": "POST",
                    "path": "/move",
                    "auth": [
                        "file.move"
                    ],
                    "summary": "Move a file or the entire contents of a directory",
                    "audit": true,
                    "params": [
                        {
                            "name": "name",
                            "description": "The new name of the file or directory",
                            "in": "query",
                            "example": "fileA"
                        },
                        {
                            "name": "parentDirectory",
                            "description": "The new parent directory for the file or directory to move into.",
                            "in": "query",
                            "example": "/new/location/here"
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Returns a new file or directory that was created by the move, if a directory a job will kick off to move all the directories children.",
                            "schema": {
                                "$ref": "#/definitions/file"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "auth": [
                        "file.delete"
                    ],
                    "summary": "Deletes a file or directory, if directory all the contents that directory will also be removed.",
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If file was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if event was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "upload": {
                    "path": "/upload",
                    "method": "POST",
                    "summary": "Uploads the file",
                    "auth": [
                        "file.upload"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "file",
                            "description": "The content of the file to upload",
                            "in": "multipart",
                            "required": true,
                            "type": "file"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated file content",
                            "schema": {
                                "$ref": "#/definitions/file"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            },
            "links": {
                "application": {
                    "href": "/applications/{applicationId}"
                },
                "files": {
                    "href": "/applications/{applicationId}/files"
                }
            }
        },
        "files": {
            "path": "/applications/{applicationId}/files",
            "auth": [
                "files.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the files for an application",
                    "auth": [
                        "files.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "lastUpdated",
                            "enum": [
                                "lastUpdated",
                                "type",
                                "name",
                                "creationDate"
                            ],
                            "description": "Field to sort the results by",
                            "example": "subject"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the results by",
                            "example": "asc"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "Which page of results to return",
                            "example": 0
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "name"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "name"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "myFile"
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "in": "query",
                            "description": "Limit by the type (file or directory) of the file",
                            "example": "file"
                        },
                        {
                            "name": "status",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "completed",
                                "pending"
                            ],
                            "description": "Limit the result to only files of this status",
                            "example": "completed"
                        },
                        {
                            "name": "directory",
                            "type": "string",
                            "in": "query",
                            "description": "Get files that are inside of this directory",
                            "example": "/a/path/"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of files",
                            "schema": {
                                "$ref": "#/definitions/files"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create a new file for an application",
                    "auth": [
                        "files.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "file",
                            "description": "New file information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/filePost"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created file and returned a post url to respond with",
                            "schema": {
                                "$ref": "#/definitions/fileUploadPostResponse"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            },
            "links": {
                "application": {
                    "href": "/applications/{applicationId}"
                }
            }
        },
        "flowVersion": {
            "path": "/applications/{applicationId}/flows/{flowId}/versions/{flowVersionId}",
            "auth": [
                "flowVersion.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "flowId",
                    "description": "ID associated with the flow",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ed18f7ae143cd83dc4aa6"
                },
                {
                    "name": "flowVersionId",
                    "description": "Version ID or version name associated with the flow version",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "minLength": 1,
                    "maxLength": 255,
                    "example": "675ed18f7ae143cd83dc4bb7"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on a flow version",
                    "auth": [
                        "flowVersion.get"
                    ],
                    "params": [
                        {
                            "name": "includeCustomNodes",
                            "description": "If the result of the request should also include the details of any custom nodes referenced by the returned workflows",
                            "type": "string",
                            "example": true,
                            "default": false,
                            "in": "query"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Flow version information",
                            "schema": {
                                "$ref": "#/definitions/flowVersion"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if flow version was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about a flow version",
                    "auth": [
                        "flowVersion.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "includeCustomNodes",
                            "description": "If the result of the request should also include the details of any custom nodes referenced by the returned workflows",
                            "type": "string",
                            "example": true,
                            "default": false,
                            "in": "query"
                        },
                        {
                            "name": "flowVersion",
                            "description": "Object containing new properties of the flow version",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/flowVersionPatch"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated flow version information",
                            "schema": {
                                "$ref": "#/definitions/flowVersion"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if flow version was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes a flow version",
                    "auth": [
                        "flowVersion.delete"
                    ],
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If flow version was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if flow version was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "getLogEntries": {
                    "path": "/logs",
                    "method": "GET",
                    "summary": "Retrieve the recent log entries about runs of this workflow version",
                    "auth": [
                        "flowVersion.log"
                    ],
                    "params": [
                        {
                            "name": "limit",
                            "type": "string",
                            "in": "query",
                            "default": 1,
                            "description": "Max log entries to return (ordered by time descending)",
                            "example": 10
                        },
                        {
                            "name": "since",
                            "type": "string",
                            "in": "query",
                            "description": "Look for log entries since this time (ms since epoch)",
                            "example": 1465790400000
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Recent log entries",
                            "schema": {
                                "$ref": "#/definitions/flowLog"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if device was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "flowVersions": {
            "path": "/applications/{applicationId}/flows/{flowId}/versions",
            "auth": [
                "flowVersions.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "flowId",
                    "description": "ID associated with the flow",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ed18f7ae143cd83dc4aa6"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the flow versions for a flow",
                    "auth": [
                        "flowVersions.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "version",
                            "enum": [
                                "version",
                                "id",
                                "creationDate",
                                "lastUpdated"
                            ],
                            "description": "Field to sort the results by",
                            "example": "version"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the results by",
                            "example": "asc"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "Which page of results to return",
                            "example": 0
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "version"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "version"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "my*version"
                        },
                        {
                            "name": "includeCustomNodes",
                            "description": "If the result of the request should also include the details of any custom nodes referenced by the returned workflows",
                            "type": "string",
                            "example": true,
                            "default": false,
                            "in": "query"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of flow versions",
                            "schema": {
                                "$ref": "#/definitions/flowVersions"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if flow was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create or replace a flow version for a flow",
                    "auth": [
                        "flowVersions.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "flowVersion",
                            "description": "New flow version information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/flowVersionPost"
                            }
                        },
                        {
                            "name": "includeCustomNodes",
                            "description": "If the result of the request should also include the details of any custom nodes referenced by the returned workflows",
                            "type": "string",
                            "example": true,
                            "default": false,
                            "in": "query"
                        },
                        {
                            "name": "allowReplacement",
                            "description": "Allow replacement of an existing flow version with same version name",
                            "in": "query",
                            "type": "string",
                            "example": true,
                            "default": false
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created flow version",
                            "schema": {
                                "$ref": "#/definitions/flowVersion"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if flow was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "flow": {
            "path": "/applications/{applicationId}/flows/{flowId}",
            "auth": [
                "flow.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "flowId",
                    "description": "ID associated with the flow",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ed18f7ae143cd83dc4aa6"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on a flow",
                    "auth": [
                        "flow.get"
                    ],
                    "params": [
                        {
                            "name": "includeCustomNodes",
                            "description": "If the result of the request should also include the details of any custom nodes referenced by the returned workflows",
                            "type": "string",
                            "example": true,
                            "default": false,
                            "in": "query"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Flow information",
                            "schema": {
                                "$ref": "#/definitions/flow"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if flow was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about a flow",
                    "auth": [
                        "flow.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "includeCustomNodes",
                            "description": "If the result of the request should also include the details of any custom nodes referenced by the returned workflows",
                            "type": "string",
                            "example": true,
                            "default": false,
                            "in": "query"
                        },
                        {
                            "name": "flow",
                            "description": "Object containing new properties of the flow",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/flowPatch"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated flow information",
                            "schema": {
                                "$ref": "#/definitions/flow"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if flow is not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes a flow",
                    "auth": [
                        "flow.delete"
                    ],
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If flow was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if flow was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "getLogEntries": {
                    "path": "/logs",
                    "method": "GET",
                    "summary": "Retrieve the recent log entries about runs of this workflow",
                    "auth": [
                        "flow.log"
                    ],
                    "params": [
                        {
                            "name": "limit",
                            "type": "string",
                            "in": "query",
                            "default": 1,
                            "description": "Max log entries to return (ordered by time descending)",
                            "example": 10
                        },
                        {
                            "name": "since",
                            "type": "string",
                            "in": "query",
                            "description": "Look for log entries since this time (ms since epoch)",
                            "example": 1465790400000
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Recent log entries",
                            "schema": {
                                "$ref": "#/definitions/flowLog"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if device was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "pressVirtualButton": {
                    "path": "/virtualButton",
                    "method": "POST",
                    "summary": "Presses the specified virtual button on the flow",
                    "auth": [
                        "flow.pressVirtualButton"
                    ],
                    "params": [
                        {
                            "name": "button",
                            "description": "Object containing button key and payload",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/virtualButtonPress"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Virtual button was pressed",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if flow was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "getStorageEntries": {
                    "path": "/storage",
                    "method": "GET",
                    "summary": "Gets the current values in persistent storage",
                    "auth": [
                        "flow.getStorageEntries"
                    ],
                    "responses": {
                        "200": {
                            "description": "The current storage entries",
                            "schema": {
                                "$ref": "#/definitions/flowStorageEntries"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if flow was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "setStorageEntry": {
                    "path": "/storage",
                    "method": "PATCH",
                    "summary": "Sets a storage value",
                    "auth": [
                        "flow.setStorageEntry"
                    ],
                    "params": [
                        {
                            "name": "entry",
                            "description": "Object containing storage entry",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/flowStorageEntry"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Value was successfully stored",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if flow was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "clearStorageEntries": {
                    "path": "/storage",
                    "method": "DELETE",
                    "summary": "Clear all storage entries",
                    "auth": [
                        "flow.clearStorageEntries"
                    ],
                    "responses": {
                        "200": {
                            "description": "The current storage entries",
                            "schema": {
                                "$ref": "#/definitions/flowStorageEntries"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if flow was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            },
            "links": {
                "application": {
                    "href": "/applications/{applicationId}"
                },
                "flows": {
                    "href": "/applications/{applicationId}/flows"
                }
            }
        },
        "flows": {
            "path": "/applications/{applicationId}/flows",
            "auth": [
                "flows.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the flows for an application",
                    "auth": [
                        "flows.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "name",
                            "enum": [
                                "name",
                                "id",
                                "creationDate",
                                "lastUpdated"
                            ],
                            "description": "Field to sort the results by",
                            "example": "name"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the results by",
                            "example": "asc"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "Which page of results to return",
                            "example": 0
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "name"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "name"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "my*flow"
                        },
                        {
                            "name": "flowClass",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "edge",
                                "cloud",
                                "customNode",
                                "experience"
                            ],
                            "description": "Filter the workflows by the given flow class",
                            "example": "cloud",
                            "default": "cloud"
                        },
                        {
                            "name": "triggerFilter",
                            "description": "Array of triggers to filter by - always filters against default flow version.",
                            "schema": {
                                "$ref": "#/definitions/flowTriggerFilter"
                            },
                            "in": "query"
                        },
                        {
                            "name": "includeCustomNodes",
                            "description": "If the result of the request should also include the details of any custom nodes referenced by the returned workflows",
                            "type": "string",
                            "example": true,
                            "default": false,
                            "in": "query"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of flows",
                            "schema": {
                                "$ref": "#/definitions/flows"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "getByVersion": {
                    "method": "GET",
                    "path": "/version",
                    "summary": "Returns the flows by version for an application",
                    "auth": [
                        "flows.getByVersion"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "name",
                            "enum": [
                                "name",
                                "id",
                                "creationDate",
                                "lastUpdated"
                            ],
                            "description": "Field to sort the results by",
                            "example": "name"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the results by",
                            "example": "asc"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "Which page of results to return",
                            "example": 0
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "name"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "name"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "my*flow"
                        },
                        {
                            "name": "flowClass",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "edge",
                                "cloud",
                                "customNode",
                                "experience"
                            ],
                            "description": "Filter the workflows by the given flow class",
                            "example": "cloud",
                            "default": "cloud"
                        },
                        {
                            "name": "version",
                            "type": "string",
                            "in": "query",
                            "description": "Return the workflow versions for the given version.",
                            "example": "myVersion",
                            "required": true
                        },
                        {
                            "name": "triggerFilter",
                            "description": "Array of triggers to filter by - always filters against default flow version.",
                            "schema": {
                                "$ref": "#/definitions/flowTriggerFilter"
                            },
                            "in": "query"
                        },
                        {
                            "name": "includeCustomNodes",
                            "description": "If the result of the request should also include the details of any custom nodes referenced by the returned workflows",
                            "type": "string",
                            "example": true,
                            "default": false,
                            "in": "query"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of flow versions",
                            "schema": {
                                "$ref": "#/definitions/flowVersions"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create a new flow for an application",
                    "auth": [
                        "flows.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "flow",
                            "description": "New flow information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/flowPost"
                            }
                        },
                        {
                            "name": "includeCustomNodes",
                            "description": "If the result of the request should also include the details of any custom nodes referenced by the returned workflows",
                            "type": "string",
                            "example": true,
                            "default": false,
                            "in": "query"
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created flow",
                            "schema": {
                                "$ref": "#/definitions/flow"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "import": {
                    "path": "/import",
                    "method": "POST",
                    "summary": "Import a set of flows and flow versions",
                    "auth": [
                        "flows.import"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "importData",
                            "description": "New flow and flow version information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/flowsImportPost"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully imported workflows",
                            "schema": {
                                "$ref": "#/definitions/flowsImportResult"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            },
            "links": {
                "application": {
                    "href": "/applications/{applicationId}"
                }
            }
        },
        "integration": {
            "path": "/applications/{applicationId}/integrations/{integrationId}",
            "auth": [
                "integration.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "integrationId",
                    "description": "ID associated with the integration",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ed78e7ae143cd83dc4aab"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on an integration",
                    "auth": [
                        "integration.get"
                    ],
                    "responses": {
                        "200": {
                            "description": "integration information",
                            "schema": {
                                "$ref": "#/definitions/integration"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if integration was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about an integration",
                    "auth": [
                        "integration.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "integration",
                            "description": "Object containing new properties of the integration",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/integrationPatch"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated integration information",
                            "schema": {
                                "$ref": "#/definitions/integration"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if integration was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes an integration",
                    "auth": [
                        "integration.delete"
                    ],
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If integration was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if integration was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "integrations": {
            "path": "/applications/{applicationId}/integrations",
            "auth": [
                "integrations.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the integrations for an application",
                    "auth": [
                        "integrations.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "name",
                            "enum": [
                                "name",
                                "id",
                                "creationDate",
                                "integrationType",
                                "lastUpdated"
                            ],
                            "description": "Field to sort the results by",
                            "example": "name"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the results by",
                            "example": "asc"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "Which page of results to return",
                            "example": 0
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "name",
                                "integrationType"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "integrationType"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "my*integration"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of integrations",
                            "schema": {
                                "$ref": "#/definitions/integrations"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create a new integration for an application",
                    "auth": [
                        "integrations.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "integration",
                            "description": "New integration information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/integrationPost"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created integration",
                            "schema": {
                                "$ref": "#/definitions/integration"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "me": {
            "path": "/me",
            "auth": [
                "me.*"
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on the current user",
                    "auth": [
                        "me.get"
                    ],
                    "params": [
                        {
                            "name": "includeRecent",
                            "description": "Should the user include recent app/dashboard info",
                            "in": "query",
                            "example": true
                        },
                        {
                            "name": "summaryExclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to exclude from user summary",
                            "example": "payloadCount"
                        },
                        {
                            "name": "summaryInclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to include in user summary",
                            "example": "payloadCount"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Current user information",
                            "schema": {
                                "$ref": "#/definitions/me"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about the current user",
                    "auth": [
                        "me.patch"
                    ],
                    "params": [
                        {
                            "name": "user",
                            "description": "Object containing new user properties",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/mePatch"
                            }
                        },
                        {
                            "name": "summaryExclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to exclude from user summary",
                            "example": "payloadCount"
                        },
                        {
                            "name": "summaryInclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to include in user summary",
                            "example": "payloadCount"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated user information",
                            "schema": {
                                "$ref": "#/definitions/me"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "path": "/delete",
                    "method": "POST",
                    "summary": "Deletes the current user",
                    "auth": [
                        "me.delete"
                    ],
                    "params": [
                        {
                            "name": "credentials",
                            "description": "User authentication credentials",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/userCredentials"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "If the user was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "verifyEmail": {
                    "method": "POST",
                    "path": "/verify-email",
                    "summary": "Sends an email verification to the user",
                    "auth": [
                        "me.verifyEmail"
                    ],
                    "responses": {
                        "200": {
                            "description": "If email verification was successfully sent",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "changePassword": {
                    "path": "/changePassword",
                    "method": "PATCH",
                    "summary": "Changes the current user's password and optionally logs out all other sessions",
                    "auth": [
                        "me.changePassword"
                    ],
                    "params": [
                        {
                            "name": "data",
                            "description": "Object containing the password change info",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/changePassword"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "A new, valid, auth token (potentially all previous tokens are now invalid)",
                            "schema": {
                                "$ref": "#/definitions/authedUser"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "refreshToken": {
                    "path": "/refreshToken",
                    "method": "GET",
                    "description": "Returns a new auth token based on the current auth token",
                    "responses": {
                        "200": {
                            "description": "Successful token regeneration",
                            "schema": {
                                "$ref": "#/definitions/authedUser"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "401": {
                            "description": "Unauthorized error if authentication fails",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "enableTwoFactorAuth": {
                    "path": "/enableTwoFactorAuth",
                    "method": "PATCH",
                    "summary": "Enables two factor auth for the current user",
                    "auth": [
                        "me.enableTwoFactorAuth"
                    ],
                    "params": [
                        {
                            "name": "data",
                            "description": "Object containing two factor auth properties",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/enableTwoFactorAuth"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated user information",
                            "schema": {
                                "$ref": "#/definitions/me"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "disableTwoFactorAuth": {
                    "path": "/disableTwoFactorAuth",
                    "method": "PATCH",
                    "summary": "Disables two factor auth for the current user",
                    "auth": [
                        "me.disableTwoFactorAuth"
                    ],
                    "params": [
                        {
                            "name": "data",
                            "description": "Object containing two factor auth properties",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/disableTwoFactorAuth"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated user information",
                            "schema": {
                                "$ref": "#/definitions/me"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "disconnectGithub": {
                    "path": "/disconnectGithub",
                    "method": "PATCH",
                    "summary": "Disconnects the user from Github",
                    "auth": [
                        "me.disconnectGithub"
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated user information",
                            "schema": {
                                "$ref": "#/definitions/me"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "disconnectTwitter": {
                    "path": "/disconnectTwitter",
                    "method": "PATCH",
                    "summary": "Disconnects the user from Twitter",
                    "auth": [
                        "me.disconnectTwitter"
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated user information",
                            "schema": {
                                "$ref": "#/definitions/me"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "addRecentItem": {
                    "path": "/recentItems",
                    "method": "POST",
                    "summary": "Adds an item to a recent item list",
                    "auth": [
                        "me.addRecentItem"
                    ],
                    "params": [
                        {
                            "name": "data",
                            "description": "Object containing recent item info",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/recentItem"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated recent item list",
                            "schema": {
                                "$ref": "#/definitions/recentItemList"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "fetchRecentItems": {
                    "path": "/recentItems",
                    "method": "GET",
                    "summary": "Gets a recent item list",
                    "auth": [
                        "me.fetchRecentItems"
                    ],
                    "params": [
                        {
                            "name": "parentId",
                            "type": "string",
                            "pattern": "^[A-Fa-f\\d]{24}$",
                            "in": "query",
                            "description": "Parent id of the recent list",
                            "example": "575ec8687ae143cd83dc4a97"
                        },
                        {
                            "name": "itemType",
                            "in": "query",
                            "required": true,
                            "enum": [
                                "application",
                                "device",
                                "flow",
                                "dashboard",
                                "organization"
                            ],
                            "description": "Item type to get the recent list of",
                            "example": "application"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Recent item list",
                            "schema": {
                                "$ref": "#/definitions/recentItemList"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "payloadCounts": {
                    "path": "/payloadCounts",
                    "method": "GET",
                    "summary": "Returns payload counts for the time range specified for all applications the current user owns",
                    "auth": [
                        "me.payloadCounts"
                    ],
                    "params": [
                        {
                            "name": "start",
                            "type": "string",
                            "in": "query",
                            "description": "Start of range for payload count query (ms since epoch)",
                            "example": 0
                        },
                        {
                            "name": "end",
                            "type": "string",
                            "in": "query",
                            "description": "End of range for payload count query (ms since epoch)",
                            "example": 1465790400000
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Payload counts, by type and source",
                            "schema": {
                                "$ref": "#/definitions/payloadCounts"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "transferResources": {
                    "method": "PATCH",
                    "path": "/transferResources",
                    "summary": "Moves resources to a new owner",
                    "auth": [
                        "me.transferResources"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "transfer",
                            "description": "Object containing properties of the transfer",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/resourceTransfer"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "If resource transfer was successful",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            },
            "links": {
                "orgs": {
                    "href": "/orgs"
                },
                "applications": {
                    "href": "/applications"
                },
                "dashboards": {
                    "href": "/dashboards"
                }
            }
        },
        "notebook": {
            "path": "/applications/{applicationId}/notebooks/{notebookId}",
            "auth": [
                "notebook.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "notebookId",
                    "description": "ID associated with the notebook",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ed78e7ae143cd83dc4aab"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on a notebook",
                    "auth": [
                        "notebook.get"
                    ],
                    "responses": {
                        "200": {
                            "description": "notebook information",
                            "schema": {
                                "$ref": "#/definitions/notebook"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if notebook was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "logs": {
                    "method": "GET",
                    "path": "/logs",
                    "summary": "Retrieves information on notebook executions",
                    "auth": [
                        "notebook.logs"
                    ],
                    "params": [
                        {
                            "name": "limit",
                            "type": "string",
                            "in": "query",
                            "default": 1,
                            "description": "Max log entries to return (ordered by time descending)",
                            "example": 10
                        },
                        {
                            "name": "since",
                            "type": "string",
                            "in": "query",
                            "description": "Look for log entries since this time (ms since epoch)",
                            "example": 1465790400000
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "notebook execution information",
                            "schema": {
                                "$ref": "#/definitions/notebookExecutionLogs"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if notebook was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about a notebook",
                    "auth": [
                        "notebook.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "notebook",
                            "description": "Object containing new properties of the notebook",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/notebookPatch"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated notebook information",
                            "schema": {
                                "$ref": "#/definitions/notebook"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if notebook was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes a notebook",
                    "auth": [
                        "notebook.delete"
                    ],
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If notebook was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if notebook was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "upload": {
                    "path": "/upload",
                    "method": "POST",
                    "summary": "Uploads the jupyter notebook file",
                    "auth": [
                        "notebook.upload"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "jupyterFile",
                            "description": "The jupyter notebook file",
                            "in": "multipart",
                            "required": true,
                            "type": "file"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated notebook information",
                            "schema": {
                                "$ref": "#/definitions/notebook"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if notebook was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "requestInputDataExport": {
                    "path": "/requestInputDataExport",
                    "method": "POST",
                    "summary": "Requests a combined zip file of the potential input data for a notebook execution",
                    "auth": [
                        "notebook.requestInputDataExport"
                    ],
                    "params": [
                        {
                            "name": "exportOptions",
                            "description": "The options for the export",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/notebookDataExportOptions"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "If export request was accepted and successfully queued",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if notebook was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "execute": {
                    "path": "/execute",
                    "method": "POST",
                    "summary": "Triggers the execution of a notebook",
                    "auth": [
                        "notebook.execute"
                    ],
                    "params": [
                        {
                            "name": "executionOptions",
                            "description": "The options for the execution",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/notebookExecutionOptions"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "If execution request was accepted and successfully queued",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if notebook was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "notebooks": {
            "path": "/applications/{applicationId}/notebooks",
            "auth": [
                "notebooks.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the notebooks for an application",
                    "auth": [
                        "notebooks.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "name",
                            "enum": [
                                "name",
                                "id",
                                "creationDate",
                                "lastUpdated"
                            ],
                            "description": "Field to sort the results by",
                            "example": "name"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the results by",
                            "example": "asc"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "Which page of results to return",
                            "example": 0
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "name"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "name"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "my*notebook"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of notebooks",
                            "schema": {
                                "$ref": "#/definitions/notebooks"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create a new notebook for an application",
                    "auth": [
                        "notebooks.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "notebook",
                            "description": "New notebook information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/notebookPost"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created notebook",
                            "schema": {
                                "$ref": "#/definitions/notebook"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "orgInvites": {
            "path": "/invites",
            "actions": {
                "get": {
                    "method": "GET",
                    "description": "Gets information about an invite",
                    "params": [
                        {
                            "name": "token",
                            "type": "string",
                            "in": "query",
                            "required": true,
                            "description": "The token associated with the invite",
                            "example": "aTokenString"
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "in": "query",
                            "required": true,
                            "description": "The email associated with the invite",
                            "example": "example@example.com"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Information about invite",
                            "schema": {
                                "$ref": "#/definitions/orgInviteInfo"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if invite not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "410": {
                            "description": "Error if invite has expired",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "description": "Accepts/Rejects an invite",
                    "audit": true,
                    "params": [
                        {
                            "name": "invite",
                            "description": "Invite info and acceptance",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/orgInviteAction"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Acceptance/Rejection of invite",
                            "schema": {
                                "$ref": "#/definitions/orgInviteResult"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if invite not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "410": {
                            "description": "Error if invite has expired",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "org": {
            "path": "/orgs/{orgId}",
            "auth": [
                "org.*"
            ],
            "params": [
                {
                    "name": "orgId",
                    "description": "ID associated with the organization",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ed6e87ae143cd83dc4aa8"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on an organization",
                    "auth": [
                        "org.get"
                    ],
                    "params": [
                        {
                            "name": "summaryExclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to exclude from org summary",
                            "example": "payloadCount"
                        },
                        {
                            "name": "summaryInclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to include in org summary",
                            "example": "payloadCount"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Organization information",
                            "schema": {
                                "$ref": "#/definitions/org"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if organization not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about an organization",
                    "auth": [
                        "org.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "organization",
                            "description": "Object containing new organization properties",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/orgPatch"
                            }
                        },
                        {
                            "name": "summaryExclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to exclude from org summary",
                            "example": "payloadCount"
                        },
                        {
                            "name": "summaryInclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to include in org summary",
                            "example": "payloadCount"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated organization information",
                            "schema": {
                                "$ref": "#/definitions/org"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if organization was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes an organization",
                    "auth": [
                        "org.delete"
                    ],
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If organization was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if organization was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "pendingInvites": {
                    "path": "/invites",
                    "method": "GET",
                    "summary": "Gets the current pending invites",
                    "auth": [
                        "org.pendingInvites"
                    ],
                    "responses": {
                        "200": {
                            "description": "Invitation information",
                            "schema": {
                                "$ref": "#/definitions/orgInvites"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if organization not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "inviteMember": {
                    "path": "/invites",
                    "method": "POST",
                    "summary": "Invites a person to an organization",
                    "auth": [
                        "org.inviteMember"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "invite",
                            "description": "Object containing new invite info",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/orgInvitePost"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Invitation information",
                            "schema": {
                                "$ref": "#/definitions/orgInvites"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if organization not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "revokeInvite": {
                    "path": "/invites",
                    "method": "DELETE",
                    "summary": "Revokes an existing invite",
                    "auth": [
                        "org.revokeInvite"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "inviteId",
                            "description": "Id of invite to revoke",
                            "in": "query",
                            "type": "string",
                            "required": true,
                            "pattern": "^[A-Fa-f\\d]{24}$",
                            "example": "575ed71e7ae143cd83dc4aaa"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Invitation information",
                            "schema": {
                                "$ref": "#/definitions/orgInvites"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if organization not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "modifyMember": {
                    "path": "/member",
                    "method": "PATCH",
                    "summary": "Modifies a current org member's role",
                    "auth": [
                        "org.modifyMember"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "member",
                            "description": "Object containing new member pair",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/orgMemberPatch"
                            }
                        },
                        {
                            "name": "summaryExclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to exclude from org summary",
                            "example": "payloadCount"
                        },
                        {
                            "name": "summaryInclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to include in org summary",
                            "example": "payloadCount"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated organization information",
                            "schema": {
                                "$ref": "#/definitions/org"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if organization not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "removeMember": {
                    "path": "/member",
                    "method": "DELETE",
                    "summary": "Removes a member from the org",
                    "auth": [
                        "org.removeMember"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "userId",
                            "description": "Id of user to remove",
                            "in": "query",
                            "type": "string",
                            "required": true,
                            "pattern": "^[A-Fa-f\\d]{24}$",
                            "example": "575ed70c7ae143cd83dc4aa9"
                        },
                        {
                            "name": "summaryExclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to exclude from org summary",
                            "example": "payloadCount"
                        },
                        {
                            "name": "summaryInclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to include in org summary",
                            "example": "payloadCount"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated organization information",
                            "schema": {
                                "$ref": "#/definitions/org"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if organization not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "payloadCounts": {
                    "path": "/payloadCounts",
                    "method": "GET",
                    "summary": "Returns payload counts for the time range specified for all applications this organization owns",
                    "auth": [
                        "org.payloadCounts"
                    ],
                    "params": [
                        {
                            "name": "start",
                            "type": "string",
                            "in": "query",
                            "description": "Start of range for payload count query (ms since epoch)",
                            "example": 0
                        },
                        {
                            "name": "end",
                            "type": "string",
                            "in": "query",
                            "description": "End of range for payload count query (ms since epoch)",
                            "example": 1465790400000
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Payload counts, by type and source",
                            "schema": {
                                "$ref": "#/definitions/payloadCounts"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if organization was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "transferResources": {
                    "method": "PATCH",
                    "path": "/transferResources",
                    "summary": "Moves resources to a new owner",
                    "auth": [
                        "org.transferResources"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "transfer",
                            "description": "Object containing properties of the transfer",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/resourceTransfer"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "If resource transfer was successful",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if organization was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            },
            "links": {
                "orgs": {
                    "href": "/orgs"
                }
            }
        },
        "orgs": {
            "path": "/orgs",
            "auth": [
                "orgs.*"
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the organizations associated with the current user",
                    "auth": [
                        "orgs.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "name",
                            "enum": [
                                "name",
                                "id",
                                "creationDate",
                                "lastUpdated"
                            ],
                            "description": "Field to sort the results by",
                            "example": "name"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the results by",
                            "example": "asc"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "Which page of results to return",
                            "example": 0
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "name"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "name"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "my*org"
                        },
                        {
                            "name": "summaryExclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to exclude from org summaries",
                            "example": "payloadCount"
                        },
                        {
                            "name": "summaryInclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to include in org summary",
                            "example": "payloadCount"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of organizations",
                            "schema": {
                                "$ref": "#/definitions/orgs"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create a new organization",
                    "auth": [
                        "orgs.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "organization",
                            "description": "New organization information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/orgPost"
                            }
                        },
                        {
                            "name": "summaryExclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to exclude from org summary",
                            "example": "payloadCount"
                        },
                        {
                            "name": "summaryInclude",
                            "type": "string",
                            "in": "query",
                            "description": "Comma-separated list of summary fields to include in org summary",
                            "example": "payloadCount"
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created organization",
                            "schema": {
                                "$ref": "#/definitions/org"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            }
        },
        "webhook": {
            "path": "/applications/{applicationId}/webhooks/{webhookId}",
            "auth": [
                "webhook.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                },
                {
                    "name": "webhookId",
                    "description": "ID associated with the webhook",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ed78e7ae143cd83dc4aab"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Retrieves information on a webhook",
                    "auth": [
                        "webhook.get"
                    ],
                    "responses": {
                        "200": {
                            "description": "Webhook information",
                            "schema": {
                                "$ref": "#/definitions/webhook"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if webhook was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "patch": {
                    "method": "PATCH",
                    "summary": "Updates information about a webhook",
                    "auth": [
                        "webhook.patch"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "webhook",
                            "description": "Object containing new properties of the webhook",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/webhookPatch"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Updated webhook information",
                            "schema": {
                                "$ref": "#/definitions/webhook"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if webhook was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "delete": {
                    "method": "DELETE",
                    "summary": "Deletes a webhook",
                    "auth": [
                        "webhook.delete"
                    ],
                    "audit": true,
                    "responses": {
                        "200": {
                            "description": "If webhook was successfully deleted",
                            "schema": {
                                "$ref": "#/definitions/success"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if webhook was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            },
            "links": {
                "application": {
                    "href": "/applications/{applicationId}"
                },
                "webhooks": {
                    "href": "/applications/{applicationId}/webhooks"
                }
            }
        },
        "webhooks": {
            "path": "/applications/{applicationId}/webhooks",
            "auth": [
                "webhooks.*"
            ],
            "params": [
                {
                    "name": "applicationId",
                    "description": "ID associated with the application",
                    "in": "path",
                    "type": "string",
                    "required": true,
                    "pattern": "^[A-Fa-f\\d]{24}$",
                    "example": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actions": {
                "get": {
                    "method": "GET",
                    "summary": "Returns the webhooks for an application",
                    "auth": [
                        "webhooks.get"
                    ],
                    "params": [
                        {
                            "name": "sortField",
                            "type": "string",
                            "in": "query",
                            "default": "name",
                            "enum": [
                                "name",
                                "id",
                                "creationDate",
                                "lastUpdated"
                            ],
                            "description": "Field to sort the results by",
                            "example": "name"
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "in": "query",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Direction to sort the results by",
                            "example": "asc"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "in": "query",
                            "default": 0,
                            "description": "Which page of results to return",
                            "example": 0
                        },
                        {
                            "name": "perPage",
                            "type": "string",
                            "in": "query",
                            "default": 1000,
                            "description": "How many items to return per page",
                            "example": 10
                        },
                        {
                            "name": "filterField",
                            "type": "string",
                            "in": "query",
                            "enum": [
                                "name"
                            ],
                            "description": "Field to filter the results by. Blank or not provided means no filtering.",
                            "example": "name"
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "in": "query",
                            "description": "Filter to apply against the filtered field. Supports globbing. Blank or not provided means no filtering.",
                            "example": "my*webhook"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Collection of webhooks",
                            "schema": {
                                "$ref": "#/definitions/webhooks"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                },
                "post": {
                    "method": "POST",
                    "summary": "Create a new webhook for an application",
                    "auth": [
                        "webhooks.post"
                    ],
                    "audit": true,
                    "params": [
                        {
                            "name": "webhook",
                            "description": "New webhook information",
                            "in": "body",
                            "required": true,
                            "schema": {
                                "$ref": "#/definitions/webhookPost"
                            }
                        }
                    ],
                    "responses": {
                        "201": {
                            "description": "Successfully created webhook",
                            "schema": {
                                "$ref": "#/definitions/webhook"
                            }
                        },
                        "400": {
                            "description": "Error if malformed request",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        },
                        "404": {
                            "description": "Error if application was not found",
                            "schema": {
                                "$ref": "#/definitions/error"
                            }
                        }
                    }
                }
            },
            "links": {
                "application": {
                    "href": "/applications/{applicationId}"
                }
            }
        }
    },
    "definitions": {
        "advancedDeviceQuery": {
            "title": "Advanced Device Query",
            "description": "Schema for advanced device queries",
            "type": "object",
            "properties": {
                "$and": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/advancedDeviceQuery"
                    },
                    "maxItems": 100
                },
                "$or": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/advancedDeviceQuery"
                    },
                    "maxItems": 100
                },
                "$nor": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/advancedDeviceQuery"
                    },
                    "maxItems": 100
                },
                "id": {
                    "$ref": "#/definitions/common/advancedIdQuery"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/advancedValueQuery"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/advancedValueQuery"
                },
                "name": {
                    "$ref": "#/definitions/common/advancedValueQuery"
                },
                "deviceClass": {
                    "$ref": "#/definitions/common/advancedValueQuery"
                },
                "gatewayId": {
                    "$ref": "#/definitions/common/advancedIdQuery"
                },
                "parentId": {
                    "$ref": "#/definitions/common/advancedIdQuery"
                },
                "ancestorId": {
                    "$ref": "#/definitions/common/advancedIdQuery"
                },
                "attributeName": {
                    "$ref": "#/definitions/common/advancedValueQuery"
                },
                "experienceUserId": {
                    "$ref": "#/definitions/common/advancedIdQuery"
                },
                "experienceGroupId": {
                    "$ref": "#/definitions/common/advancedIdQuery"
                },
                "tags": {
                    "$ref": "#/definitions/common/advancedTagQueryWithOps"
                }
            },
            "additionalProperties": false
        },
        "advancedEventQuery": {
            "title": "Advanced Event Query",
            "description": "Schema for advanced event queries",
            "type": "object",
            "properties": {
                "$and": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/advancedEventQuery"
                    },
                    "maxItems": 100
                },
                "$or": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/advancedEventQuery"
                    },
                    "maxItems": 100
                },
                "$nor": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/advancedEventQuery"
                    },
                    "maxItems": 100
                },
                "id": {
                    "$ref": "#/definitions/common/advancedValueQuery"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/advancedValueQuery"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/advancedValueQuery"
                },
                "sourceId": {
                    "$ref": "#/definitions/common/advancedValueQuery"
                },
                "sourceType": {
                    "$ref": "#/definitions/common/advancedValueQuery"
                },
                "level": {
                    "$ref": "#/definitions/common/advancedValueQuery"
                },
                "state": {
                    "$ref": "#/definitions/common/advancedValueQuery"
                },
                "subject": {
                    "$ref": "#/definitions/common/advancedValueQuery"
                },
                "deviceId": {
                    "$ref": "#/definitions/common/advancedValueQuery"
                },
                "experienceUserId": {
                    "$ref": "#/definitions/common/advancedIdQuery"
                },
                "experienceGroupId": {
                    "$ref": "#/definitions/common/advancedIdQuery"
                },
                "eventTags": {
                    "$ref": "#/definitions/common/advancedTagQueryWithOps"
                }
            },
            "additionalProperties": false
        },
        "advancedQuery": {
            "title": "Advanced Query",
            "description": "Schema for advanced filters and queries",
            "type": "object",
            "properties": {
                "$and": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/advancedQuery"
                    },
                    "maxItems": 100
                },
                "$or": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/advancedQuery"
                    },
                    "maxItems": 100
                },
                "$nor": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/advancedQuery"
                    },
                    "maxItems": 100
                }
            },
            "patternProperties": {
                "^[0-9a-zA-Z_-]{1,255}$": {
                    "$ref": "#/definitions/common/advancedValueQuery"
                }
            },
            "additionalProperties": false
        },
        "apiToken": {
            "title": "API Token",
            "description": "Schema for a single API Token",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "apiTokenId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "ownerId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "ownerType": {
                    "type": "string",
                    "enum": [
                        "application"
                    ]
                },
                "creatorId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creatorType": {
                    "type": "string",
                    "enum": [
                        "apiToken",
                        "user",
                        "flow"
                    ]
                },
                "creatorName": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "expirationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "scope": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common/reqMedStr"
                    }
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive"
                    ]
                },
                "token": {
                    "$ref": "#/definitions/common/token"
                }
            }
        },
        "apiTokenPatch": {
            "title": "API Token Patch",
            "description": "Schema for the body of an API Token modification request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "status": {
                    "$ref": "#/definitions/apiToken/properties/status"
                }
            },
            "additionalProperties": false
        },
        "apiTokens": {
            "title": "API Tokens",
            "description": "Schema for a collection of API Tokens",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apiToken"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "filter": {
                    "type": "string"
                },
                "filterField": {
                    "type": "string"
                },
                "sortField": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                },
                "ownerId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "ownerType": {
                    "type": "string",
                    "enum": [
                        "application"
                    ]
                }
            }
        },
        "application": {
            "title": "Application",
            "description": "Schema for a single Application",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "ownerId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "ownerType": {
                    "$ref": "#/definitions/common/ownerType"
                },
                "organizationName": {
                    "$ref": "#/definitions/common/name"
                },
                "organizationIconColor": {
                    "$ref": "#/definitions/common/color"
                },
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/shortString"
                },
                "endpointSlug": {
                    "$ref": "#/definitions/common/slug"
                },
                "expUserTokenCutoff": {
                    "$ref": "#/definitions/common/date"
                },
                "endpointDefaultCors": {
                    "type": "boolean"
                },
                "globals": {
                    "$ref": "#/definitions/common/applicationGlobals"
                },
                "summary": {
                    "type": "object",
                    "properties": {
                        "apiTokenCount": {
                            "type": "number"
                        },
                        "dataTableCount": {
                            "type": "number"
                        },
                        "deviceCount": {
                            "type": "number"
                        },
                        "deviceRecipeCount": {
                            "type": "number"
                        },
                        "eventCount": {
                            "type": "number"
                        },
                        "experienceDomainCount": {
                            "type": "number"
                        },
                        "experienceEndpointCount": {
                            "type": "number"
                        },
                        "experienceGroupCount": {
                            "type": "number"
                        },
                        "experienceSlugCount": {
                            "type": "number"
                        },
                        "experienceUserCount": {
                            "type": "number"
                        },
                        "experienceVersionCount": {
                            "type": "number"
                        },
                        "experienceViewCount": {
                            "type": "number"
                        },
                        "fileCount": {
                            "type": "number"
                        },
                        "flowCount": {
                            "type": "number"
                        },
                        "integrationCount": {
                            "type": "number"
                        },
                        "keyCount": {
                            "type": "number"
                        },
                        "storageStats": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number"
                                },
                                "size": {
                                    "type": "number"
                                }
                            }
                        },
                        "webhookCount": {
                            "type": "number"
                        }
                    }
                },
                "ftueTracking": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "$ref": "#/definitions/common/key"
                            },
                            "version": {
                                "type": "number"
                            },
                            "status": {
                                "type": "string",
                                "enum": [
                                    "skipped",
                                    "completed"
                                ]
                            }
                        },
                        "required": [
                            "name",
                            "version",
                            "status"
                        ],
                        "additionalProperties": false
                    },
                    "maxItems": 100
                },
                "archiveConfig": {
                    "type": "object",
                    "properties": {
                        "directory": {
                            "type": "string",
                            "max": 255
                        },
                        "mode": {
                            "$ref": "#/definitions/common/filterType"
                        },
                        "deviceIds": {
                            "$ref": "#/definitions/common/objectIds"
                        },
                        "deviceTags": {
                            "$ref": "#/definitions/common/tagsOptional"
                        },
                        "includeDevices": {
                            "type": "boolean",
                            "default": true
                        },
                        "includeEvents": {
                            "type": "boolean",
                            "default": false
                        },
                        "includeDataTables": {
                            "type": "boolean",
                            "default": false
                        },
                        "dataTablesMode": {
                            "$ref": "#/definitions/common/filterType"
                        },
                        "dataTableIds": {
                            "$ref": "#/definitions/common/objectIds"
                        },
                        "s3": {
                            "type": "object",
                            "properties": {
                                "bucket": {
                                    "type": "string",
                                    "max": 255
                                },
                                "accessKeyId": {
                                    "type": "string",
                                    "min": 4,
                                    "max": 128
                                },
                                "secretAccessKey": {
                                    "type": "string",
                                    "min": 4,
                                    "max": 128
                                },
                                "region": {
                                    "type": "string",
                                    "max": 128
                                }
                            },
                            "required": [
                                "bucket",
                                "accessKeyId",
                                "secretAccessKey",
                                "region"
                            ],
                            "additionalProperties": false
                        },
                        "gcs": {
                            "type": "object",
                            "properties": {
                                "projectId": {
                                    "$ref": "#/definitions/common/reqMedStr"
                                },
                                "keyJson": {
                                    "type": "string",
                                    "maxLength": 32767,
                                    "minLength": 4
                                },
                                "bucket": {
                                    "type": "string",
                                    "max": 255
                                }
                            },
                            "required": [
                                "projectId",
                                "keyJson",
                                "bucket"
                            ],
                            "additionalProperties": false
                        },
                        "azure": {
                            "type": "object",
                            "properties": {
                                "account": {
                                    "type": "string",
                                    "min": 3,
                                    "max": 24
                                },
                                "accountKey": {
                                    "type": "string",
                                    "max": 255
                                },
                                "bucket": {
                                    "type": "string",
                                    "min": 3,
                                    "max": 63
                                }
                            },
                            "required": [
                                "account",
                                "accountKey",
                                "bucket"
                            ],
                            "additionalProperties": false
                        }
                    },
                    "additionalProperties": false
                }
            }
        },
        "applicationApiTokenPost": {
            "title": "Application API Token Post",
            "description": "Schema for the body of an Application API Token creation request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "expirationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "scope": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/common/applicationApiScope"
                    }
                },
                "status": {
                    "$ref": "#/definitions/apiToken/properties/status"
                }
            },
            "additionalProperties": false,
            "required": [
                "name"
            ]
        },
        "applicationCertificate": {
            "title": "Application Certificate",
            "description": "Schema for a single Application Certificate",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationCertificateId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "status": {
                    "$ref": "#/definitions/common/status"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "deviceIds": {
                    "$ref": "#/definitions/common/objectIds"
                },
                "deviceTags": {
                    "$ref": "#/definitions/common/tagsOptional"
                },
                "certificateInfo": {
                    "$ref": "#/definitions/common/certificateInfo"
                },
                "filterType": {
                    "$ref": "#/definitions/common/authFilterType"
                },
                "pubTopics": {
                    "$ref": "#/definitions/common/authPubSubTopics"
                },
                "subTopics": {
                    "$ref": "#/definitions/common/authPubSubTopics"
                }
            }
        },
        "applicationCertificateAuthorities": {
            "title": "Application Certificate Authorities",
            "description": "Schema for a collection of Application Certificate Authorities",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/applicationCertificateAuthority"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "filter": {
                    "type": "string"
                },
                "filterField": {
                    "type": "string"
                },
                "sortField": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                }
            }
        },
        "applicationCertificateAuthority": {
            "title": "Application Certificate Authority",
            "description": "Schema for a single Application Certificate Authority",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationCertificateAuthorityId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "status": {
                    "$ref": "#/definitions/common/status"
                },
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "caBundle": {
                    "$ref": "#/definitions/common/certificateString"
                },
                "caInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common/certificateInfo"
                    }
                }
            }
        },
        "applicationCertificateAuthorityPatch": {
            "title": "Application Certificate Authority Patch",
            "description": "Schema for the body of an Application Certificate Authority modification request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "status": {
                    "$ref": "#/definitions/common/status"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "caBundle": {
                    "$ref": "#/definitions/common/certificateString"
                }
            },
            "additionalProperties": false
        },
        "applicationCertificateAuthorityPost": {
            "title": "Application Certificate Authority Post",
            "description": "Schema for the body of an Application Certificate Authority creation request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "status": {
                    "$ref": "#/definitions/common/status"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "caBundle": {
                    "$ref": "#/definitions/common/certificateString"
                }
            },
            "required": [
                "name",
                "caBundle"
            ],
            "additionalProperties": false
        },
        "applicationCertificatePatch": {
            "title": "Application Certificate Patch",
            "description": "Schema for the body of an Application Certificate modification request",
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/common/status"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "certificate": {
                    "$ref": "#/definitions/common/certificateString"
                },
                "filterType": {
                    "$ref": "#/definitions/common/authFilterType"
                },
                "pubTopics": {
                    "$ref": "#/definitions/common/authPubSubTopics"
                },
                "subTopics": {
                    "$ref": "#/definitions/common/authPubSubTopics"
                }
            },
            "additionalProperties": false
        },
        "applicationCertificatePost": {
            "title": "Application Certificate Post",
            "description": "Schema for the body of an Application Certificate creation request",
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/common/status"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "deviceIds": {
                    "$ref": "#/definitions/common/objectIds"
                },
                "deviceTags": {
                    "$ref": "#/definitions/common/tagsOptional"
                },
                "certificate": {
                    "$ref": "#/definitions/common/certificateString"
                },
                "filterType": {
                    "$ref": "#/definitions/common/authFilterType"
                },
                "pubTopics": {
                    "$ref": "#/definitions/common/authPubSubTopics"
                },
                "subTopics": {
                    "$ref": "#/definitions/common/authPubSubTopics"
                }
            },
            "required": [
                "certificate"
            ],
            "additionalProperties": false
        },
        "applicationCertificates": {
            "title": "Application Certificates",
            "description": "Schema for a collection of Application Certificates",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/applicationCertificate"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "filter": {
                    "type": "string"
                },
                "filterField": {
                    "type": "string"
                },
                "sortField": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                }
            }
        },
        "applicationCloneDryRunResult": {
            "title": "Success Dry Run",
            "description": "Schema for reporting a successful dry run of clone application",
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean",
                    "enum": [
                        true
                    ]
                },
                "requiresJob": {
                    "type": "boolean"
                }
            }
        },
        "applicationClonePost": {
            "title": "Application Clone Post Schema",
            "description": "Schema for the body of an application clone request",
            "type": "object",
            "properties": {
                "dryRun": {
                    "type": "boolean",
                    "default": false
                },
                "includeFiles": {
                    "type": "boolean",
                    "default": false
                },
                "includeDataTableRows": {
                    "type": "boolean",
                    "default": false
                },
                "includeDevices": {
                    "type": "boolean",
                    "default": false
                },
                "ownerId": {
                    "$ref": "#/definitions/common/objectIdOrNull"
                },
                "ownerType": {
                    "$ref": "#/definitions/common/ownerType"
                },
                "email": {
                    "$ref": "#/definitions/common/email"
                }
            },
            "additionalProperties": false
        },
        "applicationCreationByTemplateResult": {
            "title": "Application Creation By Template Result",
            "description": "Schema for creating an application by template result",
            "type": "object",
            "properties": {
                "application": {
                    "$ref": "#/definitions/application"
                },
                "validationErrors": {
                    "$ref": "#/definitions/validationErrors/properties/validationErrors"
                }
            },
            "additionalProperties": false
        },
        "applicationExportPost": {
            "title": "Application Export Post Schema",
            "description": "Schema for the body of an application export request",
            "type": "object",
            "properties": {
                "includeFiles": {
                    "type": "boolean",
                    "default": false
                },
                "includeDataTableRows": {
                    "type": "boolean",
                    "default": false
                },
                "includeDevices": {
                    "type": "boolean",
                    "default": false
                },
                "email": {
                    "$ref": "#/definitions/common/email"
                }
            },
            "additionalProperties": false
        },
        "applicationExportResult": {
            "title": "Application Export Result",
            "description": "Schema for an application export result",
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                }
            },
            "additionalProperties": false
        },
        "applicationKey": {
            "title": "Application Key",
            "description": "Schema for a single Application Key",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationKeyId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "key": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/common/status"
                },
                "deviceIds": {
                    "$ref": "#/definitions/common/objectIds"
                },
                "deviceTags": {
                    "$ref": "#/definitions/common/tagsOptional"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "filterType": {
                    "$ref": "#/definitions/common/authFilterType"
                },
                "pubTopics": {
                    "$ref": "#/definitions/common/authPubSubTopics"
                },
                "subTopics": {
                    "$ref": "#/definitions/common/authPubSubTopics"
                }
            }
        },
        "applicationKeyPatch": {
            "title": "Application Key Patch",
            "description": "Schema for the body of an Application Key modification request",
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/common/status"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "filterType": {
                    "$ref": "#/definitions/common/authFilterType"
                },
                "pubTopics": {
                    "$ref": "#/definitions/common/authPubSubTopics"
                },
                "subTopics": {
                    "$ref": "#/definitions/common/authPubSubTopics"
                }
            },
            "additionalProperties": false
        },
        "applicationKeyPost": {
            "title": "Application Key Post",
            "description": "Schema for the body of an Application Key creation request",
            "type": "object",
            "properties": {
                "deviceIds": {
                    "$ref": "#/definitions/common/objectIds"
                },
                "deviceTags": {
                    "$ref": "#/definitions/common/tagsOptional"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "filterType": {
                    "$ref": "#/definitions/common/authFilterType"
                },
                "pubTopics": {
                    "$ref": "#/definitions/common/authPubSubTopics"
                },
                "subTopics": {
                    "$ref": "#/definitions/common/authPubSubTopics"
                }
            },
            "additionalProperties": false
        },
        "applicationKeyPostResponse": {
            "title": "Application Key Post Response",
            "description": "Schema for a response of Application Key creation",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationKeyId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "key": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/common/status"
                },
                "secret": {
                    "type": "string"
                },
                "deviceIds": {
                    "$ref": "#/definitions/common/objectIds"
                },
                "deviceTags": {
                    "$ref": "#/definitions/common/tagsOptional"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "filterType": {
                    "$ref": "#/definitions/common/authFilterType"
                },
                "pubTopics": {
                    "$ref": "#/definitions/common/authPubSubTopics"
                },
                "subTopics": {
                    "$ref": "#/definitions/common/authPubSubTopics"
                }
            }
        },
        "applicationKeys": {
            "title": "Application Keys",
            "description": "Schema for a collection of Application Keys",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/applicationKey"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "filter": {
                    "type": "string"
                },
                "filterField": {
                    "type": "string"
                },
                "sortField": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                }
            }
        },
        "applicationPatch": {
            "title": "Application Patch",
            "description": "Schema for the body of an Application modification request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/shortString"
                },
                "endpointSlug": {
                    "$ref": "#/definitions/common/slug"
                },
                "expUserTokenCutoff": {
                    "$ref": "#/definitions/common/date"
                },
                "endpointDefaultCors": {
                    "type": "boolean"
                },
                "globals": {
                    "$ref": "#/definitions/common/applicationGlobals"
                },
                "ftueTracking": {
                    "$ref": "#/definitions/application/properties/ftueTracking"
                },
                "archiveConfig": {
                    "$ref": "#/definitions/application/properties/archiveConfig"
                }
            },
            "additionalProperties": false
        },
        "applicationPost": {
            "title": "Application Post",
            "description": "Schema for the body of an Application creation request",
            "type": "object",
            "properties": {
                "orgId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationTemplateId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/shortString"
                },
                "endpointSlug": {
                    "$ref": "#/definitions/common/slug"
                },
                "expUserTokenCutoff": {
                    "$ref": "#/definitions/common/date"
                },
                "endpointDefaultCors": {
                    "type": "boolean"
                },
                "globals": {
                    "$ref": "#/definitions/common/applicationGlobals"
                },
                "archiveConfig": {
                    "$ref": "#/definitions/application/properties/archiveConfig"
                }
            },
            "additionalProperties": false,
            "required": [
                "name"
            ]
        },
        "applicationReadme": {
            "title": "Application Readme",
            "description": "Schema for an Application Readme",
            "type": "object",
            "properties": {
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdatedById": {
                    "$ref": "#/definitions/common/objectId"
                },
                "lastUpdatedByType": {
                    "$ref": "#/definitions/common/expSourceType"
                },
                "content": {
                    "type": "string"
                }
            }
        },
        "applicationReadmePatch": {
            "title": "Application Readme Patch",
            "description": "Schema for the body of an Application Readme modification request",
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "maxLength": 131072
                }
            },
            "additionalProperties": false
        },
        "applicationSearchResult": {
            "title": "Application Search Result",
            "description": "Results of a search of an application's resources",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "id": {
                        "$ref": "#/definitions/common/objectId"
                    },
                    "name": {
                        "type": "string"
                    },
                    "metadata": {
                        "type": "object"
                    },
                    "viewType": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "_type": {
                        "type": "string",
                        "enum": [
                            "applicationApiToken",
                            "dashboard",
                            "dataTable",
                            "deviceRecipe",
                            "device",
                            "experienceDomain",
                            "event",
                            "experienceEndpoint",
                            "experienceGroup",
                            "experienceSlug",
                            "experienceUser",
                            "experienceVersion",
                            "experienceView",
                            "file",
                            "flow",
                            "integration",
                            "webhook"
                        ]
                    }
                },
                "required": [
                    "id",
                    "name",
                    "_type"
                ]
            }
        },
        "applicationTemplate": {
            "title": "Application Template",
            "description": "Schema for a single Application Template",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/shortString"
                },
                "public": {
                    "type": "boolean"
                },
                "authorName": {
                    "type": "string",
                    "maxLength": 255
                },
                "imageUrl": {
                    "$ref": "#/definitions/common/shortString"
                },
                "authorUrl": {
                    "$ref": "#/definitions/common/shortString"
                },
                "templateUrl": {
                    "$ref": "#/definitions/common/shortString"
                },
                "summary": {
                    "type": "object",
                    "properties": {
                        "applicationCertificateAuthorityCount": {
                            "type": "number"
                        },
                        "dashboardCount": {
                            "type": "number"
                        },
                        "deviceCount": {
                            "type": "number"
                        },
                        "deviceRecipeCount": {
                            "type": "number"
                        },
                        "dataTableCount": {
                            "type": "number"
                        },
                        "experienceGroupCount": {
                            "type": "number"
                        },
                        "experienceUserCount": {
                            "type": "number"
                        },
                        "experienceVersionCount": {
                            "type": "number"
                        },
                        "experienceViewCount": {
                            "type": "number"
                        },
                        "experienceEndpointCount": {
                            "type": "number"
                        },
                        "fileCount": {
                            "type": "number"
                        },
                        "flowCount": {
                            "type": "number"
                        },
                        "integrationCount": {
                            "type": "number"
                        },
                        "notebookCount": {
                            "type": "number"
                        },
                        "dataTableCsvSize": {
                            "type": "number"
                        },
                        "webhookCount": {
                            "type": "number"
                        }
                    }
                }
            }
        },
        "applicationTemplates": {
            "title": "Application Templates",
            "description": "Schema for a collection of Application Templates",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/applicationTemplate"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "filter": {
                    "type": "string"
                },
                "filterField": {
                    "type": "string"
                },
                "sortField": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                }
            }
        },
        "applications": {
            "title": "Applications",
            "description": "Schema for a collection of Applications",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/application"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "filter": {
                    "type": "string"
                },
                "filterField": {
                    "type": "string"
                },
                "sortField": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                }
            }
        },
        "auditLog": {
            "title": "Audit Log",
            "description": "Schema for a single Audit Log entry",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "auditLogId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "orgId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "primaryTargetId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "primaryTargetType": {
                    "type": "string",
                    "enum": [
                        "Application",
                        "Dashboard",
                        "OrgInvite"
                    ]
                },
                "primaryTargetName": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "secondaryTargetId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "secondaryTargetType": {
                    "type": "string",
                    "enum": [
                        "ApiToken",
                        "ApplicationKey",
                        "DataTable",
                        "Device",
                        "DeviceRecipe",
                        "Event",
                        "ExperienceDomain",
                        "ExperienceEndpoint",
                        "ExperienceGroup",
                        "ExperienceSlug",
                        "ExperienceUser",
                        "ExperienceVersion",
                        "ExperienceView",
                        "File",
                        "Flow",
                        "Integration",
                        "Webhook"
                    ]
                },
                "secondaryTargetName": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "actorId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "actorType": {
                    "type": "string",
                    "enum": [
                        "Application",
                        "Device",
                        "Flow",
                        "User",
                        "ApiToken"
                    ]
                },
                "actorName": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "requestResource": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "requestAction": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "requestQueryParams": {
                    "type": "object"
                },
                "requestBody": {
                    "type": "object"
                },
                "requestPathParams": {
                    "type": "object"
                },
                "responseBody": {
                    "type": "object"
                },
                "responseStatus": {
                    "$ref": "#/definitions/common/responseCode"
                }
            }
        },
        "auditLogFilter": {
            "title": "Audit Log Filter",
            "description": "Schema for the filter of an audit log query",
            "type": "object",
            "properties": {
                "primaryTarget": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "$ref": "#/definitions/common/objectId"
                            },
                            "type": {
                                "$ref": "#/definitions/auditLog/properties/primaryTargetType"
                            },
                            "name": {
                                "$ref": "#/definitions/common/optMedStr"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "secondaryTarget": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "$ref": "#/definitions/common/objectId"
                            },
                            "type": {
                                "$ref": "#/definitions/auditLog/properties/secondaryTargetType"
                            },
                            "name": {
                                "$ref": "#/definitions/common/optMedStr"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "actor": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "$ref": "#/definitions/common/objectId"
                            },
                            "type": {
                                "$ref": "#/definitions/auditLog/properties/actorType"
                            },
                            "name": {
                                "$ref": "#/definitions/common/optMedStr"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "request": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "resource": {
                                "$ref": "#/definitions/common/optMedStr"
                            },
                            "action": {
                                "$ref": "#/definitions/common/optMedStr"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "responseCode": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common/responseCode"
                    }
                }
            },
            "additionalProperties": false
        },
        "auditLogs": {
            "title": "Audit Logs",
            "description": "Schema for a collection of Audit Logs",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/auditLog"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "sortField": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                },
                "orgId": {
                    "$ref": "#/definitions/common/objectId"
                }
            }
        },
        "authedDevice": {
            "title": "Authenticated Device",
            "description": "Schema for the successful response when authenticating a Device",
            "type": "object",
            "properties": {
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "deviceId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "deviceClass": {
                    "$ref": "#/definitions/common/deviceClass"
                },
                "token": {
                    "$ref": "#/definitions/common/token"
                },
                "ownerType": {
                    "$ref": "#/definitions/common/ownerType"
                },
                "filterType": {
                    "$ref": "#/definitions/common/authFilterType"
                },
                "pubTopics": {
                    "$ref": "#/definitions/common/authPubSubTopics"
                },
                "subTopics": {
                    "$ref": "#/definitions/common/authPubSubTopics"
                }
            },
            "required": [
                "applicationId",
                "deviceId",
                "deviceClass",
                "token"
            ]
        },
        "authedUser": {
            "title": "Authenticated User",
            "description": "Schema for the successful response when authenticating a User",
            "type": "object",
            "properties": {
                "userId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "token": {
                    "$ref": "#/definitions/common/token"
                }
            },
            "required": [
                "userId",
                "token"
            ]
        },
        "changePassword": {
            "title": "Change Password",
            "description": "Schema for the body of a request to change the current user's password",
            "type": "object",
            "properties": {
                "twoFactorCode": {
                    "$ref": "#/definitions/userCredentials/properties/twoFactorCode"
                },
                "password": {
                    "$ref": "#/definitions/common/password"
                },
                "newPassword": {
                    "$ref": "#/definitions/common/userPassword"
                },
                "invalidateExistingTokens": {
                    "type": "boolean"
                },
                "tokenTTL": {
                    "type": "integer",
                    "minimum": 0
                }
            },
            "required": [
                "password",
                "newPassword"
            ],
            "additionalProperties": false
        },
        "compositeDeviceState": {
            "title": "Composite Device State",
            "description": "Schema for a composite Device state",
            "type": "object",
            "patternProperties": {
                "^[0-9a-zA-Z_-]{1,255}$": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": [
                                "number",
                                "string",
                                "boolean"
                            ]
                        },
                        "time": {
                            "$ref": "#/definitions/common/timeFormats"
                        }
                    }
                }
            },
            "additionalProperties": false
        },
        "dashboard": {
            "title": "Dashboard",
            "description": "Schema for a single Dashboard",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "dashboardId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "ownerId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "ownerType": {
                    "$ref": "#/definitions/common/ownerType"
                },
                "organizationName": {
                    "$ref": "#/definitions/common/name"
                },
                "organizationIconColor": {
                    "$ref": "#/definitions/common/color"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationName": {
                    "$ref": "#/definitions/common/name"
                },
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "refreshRate": {
                    "type": "number",
                    "minimum": 5,
                    "maximum": 600
                },
                "defaultTheme": {
                    "type": "string",
                    "enum": [
                        "dark",
                        "light"
                    ]
                },
                "isPasswordProtected": {
                    "type": "boolean"
                },
                "public": {
                    "type": "boolean"
                },
                "reportConfigs": {
                    "type": "array",
                    "max": 10,
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "maxLength": 48
                            },
                            "cron": {
                                "type": "string",
                                "maxLength": 255
                            },
                            "toEmail": {
                                "type": "array",
                                "min": 1,
                                "max": 10,
                                "items": {
                                    "$ref": "#/definitions/common/email"
                                }
                            },
                            "subject": {
                                "type": "string",
                                "maxLength": 255
                            },
                            "message": {
                                "$ref": "#/definitions/common/description"
                            },
                            "theme": {
                                "type": "string",
                                "enum": [
                                    "dark",
                                    "light"
                                ]
                            },
                            "timezone": {
                                "type": "string",
                                "maxLength": 255
                            }
                        },
                        "additionalProperties": false,
                        "required": [
                            "cron",
                            "toEmail"
                        ]
                    }
                },
                "blocks": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/common/blocks/applicationList"
                            },
                            {
                                "$ref": "#/definitions/common/blocks/bar"
                            },
                            {
                                "$ref": "#/definitions/common/blocks/customBlock"
                            },
                            {
                                "$ref": "#/definitions/common/blocks/dashboardList"
                            },
                            {
                                "$ref": "#/definitions/common/blocks/dataTable"
                            },
                            {
                                "$ref": "#/definitions/common/blocks/deviceList"
                            },
                            {
                                "$ref": "#/definitions/common/blocks/deviceLog"
                            },
                            {
                                "$ref": "#/definitions/common/blocks/deviceStateTable"
                            },
                            {
                                "$ref": "#/definitions/common/blocks/eventList"
                            },
                            {
                                "$ref": "#/definitions/common/blocks/gauge"
                            },
                            {
                                "$ref": "#/definitions/common/blocks/graph"
                            },
                            {
                                "$ref": "#/definitions/common/blocks/heatmap"
                            },
                            {
                                "$ref": "#/definitions/common/blocks/iframe"
                            },
                            {
                                "$ref": "#/definitions/common/blocks/image"
                            },
                            {
                                "$ref": "#/definitions/common/blocks/imageOverlay"
                            },
                            {
                                "$ref": "#/definitions/common/blocks/indicator"
                            },
                            {
                                "$ref": "#/definitions/common/blocks/input"
                            },
                            {
                                "$ref": "#/definitions/common/blocks/map"
                            },
                            {
                                "$ref": "#/definitions/common/blocks/openEventIndicator"
                            },
                            {
                                "$ref": "#/definitions/common/blocks/pie"
                            },
                            {
                                "$ref": "#/definitions/common/blocks/positionChart"
                            },
                            {
                                "$ref": "#/definitions/common/blocks/sectionHeader"
                            },
                            {
                                "$ref": "#/definitions/common/blocks/workflowList"
                            }
                        ]
                    }
                },
                "contextConfiguration": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "$ref": "#/definitions/common/key"
                                    },
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "deviceAttribute"
                                        ]
                                    },
                                    "applicationId": {
                                        "$ref": "#/definitions/common/objectId"
                                    },
                                    "defaultValue": {
                                        "type": "string",
                                        "maxLength": 32767
                                    },
                                    "validationEnabled": {
                                        "type": "boolean"
                                    },
                                    "validationConfig": {
                                        "type": "object",
                                        "properties": {
                                            "attributes": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/definitions/common/key"
                                                },
                                                "maxItems": 100
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "required": [
                                    "name",
                                    "type",
                                    "defaultValue"
                                ],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "$ref": "#/definitions/common/key"
                                    },
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "deviceId"
                                        ]
                                    },
                                    "applicationId": {
                                        "$ref": "#/definitions/common/objectId"
                                    },
                                    "defaultValue": {
                                        "type": "string",
                                        "maxLength": 32767
                                    },
                                    "validationEnabled": {
                                        "type": "boolean"
                                    },
                                    "validationConfig": {
                                        "type": "object",
                                        "properties": {
                                            "deviceIds": {
                                                "$ref": "#/definitions/common/objectIds"
                                            },
                                            "deviceTags": {
                                                "$ref": "#/definitions/common/tagsOptional"
                                            },
                                            "includeFullDevice": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "required": [
                                    "name",
                                    "type",
                                    "defaultValue"
                                ],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "$ref": "#/definitions/common/key"
                                    },
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "deviceTag"
                                        ]
                                    },
                                    "applicationId": {
                                        "$ref": "#/definitions/common/objectId"
                                    },
                                    "defaultValue": {
                                        "$ref": "#/definitions/common/tagOptional"
                                    },
                                    "validationEnabled": {
                                        "type": "boolean"
                                    },
                                    "validationConfig": {
                                        "type": "object",
                                        "properties": {
                                            "deviceTags": {
                                                "$ref": "#/definitions/common/tagsOptional"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "required": [
                                    "name",
                                    "type",
                                    "defaultValue"
                                ],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "$ref": "#/definitions/common/key"
                                    },
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "number"
                                        ]
                                    },
                                    "applicationId": {
                                        "$ref": "#/definitions/common/objectId"
                                    },
                                    "defaultValue": {
                                        "type": [
                                            "number",
                                            "string"
                                        ]
                                    },
                                    "validationEnabled": {
                                        "type": "boolean"
                                    },
                                    "validationConfig": {
                                        "type": "object",
                                        "properties": {
                                            "min": {
                                                "type": "number"
                                            },
                                            "max": {
                                                "type": "number"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "required": [
                                    "name",
                                    "type",
                                    "defaultValue"
                                ],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "$ref": "#/definitions/common/key"
                                    },
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "string"
                                        ]
                                    },
                                    "applicationId": {
                                        "$ref": "#/definitions/common/objectId"
                                    },
                                    "defaultValue": {
                                        "type": "string",
                                        "maxLength": 32767
                                    },
                                    "validationEnabled": {
                                        "type": "boolean"
                                    },
                                    "validationConfig": {
                                        "type": "object",
                                        "properties": {
                                            "regExp": {
                                                "$ref": "#/definitions/common/optMedStr"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "required": [
                                    "name",
                                    "type",
                                    "defaultValue"
                                ],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "$ref": "#/definitions/common/key"
                                    },
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "experienceUser"
                                        ]
                                    },
                                    "applicationId": {
                                        "$ref": "#/definitions/common/objectId"
                                    },
                                    "defaultValue": {
                                        "type": "string",
                                        "maxLength": 32767
                                    },
                                    "validationEnabled": {
                                        "type": "boolean"
                                    },
                                    "validationConfig": {
                                        "type": "object",
                                        "properties": {
                                            "experienceGroupIds": {
                                                "$ref": "#/definitions/common/objectIds"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "required": [
                                    "name",
                                    "type",
                                    "defaultValue"
                                ],
                                "additionalProperties": false
                            }
                        ]
                    },
                    "maxItems": 100
                }
            }
        },
        "dashboardContextInstance": {
            "title": "Dashboard Context Instance",
            "description": "Schema for a dashboard context instance",
            "type": "object",
            "patternProperties": {
                "^[0-9a-zA-Z_-]{1,255}$": {
                    "$ref": "#/definitions/common/contextVariableValue"
                }
            },
            "additionalProperties": false
        },
        "dashboardPatch": {
            "title": "Dashboard Patch",
            "description": "Schema for the body of a Dashboard modification request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "blocks": {
                    "$ref": "#/definitions/dashboard/properties/blocks"
                },
                "reportConfigs": {
                    "$ref": "#/definitions/dashboard/properties/reportConfigs"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "refreshRate": {
                    "$ref": "#/definitions/dashboard/properties/refreshRate"
                },
                "defaultTheme": {
                    "$ref": "#/definitions/dashboard/properties/defaultTheme"
                },
                "public": {
                    "type": "boolean"
                },
                "password": {
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "contextConfiguration": {
                    "$ref": "#/definitions/dashboard/properties/contextConfiguration"
                }
            },
            "additionalProperties": false
        },
        "dashboardPost": {
            "title": "Dashboard Post",
            "description": "Schema for the body of a Dashboard creation request",
            "type": "object",
            "properties": {
                "orgId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "blocks": {
                    "$ref": "#/definitions/dashboard/properties/blocks"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "refreshRate": {
                    "$ref": "#/definitions/dashboard/properties/refreshRate"
                },
                "defaultTheme": {
                    "$ref": "#/definitions/dashboard/properties/defaultTheme"
                },
                "reportConfigs": {
                    "$ref": "#/definitions/dashboard/properties/reportConfigs"
                },
                "public": {
                    "type": "boolean"
                },
                "password": {
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "contextConfiguration": {
                    "$ref": "#/definitions/dashboard/properties/contextConfiguration"
                }
            },
            "additionalProperties": false,
            "required": [
                "name"
            ]
        },
        "dashboardSendReport": {
            "title": "Dashboard Send Report",
            "description": "Schema for the body of a Dashboard report request",
            "type": "object",
            "required": [
                "toEmail"
            ],
            "properties": {
                "toEmail": {
                    "type": "array",
                    "min": 1,
                    "max": 10,
                    "items": {
                        "$ref": "#/definitions/common/email"
                    }
                },
                "subject": {
                    "type": "string",
                    "max": 255
                },
                "message": {
                    "type": "string",
                    "max": 32767
                },
                "theme": {
                    "type": "string",
                    "enum": [
                        "dark",
                        "light"
                    ]
                },
                "time": {
                    "type": "number"
                },
                "timezone": {
                    "type": "string",
                    "max": 255
                }
            },
            "additionalProperties": false
        },
        "dashboardUpdateEvents": {
            "title": "Dashboard Update Events",
            "description": "Schema for the body of an update events request",
            "type": "object",
            "properties": {
                "eventIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common/objectId"
                    }
                },
                "updates": {
                    "$ref": "#/definitions/eventPatch"
                }
            },
            "additionalProperties": false
        },
        "dashboards": {
            "title": "Dashboards",
            "description": "Schema for a collection of Dashboards",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dashboard"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "filter": {
                    "type": "string"
                },
                "filterField": {
                    "type": "string"
                },
                "sortField": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                },
                "orgId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                }
            }
        },
        "dataExport": {
            "title": "Data Export",
            "description": "Schema for exporting data devices query",
            "type": "object",
            "properties": {
                "email": {
                    "$ref": "#/definitions/common/email"
                },
                "deviceIds": {
                    "$ref": "#/definitions/common/objectIds"
                },
                "deviceTags": {
                    "$ref": "#/definitions/common/tagsOptional"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common/key"
                    }
                },
                "start": {
                    "type": "number"
                },
                "end": {
                    "type": "number"
                },
                "options": {
                    "type": "object",
                    "properties": {
                        "includeDate": {
                            "type": "boolean",
                            "default": true
                        },
                        "includeID": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                }
            },
            "additionalProperties": false
        },
        "dataTable": {
            "title": "Data Table",
            "description": "Schema for a single Data Table",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "dataTableId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dataTableColumn"
                    },
                    "maxItems": 50
                }
            }
        },
        "dataTableColumn": {
            "title": "Data Table Column",
            "description": "Schema for a single Data Table Column",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/key"
                },
                "dataType": {
                    "type": "string",
                    "enum": [
                        "string",
                        "number",
                        "boolean"
                    ]
                },
                "constraint": {
                    "type": "string",
                    "enum": [
                        "unique",
                        "required",
                        "optional"
                    ]
                },
                "defaultValue": {
                    "type": [
                        "string",
                        "number",
                        "boolean"
                    ]
                }
            },
            "required": [
                "name",
                "dataType",
                "constraint"
            ],
            "additionalProperties": false
        },
        "dataTablePatch": {
            "title": "Data Table Patch",
            "description": "Schema for the body of a Data Table modification request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                }
            },
            "additionalProperties": false
        },
        "dataTablePost": {
            "title": "Data Table Post",
            "description": "Schema for the body of a Data Table creation request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "columns": {
                    "$ref": "#/definitions/dataTable/properties/columns"
                }
            },
            "required": [
                "name"
            ],
            "additionalProperties": false
        },
        "dataTableRow": {
            "title": "Data Table Row",
            "description": "Schema for a single Data Table Row",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "createdAt": {
                    "$ref": "#/definitions/common/date"
                },
                "updatedAt": {
                    "$ref": "#/definitions/common/date"
                }
            },
            "patternProperties": {
                "^[0-9a-zA-Z_-]{1,255}$": {
                    "type": [
                        "string",
                        "number",
                        "boolean",
                        "null"
                    ]
                }
            }
        },
        "dataTableRowInMultiple": {
            "title": "Data Table Row Insert Multiple",
            "description": "Schema for inserting data table rows",
            "type": "array",
            "items": {
                "$ref": "#/definitions/dataTableRowInsertUpdate"
            }
        },
        "dataTableRowInsert": {
            "title": "Data Table Row Insert",
            "description": "Schema for inserting a data table row or rows",
            "oneOf": [
                {
                    "$ref": "#/definitions/dataTableRowInsertUpdate"
                },
                {
                    "$ref": "#/definitions/dataTableRowInMultiple"
                }
            ]
        },
        "dataTableRowInsertResult": {
            "title": "Data Table Row Insert Result",
            "description": "Schema for a the result of a single or multiple row insert",
            "oneOf": [
                {
                    "$ref": "#/definitions/dataTableRow"
                },
                {
                    "type": "object",
                    "properties": {
                        "createdAt": {
                            "$ref": "#/definitions/common/date"
                        },
                        "count": {
                            "type": "number"
                        },
                        "rowIds": {
                            "$ref": "#/definitions/common/objectIds"
                        }
                    }
                }
            ]
        },
        "dataTableRowInsertUpdate": {
            "title": "Data Table Row Insert Update",
            "description": "Schema for inserting or updating a data table row",
            "type": "object",
            "patternProperties": {
                "^[0-9a-zA-Z_-]{1,255}$": {
                    "type": [
                        "string",
                        "number",
                        "boolean",
                        "null"
                    ]
                }
            },
            "additionalProperties": false
        },
        "dataTableRows": {
            "title": "Data Table Rows",
            "description": "Schema for a collection of Data Table Rows",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dataTableRow"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "sortColumn": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                },
                "dataTableId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "query": {
                    "type": "object"
                }
            }
        },
        "dataTableRowsDelete": {
            "title": "Data Table Rows Delete",
            "description": "Schema for response to data table rows removal",
            "type": "object",
            "properties": {
                "removed": {
                    "type": "Number"
                }
            }
        },
        "dataTableRowsExport": {
            "title": "Data Table Rows Export",
            "description": "Schema for the body of a data table export",
            "type": "object",
            "properties": {
                "email": {
                    "$ref": "#/definitions/common/email"
                },
                "query": {
                    "$ref": "#/definitions/advancedQuery"
                },
                "queryOptions": {
                    "type": "object",
                    "properties": {
                        "sortDirection": {
                            "$ref": "#/definitions/common/sortDirection"
                        },
                        "limit": {
                            "type": "number"
                        },
                        "sortColumn": {
                            "type": "string"
                        },
                        "offset": {
                            "type": "number"
                        }
                    }
                }
            },
            "additionalProperties": false
        },
        "dataTables": {
            "title": "Data Tables",
            "description": "Schema for a collection of Data Tables",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dataTable"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "filter": {
                    "type": "string"
                },
                "filterField": {
                    "type": "string"
                },
                "sortField": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                }
            }
        },
        "device": {
            "title": "Device",
            "description": "Schema for a single Device",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "deviceId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "tags": {
                    "$ref": "#/definitions/common/tagsRequired"
                },
                "attributes": {
                    "$ref": "#/definitions/common/deviceAttributes"
                },
                "deviceClass": {
                    "$ref": "#/definitions/common/deviceClass"
                },
                "gatewayId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "edgeAgentVersion": {
                    "$ref": "#/definitions/common/version"
                },
                "connectionInfo": {
                    "type": "object",
                    "properties": {
                        "time": {
                            "$ref": "#/definitions/common/date"
                        },
                        "connected": {
                            "enum": [
                                1,
                                0,
                                null
                            ]
                        }
                    }
                },
                "parentId": {
                    "$ref": "#/definitions/common/objectIdOrNull"
                },
                "systemInterval": {
                    "$ref": "#/definitions/common/systemInterval"
                },
                "keepDuplicates": {
                    "type": "boolean"
                }
            }
        },
        "deviceClassFilter": {
            "title": "Device Class Filter",
            "description": "Select one or multiple device classes",
            "oneOf": [
                {
                    "$ref": "#/definitions/common/deviceClass"
                },
                {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common/deviceClass"
                    },
                    "additionalProperties": false
                }
            ]
        },
        "deviceCommand": {
            "title": "Device Command",
            "description": "Schema for a command for a single Device",
            "type": "object",
            "properties": {
                "time": {
                    "$ref": "#/definitions/common/timeFormats"
                },
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "payload": {}
            },
            "required": [
                "name"
            ],
            "additionalProperties": false
        },
        "deviceCommands": {
            "title": "Device Commands",
            "description": "Schema for an array of Device Commands",
            "type": "array",
            "items": {
                "$ref": "#/definitions/deviceCommand"
            }
        },
        "deviceConnectionStatus": {
            "title": "Device Connection Status",
            "description": "Schema for the body of a request to set a device's connection status",
            "oneOf": [
                {
                    "title": "Device Connected",
                    "description": "Schema for marking a device as connected",
                    "type": "object",
                    "properties": {
                        "status": {
                            "type": "string",
                            "enum": [
                                "connected"
                            ]
                        },
                        "connectedAt": {
                            "$ref": "#/definitions/common/timeFormats"
                        }
                    },
                    "required": [
                        "status"
                    ],
                    "additionalProperties": false
                },
                {
                    "title": "Device Disconnected",
                    "description": "Schema for marking a device as disconnected",
                    "type": "object",
                    "properties": {
                        "status": {
                            "type": "string",
                            "enum": [
                                "disconnected"
                            ]
                        },
                        "connectedAt": {
                            "$ref": "#/definitions/common/timeFormats"
                        },
                        "disconnectedAt": {
                            "$ref": "#/definitions/common/timeFormats"
                        },
                        "disconnectReason": {
                            "$ref": "#/definitions/common/optMedStr"
                        },
                        "messagesFromClient": {
                            "type": "number"
                        },
                        "messagesToClient": {
                            "type": "number"
                        }
                    },
                    "required": [
                        "status"
                    ],
                    "additionalProperties": false
                }
            ]
        },
        "deviceCredentials": {
            "title": "Device Credentials",
            "description": "Schema for the body of a device authentication request",
            "type": "object",
            "properties": {
                "deviceId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "key": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                },
                "tokenTTL": {
                    "type": "integer",
                    "minimum": 0
                },
                "requestedScopes": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string",
                        "enum": [
                            "all.Device",
                            "all.Device.read",
                            "data.export",
                            "data.timeSeriesQuery",
                            "data.lastValueQuery",
                            "device.commandStream",
                            "device.get",
                            "device.getCompositeState",
                            "device.getState",
                            "device.stateStream",
                            "device.getLogEntries",
                            "device.getCommand",
                            "device.debug",
                            "device.sendState",
                            "device.sendCommand",
                            "device.setConnectionStatus",
                            "devices.get",
                            "devices.sendCommand"
                        ]
                    }
                }
            },
            "required": [
                "deviceId"
            ],
            "additionalProperties": false
        },
        "deviceLog": {
            "title": "Device Log",
            "description": "Log of connection information for a Device",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "connected": {
                        "enum": [
                            1,
                            0
                        ]
                    },
                    "time": {
                        "$ref": "#/definitions/common/date"
                    },
                    "disconnectReason": {
                        "type": "string"
                    },
                    "messagesFromClient": {
                        "type": "number"
                    },
                    "messagesToClient": {
                        "type": "number"
                    }
                }
            }
        },
        "devicePatch": {
            "title": "Device Patch",
            "description": "Schema for the body of a Device modification request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "tags": {
                    "$ref": "#/definitions/common/tagsRequired"
                },
                "attributes": {
                    "$ref": "#/definitions/common/deviceAttributes"
                },
                "deviceClass": {
                    "$ref": "#/definitions/common/deviceClass"
                },
                "gatewayId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "parentId": {
                    "$ref": "#/definitions/common/objectIdOrNull"
                },
                "systemInterval": {
                    "$ref": "#/definitions/common/systemInterval"
                },
                "keepDuplicates": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "devicePost": {
            "title": "Device Post",
            "description": "Schema for the body of a Device creation request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "tags": {
                    "$ref": "#/definitions/common/tagsRequired"
                },
                "attributes": {
                    "$ref": "#/definitions/common/deviceAttributes"
                },
                "deviceClass": {
                    "$ref": "#/definitions/common/deviceClass"
                },
                "gatewayId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "parentId": {
                    "$ref": "#/definitions/common/objectIdOrNull"
                },
                "systemInterval": {
                    "$ref": "#/definitions/common/systemInterval"
                },
                "keepDuplicates": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false,
            "required": [
                "name"
            ]
        },
        "deviceRecipe": {
            "title": "Device Recipe",
            "description": "Schema for a single Device Recipe",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "deviceRecipeId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "deviceName": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "deviceDescription": {
                    "$ref": "#/definitions/common/description"
                },
                "tags": {
                    "$ref": "#/definitions/common/tagsRequired"
                },
                "attributes": {
                    "$ref": "#/definitions/common/deviceAttributes"
                },
                "deviceClass": {
                    "$ref": "#/definitions/common/deviceClass"
                },
                "gatewayId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "parentId": {
                    "$ref": "#/definitions/common/objectIdOrNull"
                },
                "systemInterval": {
                    "$ref": "#/definitions/common/systemInterval"
                },
                "keepDuplicates": {
                    "type": "boolean"
                }
            }
        },
        "deviceRecipeBulkCreate": {
            "title": "Device Recipe Bulk Create",
            "description": "Schema for the result of a bulk Device creation request",
            "type": "object",
            "properties": {
                "created": {
                    "type": "number"
                },
                "failed": {
                    "type": "number"
                },
                "csvResult": {
                    "type": "string"
                }
            }
        },
        "deviceRecipeBulkCreateEnqueued": {
            "title": "Device Recipe Bulk Create Enqueue",
            "description": "Schema for the result of a bulk Device creation request when creating more than 750 devices",
            "type": "object",
            "properties": {
                "jobQueued": {
                    "type": "boolean"
                }
            }
        },
        "deviceRecipeBulkCreatePost": {
            "title": "Device Recipe Bulk Create Post",
            "description": "Schema for the body of a bulk Device creation request",
            "type": "object",
            "properties": {
                "nameColumn": {
                    "type": "string"
                },
                "descriptionColumn": {
                    "type": "string"
                },
                "csv": {
                    "type": "string"
                },
                "makeUniqueKeySecret": {
                    "type": "boolean"
                },
                "email": {
                    "$ref": "#/definitions/common/email"
                }
            },
            "additionalProperties": false,
            "required": [
                "csv"
            ]
        },
        "deviceRecipePatch": {
            "title": "Device Recipe Patch",
            "description": "Schema for the body of a Device Recipe modification request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "deviceName": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "deviceDescription": {
                    "$ref": "#/definitions/common/description"
                },
                "tags": {
                    "$ref": "#/definitions/common/tagsRequired"
                },
                "attributes": {
                    "$ref": "#/definitions/common/deviceAttributes"
                },
                "deviceClass": {
                    "$ref": "#/definitions/common/deviceClass"
                },
                "gatewayId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "parentId": {
                    "$ref": "#/definitions/common/objectIdOrNull"
                },
                "systemInterval": {
                    "$ref": "#/definitions/common/systemInterval"
                },
                "keepDuplicates": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "deviceRecipePost": {
            "title": "Device Recipe Post",
            "description": "Schema for the body of a Device Recipe creation request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "deviceName": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "deviceDescription": {
                    "$ref": "#/definitions/common/description"
                },
                "tags": {
                    "$ref": "#/definitions/common/tagsRequired"
                },
                "attributes": {
                    "$ref": "#/definitions/common/deviceAttributes"
                },
                "deviceClass": {
                    "$ref": "#/definitions/common/deviceClass"
                },
                "gatewayId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "parentId": {
                    "$ref": "#/definitions/common/objectIdOrNull"
                },
                "systemInterval": {
                    "$ref": "#/definitions/common/systemInterval"
                },
                "keepDuplicates": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false,
            "required": [
                "name"
            ]
        },
        "deviceRecipes": {
            "title": "Device Recipes",
            "description": "Schema for a collection of Device Recipes",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/deviceRecipe"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "filter": {
                    "type": "string"
                },
                "filterField": {
                    "type": "string"
                },
                "sortField": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                }
            }
        },
        "deviceState": {
            "title": "Device State",
            "description": "Schema for a single Device state",
            "type": "object",
            "properties": {
                "time": {
                    "$ref": "#/definitions/common/timeFormats"
                },
                "meta": {},
                "data": {
                    "type": "object",
                    "patternProperties": {
                        "^[0-9a-zA-Z_-]{1,255}$": {
                            "type": [
                                "number",
                                "string",
                                "boolean"
                            ]
                        }
                    },
                    "additionalProperties": false
                },
                "flowVersion": {
                    "$ref": "#/definitions/common/name"
                }
            },
            "required": [
                "data"
            ],
            "additionalProperties": false
        },
        "deviceStateOrStates": {
            "title": "Device State or States",
            "description": "Schema for a single device state or an array of device states",
            "oneOf": [
                {
                    "$ref": "#/definitions/deviceState"
                },
                {
                    "$ref": "#/definitions/deviceStates"
                }
            ]
        },
        "deviceStates": {
            "title": "Device States",
            "description": "Schema for an array of Device states",
            "type": "array",
            "items": {
                "$ref": "#/definitions/deviceState"
            }
        },
        "deviceTagFilter": {
            "title": "Device Tag Filter",
            "description": "Array of Tags for filtering devices. Tag keys and tag values are optional.",
            "type": "array",
            "items": {
                "$ref": "#/definitions/common/tagOptional"
            },
            "maxItems": 100
        },
        "devices": {
            "title": "Devices",
            "description": "Schema for a collection of Devices",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/device"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "filter": {
                    "type": "string"
                },
                "filterField": {
                    "type": "string"
                },
                "sortField": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "deviceClass": {
                    "$ref": "#/definitions/common/deviceClass"
                },
                "tagFilter": {
                    "$ref": "#/definitions/deviceTagFilter"
                },
                "parentId": {
                    "$ref": "#/definitions/common/objectIdOrNull"
                },
                "query": {
                    "type": "object"
                }
            }
        },
        "devicesPatch": {
            "title": "Devices Patch",
            "description": "Schema for the body of a Devices modification request",
            "type": "object",
            "properties": {
                "updateFields": {
                    "$ref": "#/definitions/devicePatch"
                },
                "deviceIds": {
                    "$ref": "#/definitions/common/objectIds"
                }
            },
            "additionalProperties": false,
            "required": [
                "updateFields",
                "deviceIds"
            ]
        },
        "disableTwoFactorAuth": {
            "title": "Disable Two Factor Auth",
            "description": "Schema for the body of a request to disable two factor auth",
            "type": "object",
            "properties": {
                "twoFactorCode": {
                    "$ref": "#/definitions/userCredentials/properties/twoFactorCode"
                },
                "password": {
                    "$ref": "#/definitions/common/password"
                }
            },
            "required": [
                "password",
                "twoFactorCode"
            ],
            "additionalProperties": false
        },
        "edgeDeployment": {
            "title": "Edge Deployment",
            "description": "Schema for a single deployment of an edge workflow to an edge device",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "edgeDeploymentId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "deviceId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "deviceName": {
                    "$ref": "#/definitions/common/name"
                },
                "flowId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "flowName": {
                    "$ref": "#/definitions/common/name"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "currentVersion": {
                    "$ref": "#/definitions/common/nullableName"
                },
                "desiredVersion": {
                    "$ref": "#/definitions/common/nullableName"
                },
                "logs": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "sourceType": {
                                "$ref": "#/definitions/common/sourceType"
                            },
                            "sourceId": {
                                "$ref": "#/definitions/common/objectId"
                            },
                            "date": {
                                "$ref": "#/definitions/common/date"
                            },
                            "changeType": {
                                "type": "string",
                                "enum": [
                                    "current",
                                    "desired"
                                ]
                            },
                            "newValue": {
                                "$ref": "#/definitions/common/nullableName"
                            },
                            "previousValue": {
                                "$ref": "#/definitions/common/nullableName"
                            },
                            "attemptedValue": {
                                "$ref": "#/definitions/common/nullableName"
                            },
                            "error": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "edgeDeploymentRelease": {
            "title": "Edge Deployment Release",
            "description": "Schema for deploying an edge workflow to one or more edge devices",
            "type": "object",
            "properties": {
                "flowId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "version": {
                    "$ref": "#/definitions/common/nullableName"
                },
                "deviceIds": {
                    "$ref": "#/definitions/common/objectIds"
                },
                "deviceTags": {
                    "$ref": "#/definitions/common/tagsOptional"
                }
            },
            "additionalProperties": false,
            "required": [
                "flowId",
                "version"
            ]
        },
        "edgeDeploymentRemove": {
            "title": "Edge Deployment Remove",
            "description": "Schema for removing edge deployments. Can remove a specific workflow from a specific device, can remove all workflows from a specific device, or can remove a specific workflow from all devices.",
            "type": "object",
            "properties": {
                "flowId": {
                    "$ref": "#/definitions/common/nullableObjectId"
                },
                "deviceId": {
                    "$ref": "#/definitions/common/nullableObjectId"
                }
            },
            "additionalProperties": false,
            "required": [
                "flowId",
                "deviceId"
            ]
        },
        "edgeDeploymentReplace": {
            "title": "Edge Deployment Replace",
            "description": "Schema for replacing a deployment of a workflow version with a different workflow version",
            "type": "object",
            "properties": {
                "flowId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "oldVersion": {
                    "$ref": "#/definitions/common/name"
                },
                "newVersion": {
                    "$ref": "#/definitions/common/nullableName"
                }
            },
            "additionalProperties": false,
            "required": [
                "flowId",
                "oldVersion",
                "newVersion"
            ]
        },
        "edgeDeployments": {
            "title": "Edge Deployments",
            "description": "Schema for a collection of Edge Deployments",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/edgeDeployment"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "deviceId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "flowId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "version": {
                    "$ref": "#/definitions/common/name"
                }
            }
        },
        "emailVerificationVerify": {
            "title": "Email Verification Verify",
            "description": "Schema for the body of a request verifying an email",
            "type": "object",
            "properties": {
                "email": {
                    "$ref": "#/definitions/common/email"
                },
                "token": {
                    "$ref": "#/definitions/common/token"
                }
            },
            "required": [
                "email",
                "token"
            ],
            "additionalProperties": false
        },
        "enableTwoFactorAuth": {
            "title": "Enable Two Factor Auth",
            "description": "Schema for the body of a request to enable two factor auth",
            "type": "object",
            "properties": {
                "twoFactorAuthKey": {
                    "type": "string",
                    "minLength": 52,
                    "maxLength": 52
                },
                "password": {
                    "$ref": "#/definitions/common/password"
                }
            },
            "required": [
                "password",
                "twoFactorAuthKey"
            ],
            "additionalProperties": false
        },
        "error": {
            "title": "Error",
            "description": "Schema for errors returned by the API",
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "event": {
            "title": "Event",
            "description": "Schema for a single Event",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "eventId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "sourceType": {
                    "$ref": "#/definitions/common/eventSourceType"
                },
                "sourceId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "sourceName": {
                    "$ref": "#/definitions/common/name"
                },
                "level": {
                    "type": "string",
                    "enum": [
                        "info",
                        "warning",
                        "error",
                        "critical"
                    ]
                },
                "state": {
                    "$ref": "#/definitions/common/eventState"
                },
                "subject": {
                    "$ref": "#/definitions/common/name"
                },
                "message": {
                    "$ref": "#/definitions/common/description"
                },
                "data": {},
                "deviceId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "deviceName": {
                    "$ref": "#/definitions/common/name"
                },
                "eventTags": {
                    "$ref": "#/definitions/common/objectTags"
                },
                "updates": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "sourceType": {
                                "$ref": "#/definitions/common/eventSourceType"
                            },
                            "sourceId": {
                                "$ref": "#/definitions/common/objectId"
                            },
                            "sourceName": {
                                "$ref": "#/definitions/common/name"
                            },
                            "creationDate": {
                                "$ref": "#/definitions/common/date"
                            },
                            "comment": {
                                "$ref": "#/definitions/common/description"
                            },
                            "data": {},
                            "stateChange": {
                                "type": "object",
                                "properties": {
                                    "old": {
                                        "$ref": "#/definitions/common/eventState"
                                    },
                                    "new": {
                                        "$ref": "#/definitions/common/eventState"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "eventPatch": {
            "title": "Event Patch",
            "description": "Schema for the body of an Event modification request",
            "type": "object",
            "properties": {
                "state": {
                    "$ref": "#/definitions/common/eventState"
                },
                "comment": {
                    "$ref": "#/definitions/common/description"
                },
                "data": {},
                "eventTags": {
                    "$ref": "#/definitions/common/objectTags"
                }
            },
            "additionalProperties": false
        },
        "eventPost": {
            "title": "Event Post",
            "description": "Schema for the body of an Event creation request",
            "type": "object",
            "properties": {
                "level": {
                    "$ref": "#/definitions/event/properties/level"
                },
                "state": {
                    "$ref": "#/definitions/common/eventState"
                },
                "subject": {
                    "$ref": "#/definitions/common/name"
                },
                "message": {
                    "$ref": "#/definitions/common/description"
                },
                "data": {},
                "deviceId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "eventTags": {
                    "$ref": "#/definitions/common/objectTags"
                }
            },
            "required": [
                "level",
                "subject"
            ],
            "additionalProperties": false
        },
        "eventTagsSummary": {
            "title": "Event Tags Summary",
            "description": "Summary of all unique event tags and values in an application.",
            "type": "object",
            "properties": {
                "eventTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common/tagRequired"
                    }
                }
            }
        },
        "events": {
            "title": "Events",
            "description": "Schema for a collection of Events",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/event"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "filter": {
                    "type": "string"
                },
                "filterField": {
                    "type": "string"
                },
                "sortField": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                },
                "state": {
                    "$ref": "#/definitions/common/eventState"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "query": {
                    "type": "object"
                }
            }
        },
        "eventsDeleted": {
            "title": "Events Deleted",
            "description": "Schema for response to events removal",
            "type": "object",
            "properties": {
                "removed": {
                    "type": "Number"
                }
            }
        },
        "eventsExport": {
            "title": "Event Export Options",
            "description": "Export options for events",
            "type": "object",
            "properties": {
                "email": {
                    "$ref": "#/definitions/common/email"
                },
                "query": {
                    "$ref": "#/definitions/advancedEventQuery"
                }
            },
            "additionalProperties": false
        },
        "experienceBootstrapOptions": {
            "title": "Experience Bootstrap Options",
            "description": "The body of an experience bootstrap request",
            "type": "object",
            "properties": {
                "replaceExisting": {
                    "type": "boolean",
                    "default": false
                },
                "createUsers": {
                    "type": "boolean",
                    "default": true
                },
                "createGroups": {
                    "type": "boolean",
                    "default": true
                },
                "slug": {
                    "$ref": "#/definitions/common/slug"
                }
            },
            "additionalProperties": false
        },
        "experienceBootstrapResult": {
            "title": "Experience Bootstrap Result",
            "description": "The result of an experience bootstrap request",
            "type": "object",
            "properties": {
                "resourceSuffix": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            },
            "additionalProperties": false
        },
        "experienceDomain": {
            "title": "Experience Domain",
            "description": "Schema for a single Experience Domain",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "experienceDomainId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "sslCert": {
                    "$ref": "#/definitions/common/certificateString"
                },
                "sslBundle": {
                    "$ref": "#/definitions/common/certificateString"
                },
                "domainName": {
                    "$ref": "#/definitions/common/domainName"
                },
                "version": {
                    "$ref": "#/definitions/common/name"
                }
            }
        },
        "experienceDomainPatch": {
            "title": "Experience Domain Patch",
            "description": "Schema for the body of an Experience Domain modification request",
            "type": "object",
            "properties": {
                "sslKey": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/experienceDomainPost/properties/sslKey"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "sslCert": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/experienceDomain/properties/sslCert"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "sslBundle": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/experienceDomain/properties/sslBundle"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "version": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/common/name"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "domainName": {
                    "$ref": "#/definitions/experienceDomain/properties/domainName"
                }
            },
            "additionalProperties": false
        },
        "experienceDomainPost": {
            "title": "Experience Domain Post",
            "description": "Schema for the body of an Experience Domain creation request",
            "type": "object",
            "properties": {
                "sslKey": {
                    "type": "string",
                    "maxLength": 32767,
                    "minLength": 50
                },
                "sslCert": {
                    "$ref": "#/definitions/experienceDomain/properties/sslCert"
                },
                "sslBundle": {
                    "$ref": "#/definitions/experienceDomain/properties/sslBundle"
                },
                "domainName": {
                    "$ref": "#/definitions/experienceDomain/properties/domainName"
                },
                "version": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/common/name"
                        },
                        {
                            "type": "null"
                        }
                    ]
                }
            },
            "additionalProperties": false,
            "required": [
                "domainName"
            ]
        },
        "experienceDomains": {
            "title": "Experience Domains",
            "description": "Schema for a collection of Experience Domains",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/experienceDomain"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                }
            }
        },
        "experienceEndpoint": {
            "title": "Experience Endpoint",
            "description": "Schema for a single Experience Endpoint",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "experienceEndpointId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "createdById": {
                    "$ref": "#/definitions/common/objectId"
                },
                "createdByType": {
                    "$ref": "#/definitions/common/expSourceType"
                },
                "lastUpdatedById": {
                    "$ref": "#/definitions/common/objectId"
                },
                "lastUpdatedByType": {
                    "$ref": "#/definitions/common/expSourceType"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "route": {
                    "$ref": "#/definitions/common/reqMedStr"
                },
                "enabled": {
                    "type": "boolean"
                },
                "method": {
                    "type": "string",
                    "enum": [
                        "delete",
                        "get",
                        "options",
                        "patch",
                        "post",
                        "put"
                    ]
                },
                "access": {
                    "type": "string",
                    "enum": [
                        "public",
                        "authenticated",
                        "group"
                    ]
                },
                "endpointTags": {
                    "$ref": "#/definitions/common/objectTags"
                },
                "staticReply": {
                    "$ref": "#/definitions/common/staticReply"
                },
                "unauthorizedReply": {
                    "$ref": "#/definitions/common/staticReply"
                },
                "experienceGroups": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "$ref": "#/definitions/common/name"
                            },
                            "id": {
                                "$ref": "#/definitions/common/objectId"
                            }
                        }
                    }
                }
            }
        },
        "experienceEndpointPatch": {
            "title": "Experience Endpoint Patch",
            "description": "Schema for the body of an Experience Endpoint modification request",
            "type": "object",
            "properties": {
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "route": {
                    "$ref": "#/definitions/common/reqMedStr"
                },
                "enabled": {
                    "type": "boolean"
                },
                "method": {
                    "$ref": "#/definitions/experienceEndpoint/properties/method"
                },
                "access": {
                    "$ref": "#/definitions/experienceEndpoint/properties/access"
                },
                "endpointTags": {
                    "$ref": "#/definitions/experienceEndpoint/properties/endpointTags"
                },
                "experienceGroupIds": {
                    "$ref": "#/definitions/common/objectIds"
                },
                "staticReply": {
                    "$ref": "#/definitions/common/staticReply"
                },
                "unauthorizedReply": {
                    "$ref": "#/definitions/common/staticReply"
                }
            },
            "additionalProperties": false
        },
        "experienceEndpointPost": {
            "title": "Experience Endpoint Post",
            "description": "Schema for the body of an Experience Endpoint creation request",
            "type": "object",
            "properties": {
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "route": {
                    "$ref": "#/definitions/common/reqMedStr"
                },
                "enabled": {
                    "type": "boolean"
                },
                "method": {
                    "$ref": "#/definitions/experienceEndpoint/properties/method"
                },
                "access": {
                    "$ref": "#/definitions/experienceEndpoint/properties/access"
                },
                "endpointTags": {
                    "$ref": "#/definitions/experienceEndpoint/properties/endpointTags"
                },
                "experienceGroupIds": {
                    "$ref": "#/definitions/common/objectIds"
                },
                "staticReply": {
                    "$ref": "#/definitions/common/staticReply"
                },
                "unauthorizedReply": {
                    "$ref": "#/definitions/common/staticReply"
                }
            },
            "additionalProperties": false,
            "required": [
                "route",
                "method"
            ]
        },
        "experienceEndpointStats": {
            "title": "Experience Endpoint Stats",
            "description": "Schema for stats for an experience's endpoints",
            "type": "object",
            "patternProperties": {
                ".*": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "time": {
                                "$ref": "#/definitions/common/date"
                            },
                            "count": {
                                "type": "number"
                            }
                        }
                    }
                }
            }
        },
        "experienceEndpoints": {
            "title": "Experience Endpoints",
            "description": "Schema for a collection of Experience Endpoints",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/experienceEndpoint"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "filter": {
                    "type": "string"
                },
                "filterField": {
                    "type": "string"
                },
                "sortField": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "experienceGroupId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "notFoundRequestCount": {
                    "type": "number"
                }
            }
        },
        "experienceGroup": {
            "title": "Experience Group",
            "description": "Schema for a single Experience Group",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "experienceGroupId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "experienceUserIds": {
                    "$ref": "#/definitions/common/objectIds"
                },
                "experienceEndpointIds": {
                    "$ref": "#/definitions/common/objectIds"
                },
                "groupTags": {
                    "$ref": "#/definitions/common/objectTags"
                },
                "deviceIds": {
                    "$ref": "#/definitions/common/objectIds"
                },
                "deviceTags": {
                    "$ref": "#/definitions/common/tagsOptional"
                },
                "deviceQueryJson": {
                    "$ref": "#/definitions/common/queryJsonOrNull"
                },
                "parentId": {
                    "$ref": "#/definitions/common/objectIdOrNull"
                }
            }
        },
        "experienceGroupPatch": {
            "title": "Experience Group Patch",
            "description": "Schema for the body of an Experience Group modification request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "experienceUserIds": {
                    "$ref": "#/definitions/common/objectIds"
                },
                "experienceEndpointIds": {
                    "$ref": "#/definitions/common/objectIds"
                },
                "groupTags": {
                    "$ref": "#/definitions/experienceGroup/properties/groupTags"
                },
                "deviceIds": {
                    "$ref": "#/definitions/common/objectIds"
                },
                "deviceTags": {
                    "$ref": "#/definitions/common/tagsOptional"
                },
                "deviceQueryJson": {
                    "$ref": "#/definitions/common/queryJsonOrNull"
                },
                "parentId": {
                    "$ref": "#/definitions/common/objectIdOrNull"
                }
            },
            "additionalProperties": false
        },
        "experienceGroupPost": {
            "title": "Experience Group Post",
            "description": "Schema for the body of an Experience Group creation request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "experienceUserIds": {
                    "$ref": "#/definitions/common/objectIds"
                },
                "experienceEndpointIds": {
                    "$ref": "#/definitions/common/objectIds"
                },
                "groupTags": {
                    "$ref": "#/definitions/experienceGroup/properties/groupTags"
                },
                "deviceIds": {
                    "$ref": "#/definitions/common/objectIds"
                },
                "deviceTags": {
                    "$ref": "#/definitions/common/tagsOptional"
                },
                "deviceQueryJson": {
                    "$ref": "#/definitions/common/queryJsonOrNull"
                },
                "parentId": {
                    "$ref": "#/definitions/common/objectIdOrNull"
                }
            },
            "additionalProperties": false,
            "required": [
                "name"
            ]
        },
        "experienceGroups": {
            "title": "Experience Groups",
            "description": "Schema for a collection of Experience Groups",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/experienceGroup"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "filter": {
                    "type": "string"
                },
                "filterField": {
                    "type": "string"
                },
                "sortField": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                }
            }
        },
        "experienceLinkedResources": {
            "title": "Experience Linked Resources",
            "description": "The body of an experience linked resources response",
            "type": "object",
            "properties": {
                "experienceViews": {
                    "$ref": "#/definitions/experienceViews"
                },
                "experienceEndpoints": {
                    "$ref": "#/definitions/experienceEndpoints"
                },
                "flows": {
                    "$ref": "#/definitions/flows"
                },
                "flowVersions": {
                    "$ref": "#/definitions/flowVersions"
                }
            },
            "additionalProperties": false
        },
        "experienceSlug": {
            "title": "Experience Slug",
            "description": "Schema for a single Experience Slug",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "experienceSlugId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "slug": {
                    "$ref": "#/definitions/common/slug"
                },
                "version": {
                    "$ref": "#/definitions/common/name"
                }
            }
        },
        "experienceSlugPatch": {
            "title": "Experience Slug Patch",
            "description": "Schema for the body of an Experience Slug modification request",
            "type": "object",
            "properties": {
                "version": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/common/name"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "slug": {
                    "$ref": "#/definitions/common/slug"
                }
            },
            "additionalProperties": false
        },
        "experienceSlugPost": {
            "title": "Experience Slug Post",
            "description": "Schema for the body of an Experience Slug creation request",
            "type": "object",
            "properties": {
                "version": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/common/name"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "slug": {
                    "$ref": "#/definitions/common/slug"
                }
            },
            "additionalProperties": false,
            "required": [
                "slug"
            ]
        },
        "experienceSlugs": {
            "title": "Experience Slugs",
            "description": "Schema for a collection of Experience Slugs",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/experienceSlug"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                }
            }
        },
        "experienceUser": {
            "title": "Experience User",
            "description": "Schema for a single Experience User",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "experienceUserId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "passwordLastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "lastLogin": {
                    "$ref": "#/definitions/common/date"
                },
                "email": {
                    "$ref": "#/definitions/common/email"
                },
                "firstName": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "lastName": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "avatarUrl": {
                    "type": "string",
                    "format": "url"
                },
                "tokenCutoff": {
                    "$ref": "#/definitions/common/date"
                },
                "userTags": {
                    "$ref": "#/definitions/common/objectTags"
                },
                "experienceGroups": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "$ref": "#/definitions/common/name"
                            },
                            "id": {
                                "$ref": "#/definitions/common/objectId"
                            }
                        }
                    }
                }
            }
        },
        "experienceUserPatch": {
            "title": "Experience User Patch",
            "description": "Schema for the body of an Experience User modification request",
            "type": "object",
            "properties": {
                "email": {
                    "$ref": "#/definitions/common/email"
                },
                "firstName": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "lastName": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "password": {
                    "$ref": "#/definitions/common/password"
                },
                "tokenCutoff": {
                    "$ref": "#/definitions/common/date"
                },
                "userTags": {
                    "$ref": "#/definitions/experienceUser/properties/userTags"
                },
                "experienceGroupIds": {
                    "$ref": "#/definitions/common/objectIds"
                }
            },
            "additionalProperties": false
        },
        "experienceUserPost": {
            "title": "Experience User Post",
            "description": "Schema for the body of an Experience User creation request",
            "type": "object",
            "properties": {
                "email": {
                    "$ref": "#/definitions/common/email"
                },
                "firstName": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "lastName": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "password": {
                    "$ref": "#/definitions/common/password"
                },
                "tokenCutoff": {
                    "$ref": "#/definitions/common/date"
                },
                "userTags": {
                    "$ref": "#/definitions/experienceUser/properties/userTags"
                },
                "experienceGroupIds": {
                    "$ref": "#/definitions/common/objectIds"
                }
            },
            "additionalProperties": false,
            "required": [
                "email",
                "password"
            ]
        },
        "experienceUsers": {
            "title": "Experience Users",
            "description": "Schema for a collection of Experience Users",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/experienceUser"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "filter": {
                    "type": "string"
                },
                "filterField": {
                    "type": "string"
                },
                "sortField": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "experienceGroupId": {
                    "$ref": "#/definitions/common/objectId"
                }
            }
        },
        "experienceVersion": {
            "title": "Experience Version",
            "description": "Schema for a single Experience Version",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "experienceVersionId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "createdById": {
                    "$ref": "#/definitions/common/objectId"
                },
                "createdByType": {
                    "$ref": "#/definitions/common/expSourceType"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "endpointDefaultCors": {
                    "type": "boolean"
                },
                "version": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "attachedDomains": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "domainName": {
                                "$ref": "#/definitions/common/domainName"
                            },
                            "id": {
                                "$ref": "#/definitions/common/objectId"
                            }
                        }
                    }
                },
                "attachedSlugs": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "slug": {
                                "type": "string"
                            },
                            "id": {
                                "$ref": "#/definitions/common/objectId"
                            }
                        }
                    }
                }
            }
        },
        "experienceVersionPatch": {
            "title": "Experience Version Patch",
            "description": "Schema for the body of an Experience Version modification request",
            "type": "object",
            "properties": {
                "endpointDefaultCors": {
                    "type": "boolean"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "sourceVersionIdOrName": {
                    "$ref": "#/definitions/common/name"
                }
            },
            "additionalProperties": false
        },
        "experienceVersionPost": {
            "title": "Experience Version Post",
            "description": "Schema for the body of an Experience Version creation request",
            "type": "object",
            "properties": {
                "version": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "domainIds": {
                    "$ref": "#/definitions/common/objectIds"
                },
                "slugIds": {
                    "$ref": "#/definitions/common/objectIds"
                }
            },
            "additionalProperties": false,
            "required": [
                "version"
            ]
        },
        "experienceVersions": {
            "title": "Experience Versions",
            "description": "Schema for a collection of Experience Versions",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/experienceVersion"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                }
            }
        },
        "experienceView": {
            "title": "Experience View",
            "description": "Schema for a single Experience View",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "experienceViewId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "createdById": {
                    "$ref": "#/definitions/common/objectId"
                },
                "createdByType": {
                    "$ref": "#/definitions/common/expSourceType"
                },
                "lastUpdatedById": {
                    "$ref": "#/definitions/common/objectId"
                },
                "lastUpdatedByType": {
                    "$ref": "#/definitions/common/expSourceType"
                },
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "viewType": {
                    "type": "string",
                    "enum": [
                        "layout",
                        "page",
                        "component"
                    ]
                },
                "layoutId": {
                    "$ref": "#/definitions/common/nullableObjectId"
                },
                "layoutName": {
                    "$ref": "#/definitions/common/name"
                },
                "body": {
                    "type": "string",
                    "maxLength": 131072,
                    "minLength": 1
                },
                "viewTags": {
                    "$ref": "#/definitions/common/objectTags"
                }
            }
        },
        "experienceViewPatch": {
            "title": "Experience View Patch",
            "description": "Schema for the body of an Experience View modification request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "layoutId": {
                    "$ref": "#/definitions/common/nullableObjectId"
                },
                "body": {
                    "$ref": "#/definitions/experienceView/properties/body"
                },
                "viewTags": {
                    "$ref": "#/definitions/experienceView/properties/viewTags"
                }
            },
            "additionalProperties": false
        },
        "experienceViewPost": {
            "title": "Experience View Post",
            "description": "Schema for the body of an Experience View creation request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "viewType": {
                    "$ref": "#/definitions/experienceView/properties/viewType"
                },
                "layoutId": {
                    "$ref": "#/definitions/common/nullableObjectId"
                },
                "body": {
                    "$ref": "#/definitions/experienceView/properties/body"
                },
                "viewTags": {
                    "$ref": "#/definitions/experienceView/properties/viewTags"
                }
            },
            "additionalProperties": false,
            "required": [
                "name",
                "viewType",
                "body"
            ]
        },
        "experienceViews": {
            "title": "Experience Views",
            "description": "Schema for a collection of Experience Views",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/experienceView"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "filter": {
                    "type": "string"
                },
                "filterField": {
                    "type": "string"
                },
                "sortField": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "viewType": {
                    "type": "string",
                    "enum": [
                        "layout",
                        "page",
                        "component"
                    ]
                }
            }
        },
        "file": {
            "title": "File Schema",
            "description": "Schema for a single file",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "authorId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "authorType": {
                    "$ref": "#/definitions/common/sourceType"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "pending",
                        "moving",
                        "deleting",
                        "completed"
                    ]
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1024
                },
                "parentDirectory": {
                    "type": "string",
                    "maxLength": 1024
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "file",
                        "directory"
                    ]
                },
                "fileSize": {
                    "type": "number"
                },
                "s3etag": {
                    "type": "string"
                },
                "contentType": {
                    "type": "string",
                    "maxLength": 1024
                },
                "fileDimensions": {
                    "type": "object",
                    "properties": {
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        }
                    }
                },
                "moveIntoId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "filePatch": {
            "title": "File Patch",
            "description": "Schema to patch a file",
            "type": "object",
            "properties": {
                "fileSize": {
                    "type": "number"
                },
                "contentType": {
                    "type": "string",
                    "maxLength": 1024
                },
                "fileDimensions": {
                    "type": "object",
                    "properties": {
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        }
                    }
                }
            }
        },
        "filePost": {
            "title": "File Post",
            "description": "Schema to create a single file or directory",
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1024
                },
                "parentDirectory": {
                    "type": "string",
                    "maxLength": 1024
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "file",
                        "directory"
                    ]
                },
                "fileSize": {
                    "type": "number"
                },
                "contentType": {
                    "type": "string",
                    "maxLength": 1024
                },
                "fileDimensions": {
                    "type": "object",
                    "properties": {
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        }
                    }
                }
            }
        },
        "fileUploadPostResponse": {
            "title": "File Upload Post Response",
            "description": "Schema to upload the file to s3",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "authorId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "authorType": {
                    "$ref": "#/definitions/common/sourceType"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "pending",
                        "moving",
                        "deleting",
                        "completed"
                    ]
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1024
                },
                "parentDirectory": {
                    "type": "string",
                    "maxLength": 1024
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "file",
                        "directory"
                    ]
                },
                "fileSize": {
                    "type": "number"
                },
                "contentType": {
                    "type": "string",
                    "maxLength": 1024
                },
                "fileDimensions": {
                    "type": "object",
                    "properties": {
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        }
                    }
                },
                "upload": {
                    "$ref": "#/definitions/common/upload"
                }
            }
        },
        "files": {
            "title": "Files Schema",
            "description": "Schema for a collection of files",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/file"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "filter": {
                    "type": "string"
                },
                "filterField": {
                    "type": "string"
                },
                "sortField": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                }
            }
        },
        "flow": {
            "title": "Workflow",
            "description": "Schema for a single Workflow",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "flowId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "iconData": {
                    "$ref": "#/definitions/common/imageDataUri"
                },
                "enabled": {
                    "type": "boolean"
                },
                "defaultVersionId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "minimumAgentVersion": {
                    "$ref": "#/definitions/common/version"
                },
                "flowClass": {
                    "type": "string",
                    "enum": [
                        "cloud",
                        "edge",
                        "experience",
                        "customNode"
                    ]
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/common/triggers/basic"
                            },
                            {
                                "$ref": "#/definitions/common/triggers/dataTable"
                            },
                            {
                                "$ref": "#/definitions/common/triggers/deviceIdsTags"
                            },
                            {
                                "$ref": "#/definitions/common/triggers/deviceIdsTagsInactivity"
                            },
                            {
                                "$ref": "#/definitions/common/triggers/endpoint"
                            },
                            {
                                "$ref": "#/definitions/common/triggers/event"
                            },
                            {
                                "$ref": "#/definitions/common/triggers/fileTail"
                            },
                            {
                                "$ref": "#/definitions/common/triggers/fileWatch"
                            },
                            {
                                "$ref": "#/definitions/common/triggers/flowError"
                            },
                            {
                                "$ref": "#/definitions/common/triggers/opcua"
                            },
                            {
                                "$ref": "#/definitions/common/triggers/redis"
                            },
                            {
                                "$ref": "#/definitions/common/triggers/serial"
                            },
                            {
                                "$ref": "#/definitions/common/triggers/timer"
                            },
                            {
                                "$ref": "#/definitions/common/triggers/virtualButton"
                            }
                        ]
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "$ref": "#/definitions/common/optMedStr"
                            },
                            "type": {
                                "$ref": "#/definitions/common/reqMedStr"
                            },
                            "config": {
                                "type": "object"
                            },
                            "meta": {
                                "type": "object"
                            },
                            "outputIds": {
                                "$ref": "#/definitions/common/outputIds"
                            }
                        },
                        "additionalProperties": false,
                        "required": [
                            "type"
                        ]
                    }
                },
                "customNodeConfig": {
                    "type": "object",
                    "properties": {
                        "outputCount": {
                            "type": "number",
                            "enum": [
                                1,
                                2
                            ]
                        },
                        "resultMode": {
                            "type": "string",
                            "enum": [
                                "optional",
                                "required",
                                "none"
                            ]
                        },
                        "resultDescription": {
                            "$ref": "#/definitions/common/description"
                        },
                        "fields": {
                            "type": "array",
                            "maxItems": 100,
                            "items": {
                                "$ref": "#/definitions/common/customNodeFieldConfig"
                            }
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "outputCount",
                        "resultMode",
                        "fields"
                    ]
                },
                "customNodeSupports": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "cloud"
                        ]
                    }
                },
                "customNodeUseCount": {
                    "type": "number"
                },
                "globals": {
                    "$ref": "#/definitions/common/globals"
                },
                "deletedInDevelop": {
                    "type": "boolean"
                },
                "stats": {
                    "type": "object",
                    "properties": {
                        "runCount": {
                            "type": "number"
                        },
                        "errorCount": {
                            "type": "number"
                        },
                        "byVersion": {
                            "type": "object",
                            "patternProperties": {
                                ".*": {
                                    "type": "object",
                                    "properties": {
                                        "runCount": {
                                            "type": "number"
                                        },
                                        "errorCount": {
                                            "type": "number"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "flowLog": {
            "title": "Workflow Log",
            "description": "Log of aggregated workflow run information",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "flowVersionId": {
                        "type": "string"
                    },
                    "time": {
                        "$ref": "#/definitions/common/date"
                    },
                    "pathsFailed": {
                        "type": "number"
                    },
                    "pathsCompleted": {
                        "type": "number"
                    },
                    "runCount": {
                        "type": "number"
                    },
                    "wallTime": {
                        "type": "number"
                    },
                    "errors": {
                        "type": "array",
                        "items": {}
                    }
                }
            }
        },
        "flowPatch": {
            "title": "Workflow Patch",
            "description": "Schema for the body of a Workflow modification request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "iconData": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/common/imageDataUri"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "enabled": {
                    "type": "boolean"
                },
                "defaultVersionId": {
                    "$ref": "#/definitions/common/objectIdOrNull"
                },
                "triggers": {
                    "$ref": "#/definitions/flow/properties/triggers"
                },
                "nodes": {
                    "$ref": "#/definitions/flow/properties/nodes"
                },
                "globals": {
                    "$ref": "#/definitions/common/globals"
                },
                "minimumAgentVersion": {
                    "$ref": "#/definitions/common/version"
                },
                "customNodeConfig": {
                    "$ref": "#/definitions/flow/properties/customNodeConfig"
                }
            },
            "additionalProperties": false
        },
        "flowPost": {
            "title": "Workflow Post",
            "description": "Schema for the body of a Workflow creation request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "iconData": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/common/imageDataUri"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "enabled": {
                    "type": "boolean"
                },
                "triggers": {
                    "$ref": "#/definitions/flow/properties/triggers"
                },
                "nodes": {
                    "$ref": "#/definitions/flow/properties/nodes"
                },
                "globals": {
                    "$ref": "#/definitions/common/globals"
                },
                "flowClass": {
                    "$ref": "#/definitions/flow/properties/flowClass"
                },
                "minimumAgentVersion": {
                    "$ref": "#/definitions/common/version"
                },
                "customNodeConfig": {
                    "$ref": "#/definitions/flow/properties/customNodeConfig"
                },
                "customNodeSupports": {
                    "$ref": "#/definitions/flow/properties/customNodeSupports"
                }
            },
            "additionalProperties": false,
            "required": [
                "name"
            ]
        },
        "flowStorageEntries": {
            "title": "Workflow Storage Entries",
            "description": "Set of persistent workflow storage values",
            "type": "object",
            "patternProperties": {
                "^.{1,255}$": {}
            }
        },
        "flowStorageEntry": {
            "title": "Workflow Storage Entry",
            "description": "Schema for the body of a request to set a Workflow storage entry",
            "type": "object",
            "properties": {
                "key": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255
                },
                "value": {}
            },
            "additionalProperties": false,
            "required": [
                "key"
            ]
        },
        "flowTriggerFilter": {
            "title": "Workflow Trigger Filter",
            "description": "Array of triggers for filtering workflows. Trigger keys and trigger types are optional.",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "key": {
                        "$ref": "#/definitions/common/optMedStr"
                    },
                    "type": {
                        "$ref": "#/definitions/common/optMedStr"
                    }
                },
                "additionalProperties": false
            },
            "maxItems": 100
        },
        "flowVersion": {
            "title": "Workflow Version",
            "description": "Schema for a single Workflow Version",
            "oneOf": [
                {
                    "description": "Schema for a single Cloud/Edge/Custom Node Workflow Version",
                    "type": "object",
                    "properties": {
                        "id": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "flowVersionId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "flowId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "creationDate": {
                            "$ref": "#/definitions/common/date"
                        },
                        "lastUpdated": {
                            "$ref": "#/definitions/common/date"
                        },
                        "version": {
                            "$ref": "#/definitions/common/name"
                        },
                        "notes": {
                            "$ref": "#/definitions/common/description"
                        },
                        "enabled": {
                            "type": "boolean"
                        },
                        "triggers": {
                            "$ref": "#/definitions/flow/properties/triggers"
                        },
                        "nodes": {
                            "$ref": "#/definitions/flow/properties/nodes"
                        },
                        "globals": {
                            "$ref": "#/definitions/common/globals"
                        },
                        "minimumAgentVersion": {
                            "$ref": "#/definitions/common/version"
                        },
                        "customNodeConfig": {
                            "$ref": "#/definitions/flow/properties/customNodeConfig"
                        },
                        "stats": {
                            "type": "object",
                            "properties": {
                                "runCount": {
                                    "type": "number"
                                },
                                "errorCount": {
                                    "type": "number"
                                },
                                "byVersion": {
                                    "type": "object",
                                    "patternProperties": {
                                        ".*": {
                                            "type": "object",
                                            "properties": {
                                                "runCount": {
                                                    "type": "number"
                                                },
                                                "errorCount": {
                                                    "type": "number"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                {
                    "description": "Schema for a single Experience Workflow Version",
                    "type": "object",
                    "properties": {
                        "id": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "flowVersionId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "flowId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "creationDate": {
                            "$ref": "#/definitions/common/date"
                        },
                        "lastUpdated": {
                            "$ref": "#/definitions/common/date"
                        },
                        "name": {
                            "$ref": "#/definitions/common/name"
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "iconData": {
                            "$ref": "#/definitions/common/imageDataUri"
                        },
                        "flowClass": {
                            "type": "string",
                            "enum": [
                                "experience"
                            ]
                        },
                        "versions": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/common/name"
                            }
                        },
                        "enabled": {
                            "type": "boolean"
                        },
                        "triggers": {
                            "$ref": "#/definitions/flow/properties/triggers"
                        },
                        "nodes": {
                            "$ref": "#/definitions/flow/properties/nodes"
                        },
                        "globals": {
                            "$ref": "#/definitions/common/globals"
                        },
                        "stats": {
                            "type": "object",
                            "properties": {
                                "runCount": {
                                    "type": "number"
                                },
                                "errorCount": {
                                    "type": "number"
                                },
                                "byVersion": {
                                    "type": "object",
                                    "patternProperties": {
                                        ".*": {
                                            "type": "object",
                                            "properties": {
                                                "runCount": {
                                                    "type": "number"
                                                },
                                                "errorCount": {
                                                    "type": "number"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        },
        "flowVersionPatch": {
            "title": "Workflow Version Patch",
            "description": "Schema for the body of a Workflow Version modification request",
            "type": "object",
            "properties": {
                "notes": {
                    "$ref": "#/definitions/common/description"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "flowVersionPost": {
            "title": "Workflow Version Post",
            "description": "Schema for the body of a Workflow Version creation request",
            "type": "object",
            "properties": {
                "version": {
                    "$ref": "#/definitions/common/name"
                },
                "notes": {
                    "$ref": "#/definitions/common/description"
                },
                "enabled": {
                    "type": "boolean"
                },
                "triggers": {
                    "$ref": "#/definitions/flow/properties/triggers"
                },
                "nodes": {
                    "$ref": "#/definitions/flow/properties/nodes"
                },
                "globals": {
                    "$ref": "#/definitions/common/globals"
                },
                "minimumAgentVersion": {
                    "$ref": "#/definitions/common/version"
                },
                "customNodeConfig": {
                    "$ref": "#/definitions/flow/properties/customNodeConfig"
                }
            },
            "additionalProperties": false,
            "required": [
                "version"
            ]
        },
        "flowVersions": {
            "title": "Workflow Versions",
            "description": "Schema for a collection of Workflow Versions",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/flowVersion"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "filter": {
                    "type": "string"
                },
                "filterField": {
                    "type": "string"
                },
                "sortField": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "flowId": {
                    "$ref": "#/definitions/common/objectId"
                }
            }
        },
        "flows": {
            "title": "Workflows",
            "description": "Schema for a collection of Workflows",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/flow"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "filter": {
                    "type": "string"
                },
                "filterField": {
                    "type": "string"
                },
                "sortField": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "flowClass": {
                    "type": "string",
                    "enum": [
                        "cloud",
                        "edge",
                        "experience",
                        "customNode"
                    ]
                }
            }
        },
        "flowsImportPost": {
            "title": "Workflows Import Post",
            "description": "Schema for the body of a workflow import request",
            "type": "object",
            "properties": {
                "flows": {
                    "maxItems": 1000,
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "$ref": "#/definitions/common/objectId"
                            },
                            "applicationId": {
                                "$ref": "#/definitions/common/objectId"
                            },
                            "name": {
                                "$ref": "#/definitions/common/name"
                            },
                            "description": {
                                "$ref": "#/definitions/common/description"
                            },
                            "iconData": {
                                "$ref": "#/definitions/common/imageDataUri"
                            },
                            "enabled": {
                                "type": "boolean"
                            },
                            "triggers": {
                                "$ref": "#/definitions/flow/properties/triggers"
                            },
                            "nodes": {
                                "$ref": "#/definitions/flow/properties/nodes"
                            },
                            "globals": {
                                "$ref": "#/definitions/common/globals"
                            },
                            "flowClass": {
                                "$ref": "#/definitions/flow/properties/flowClass"
                            },
                            "defaultVersionId": {
                                "$ref": "#/definitions/common/objectIdOrNull"
                            },
                            "minimumAgentVersion": {
                                "$ref": "#/definitions/common/version"
                            },
                            "customNodeConfig": {
                                "$ref": "#/definitions/flow/properties/customNodeConfig"
                            },
                            "customNodeSupports": {
                                "$ref": "#/definitions/flow/properties/customNodeSupports"
                            }
                        },
                        "additionalProperties": {
                            "type": "string",
                            "maxLength": 1024
                        },
                        "required": [
                            "name"
                        ]
                    }
                },
                "flowVersions": {
                    "maxItems": 1000,
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "$ref": "#/definitions/common/objectId"
                            },
                            "flowId": {
                                "$ref": "#/definitions/common/objectId"
                            },
                            "applicationId": {
                                "$ref": "#/definitions/common/objectId"
                            },
                            "version": {
                                "$ref": "#/definitions/common/name"
                            },
                            "notes": {
                                "$ref": "#/definitions/common/description"
                            },
                            "enabled": {
                                "type": "boolean"
                            },
                            "triggers": {
                                "$ref": "#/definitions/flow/properties/triggers"
                            },
                            "nodes": {
                                "$ref": "#/definitions/flow/properties/nodes"
                            },
                            "globals": {
                                "$ref": "#/definitions/common/globals"
                            },
                            "minimumAgentVersion": {
                                "$ref": "#/definitions/common/version"
                            },
                            "customNodeConfig": {
                                "$ref": "#/definitions/flow/properties/customNodeConfig"
                            }
                        },
                        "additionalProperties": {
                            "type": "string",
                            "maxLength": 1024
                        },
                        "required": [
                            "version"
                        ]
                    }
                }
            },
            "additionalProperties": false
        },
        "flowsImportResult": {
            "title": "Workflow Import Result",
            "description": "Schema for the result of a workflow import request",
            "type": "object",
            "properties": {
                "flows": {
                    "maxItems": 1000,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/flow"
                    }
                },
                "flowVersions": {
                    "maxItems": 1000,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/flowVersion"
                    }
                },
                "importedFlowIdMap": {
                    "type": "object",
                    "patternProperties": {
                        "^[A-Fa-f\\d]{24}$": {
                            "$ref": "#/definitions/common/objectId"
                        }
                    }
                },
                "importedVersionIdMap": {
                    "type": "object",
                    "patternProperties": {
                        "^[A-Fa-f\\d]{24}$": {
                            "$ref": "#/definitions/common/objectId"
                        }
                    }
                }
            }
        },
        "githubLogin": {
            "title": "Github Login",
            "description": "Schema for the body of a Github login request",
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "minLength": 1
                },
                "requestedScopes": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/common/userApiScope"
                    }
                },
                "tokenTTL": {
                    "type": "integer",
                    "minimum": 0
                }
            },
            "required": [
                "accessToken"
            ],
            "additionalProperties": false
        },
        "integration": {
            "title": "Integration",
            "description": "Schema for a single Integration",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "integrationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "name": {
                    "$ref": "#/definitions/common/reqMedStr"
                },
                "integrationType": {
                    "type": "string",
                    "enum": [
                        "googlePubSub",
                        "meridian",
                        "mqtt",
                        "particle"
                    ]
                },
                "enabled": {
                    "type": "boolean"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common/reqMedStr"
                    }
                },
                "googlePubSubConfig": {
                    "type": "object",
                    "properties": {
                        "projectId": {
                            "$ref": "#/definitions/common/reqMedStr"
                        },
                        "keyJson": {
                            "type": "string",
                            "maxLength": 32767,
                            "minLength": 4
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "projectId",
                        "keyJson"
                    ]
                },
                "mqttConfig": {
                    "type": "object",
                    "properties": {
                        "clientId": {
                            "$ref": "#/definitions/common/reqMedStr"
                        },
                        "username": {
                            "$ref": "#/definitions/common/reqMedStr"
                        },
                        "password": {
                            "$ref": "#/definitions/common/reqMedStr"
                        },
                        "clean": {
                            "type": "boolean"
                        },
                        "port": {
                            "type": "number",
                            "minimum": 1,
                            "maximum": 65535
                        },
                        "protocol": {
                            "type": "string",
                            "enum": [
                                "mqtt",
                                "mqtts",
                                "ws",
                                "wss"
                            ]
                        },
                        "host": {
                            "$ref": "#/definitions/common/reqMedStr"
                        },
                        "privateKey": {
                            "type": "string",
                            "maxLength": 32767,
                            "minLength": 4
                        },
                        "certificate": {
                            "type": "string",
                            "maxLength": 32767,
                            "minLength": 4
                        },
                        "caCertificate": {
                            "type": "string",
                            "maxLength": 32767,
                            "minLength": 4
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "port",
                        "protocol",
                        "host"
                    ]
                },
                "particleConfig": {
                    "type": "object",
                    "properties": {
                        "accessToken": {
                            "$ref": "#/definitions/common/reqMedStr"
                        },
                        "productSlugOrId": {
                            "$ref": "#/definitions/common/reqMedStr"
                        },
                        "orgSlugOrId": {
                            "$ref": "#/definitions/common/reqMedStr"
                        },
                        "deviceNameOrId": {
                            "$ref": "#/definitions/common/reqMedStr"
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "accessToken"
                    ]
                },
                "meridianConfig": {
                    "type": "object",
                    "properties": {
                        "authenticationToken": {
                            "$ref": "#/definitions/common/reqMedStr"
                        },
                        "locationId": {
                            "$ref": "#/definitions/common/reqMedStr"
                        },
                        "assetUpdates": {
                            "type": "boolean"
                        },
                        "zoneUpdates": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "authenticationToken",
                        "locationId"
                    ]
                },
                "status": {
                    "lastKeepAlive": {
                        "type": [
                            "number"
                        ]
                    },
                    "nextAttempt": {
                        "type": [
                            "number"
                        ]
                    },
                    "connectInfo": {
                        "type": "object",
                        "properties": {
                            "ts": {
                                "type": [
                                    "number",
                                    "null"
                                ]
                            }
                        }
                    },
                    "disconnectInfo": {
                        "type": "object",
                        "properties": {
                            "ts": {
                                "type": [
                                    "number",
                                    "null"
                                ]
                            },
                            "error": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "integrationPatch": {
            "title": "Integration Patch",
            "description": "Schema for the body of an Integration modification request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/reqMedStr"
                },
                "integrationType": {
                    "$ref": "#/definitions/integration/properties/integrationType"
                },
                "enabled": {
                    "type": "boolean"
                },
                "topics": {
                    "$ref": "#/definitions/integration/properties/topics"
                },
                "googlePubSubConfig": {
                    "$ref": "#/definitions/integration/properties/googlePubSubConfig"
                },
                "mqttConfig": {
                    "$ref": "#/definitions/integration/properties/mqttConfig"
                },
                "particleConfig": {
                    "$ref": "#/definitions/integration/properties/particleConfig"
                },
                "meridianConfig": {
                    "$ref": "#/definitions/integration/properties/meridianConfig"
                }
            },
            "additionalProperties": false
        },
        "integrationPost": {
            "title": "Integration Post",
            "description": "Schema for the body of an Integration creation request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/reqMedStr"
                },
                "integrationType": {
                    "$ref": "#/definitions/integration/properties/integrationType"
                },
                "enabled": {
                    "type": "boolean"
                },
                "topics": {
                    "$ref": "#/definitions/integration/properties/topics"
                },
                "googlePubSubConfig": {
                    "$ref": "#/definitions/integration/properties/googlePubSubConfig"
                },
                "mqttConfig": {
                    "$ref": "#/definitions/integration/properties/mqttConfig"
                },
                "particleConfig": {
                    "$ref": "#/definitions/integration/properties/particleConfig"
                },
                "meridianConfig": {
                    "$ref": "#/definitions/integration/properties/meridianConfig"
                }
            },
            "additionalProperties": false,
            "required": [
                "name",
                "integrationType"
            ]
        },
        "integrations": {
            "title": "Integrations",
            "description": "Schema for a collection of Integrations",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/integration"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "filter": {
                    "type": "string"
                },
                "filterField": {
                    "type": "string"
                },
                "sortField": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                }
            }
        },
        "jobEnqueuedResult": {
            "title": "Job Enqueued API Result",
            "description": "Schema for the result of an job being queued",
            "type": "object",
            "properties": {
                "jobQueued": {
                    "type": "boolean"
                }
            }
        },
        "lastValueData": {
            "title": "Last Value Data",
            "description": "Schema for the result of a last value query",
            "type": "object",
            "patternProperties": {
                "^[A-Fa-f\\d]{24}$": {
                    "type": "object",
                    "properties": {
                        "time": {
                            "$ref": "#/definitions/common/date"
                        },
                        "data": {
                            "type": "object",
                            "patternProperties": {
                                "^[0-9a-zA-Z_-]{1,255}$": {
                                    "type": [
                                        "number",
                                        "string",
                                        "boolean"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "data",
                        "time"
                    ]
                }
            },
            "additionalProperties": false
        },
        "lastValueQuery": {
            "title": "Last Value Query",
            "description": "Schema for the body of a last value query request",
            "type": "object",
            "properties": {
                "attribute": {
                    "$ref": "#/definitions/common/key"
                },
                "deviceTags": {
                    "$ref": "#/definitions/common/tagsOptional"
                },
                "deviceIds": {
                    "$ref": "#/definitions/common/objectIds"
                }
            },
            "additionalProperties": false
        },
        "me": {
            "title": "Me",
            "description": "Schema for information about the currently authenticated user",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "userId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "passwordLastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "email": {
                    "$ref": "#/definitions/common/email"
                },
                "firstName": {
                    "$ref": "#/definitions/common/reqMedStr"
                },
                "lastName": {
                    "$ref": "#/definitions/common/reqMedStr"
                },
                "companyName": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "title": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "phoneNumber": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "location": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "url": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "tokenCutoff": {
                    "$ref": "#/definitions/common/date"
                },
                "emailVerified": {
                    "type": "boolean"
                },
                "twoFactorAuthEnabled": {
                    "type": "boolean"
                },
                "fullName": {
                    "type": "string"
                },
                "githubName": {
                    "type": "string"
                },
                "twitterName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string",
                    "format": "url"
                },
                "limits": {
                    "apitoken": {
                        "type": "number"
                    },
                    "application": {
                        "type": "number"
                    },
                    "applicationkey": {
                        "type": "number"
                    },
                    "dashboard": {
                        "type": "number"
                    },
                    "datatable": {
                        "type": "number"
                    },
                    "device": {
                        "type": "number"
                    },
                    "devicerecipe": {
                        "type": "number"
                    },
                    "experiencedomain": {
                        "type": "number"
                    },
                    "experienceendpoint": {
                        "type": "number"
                    },
                    "experiencegroup": {
                        "type": "number"
                    },
                    "experienceslug": {
                        "type": "number"
                    },
                    "experienceuser": {
                        "type": "number"
                    },
                    "experienceversion": {
                        "type": "number"
                    },
                    "experienceview": {
                        "type": "number"
                    },
                    "file": {
                        "type": "number"
                    },
                    "flow": {
                        "type": "number"
                    },
                    "integration": {
                        "type": "number"
                    },
                    "notebook": {
                        "type": "number"
                    },
                    "webhook": {
                        "type": "number"
                    },
                    "dataTTL": {
                        "type": "number"
                    },
                    "payload": {
                        "type": "number"
                    },
                    "notebookMinutesPerRun": {
                        "type": "number"
                    },
                    "notebookMinutesPerMonth": {
                        "type": "number"
                    },
                    "notebookInParallel": {
                        "type": "number"
                    }
                },
                "recentDashboards": {
                    "$ref": "#/definitions/recentItemList"
                },
                "recentApplications": {
                    "$ref": "#/definitions/recentItemList"
                },
                "recentOrganizations": {
                    "$ref": "#/definitions/recentItemList"
                },
                "summary": {
                    "type": "object",
                    "properties": {
                        "apiTokenCount": {
                            "type": "number"
                        },
                        "appCount": {
                            "type": "number"
                        },
                        "dashCount": {
                            "type": "number"
                        },
                        "dataTableCount": {
                            "type": "number"
                        },
                        "deviceCount": {
                            "type": "number"
                        },
                        "deviceRecipeCount": {
                            "type": "number"
                        },
                        "experienceEndpointCount": {
                            "type": "number"
                        },
                        "experienceGroupCount": {
                            "type": "number"
                        },
                        "experienceSlugCount": {
                            "type": "number"
                        },
                        "experienceUserCount": {
                            "type": "number"
                        },
                        "experienceVersionCount": {
                            "type": "number"
                        },
                        "experienceViewCount": {
                            "type": "number"
                        },
                        "fileCount": {
                            "type": "number"
                        },
                        "flowCount": {
                            "type": "number"
                        },
                        "integrationCount": {
                            "type": "number"
                        },
                        "keyCount": {
                            "type": "number"
                        },
                        "orgCount": {
                            "type": "number"
                        },
                        "payloadCount": {
                            "$ref": "#/definitions/payloadCounts"
                        },
                        "storageStats": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number"
                                },
                                "size": {
                                    "type": "number"
                                }
                            }
                        },
                        "webhookCount": {
                            "type": "number"
                        }
                    }
                },
                "currentPeriodStart": {
                    "$ref": "#/definitions/common/date"
                },
                "currentPeriodEnd": {
                    "$ref": "#/definitions/common/date"
                },
                "ssoLinked": {
                    "type": "boolean"
                }
            }
        },
        "mePatch": {
            "title": "Me Patch",
            "description": "Schema for the body of request to modify the current user",
            "type": "object",
            "properties": {
                "email": {
                    "$ref": "#/definitions/common/email"
                },
                "firstName": {
                    "$ref": "#/definitions/common/reqMedStr"
                },
                "lastName": {
                    "$ref": "#/definitions/common/reqMedStr"
                },
                "companyName": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "title": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "phoneNumber": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "location": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "url": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "password": {
                    "$ref": "#/definitions/common/userPassword"
                },
                "tokenCutoff": {
                    "$ref": "#/definitions/common/date"
                }
            },
            "additionalProperties": false
        },
        "mqttPublishBody": {
            "title": "MQTT Publish Body",
            "description": "Schema for the body an MQTT Publish Message request",
            "type": "object",
            "properties": {
                "topic": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 230
                },
                "message": {
                    "$ref": "#/definitions/common/description"
                }
            },
            "required": [
                "topic",
                "message"
            ],
            "additionalProperties": false
        },
        "multiDeviceCommand": {
            "title": "Multi Device Command",
            "description": "Schema for the body of a request to send a command to multiple Devices",
            "type": "object",
            "properties": {
                "time": {
                    "$ref": "#/definitions/common/timeFormats"
                },
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "payload": {},
                "deviceTags": {
                    "$ref": "#/definitions/common/tagsOptional"
                },
                "deviceIds": {
                    "$ref": "#/definitions/common/objectIds"
                }
            },
            "required": [
                "name"
            ],
            "additionalProperties": false
        },
        "notebook": {
            "title": "Notebook",
            "description": "Schema for a single Notebook",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "notebookId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "name": {
                    "$ref": "#/definitions/common/reqMedStr"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "jupyterFileName": {
                    "$ref": "#/definitions/common/reqMedStr"
                },
                "jupyterFileUrl": {
                    "type": "string"
                },
                "inputs": {
                    "type": "array",
                    "items": {
                        "maxItems": 100,
                        "oneOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "inputType": {
                                        "type": "string",
                                        "enum": [
                                            "deviceData"
                                        ]
                                    },
                                    "fileName": {
                                        "$ref": "#/definitions/common/templateOrSafeFileName"
                                    },
                                    "deviceTags": {
                                        "$ref": "#/definitions/common/templateTags"
                                    },
                                    "deviceIds": {
                                        "$ref": "#/definitions/common/templatesOrObjectIds"
                                    },
                                    "queryJson": {
                                        "$ref": "#/definitions/common/queryJson"
                                    },
                                    "attributes": {
                                        "type": "array",
                                        "maxItems": 100,
                                        "items": {
                                            "$ref": "#/definitions/common/key"
                                        }
                                    },
                                    "start": {
                                        "type": "number"
                                    },
                                    "end": {
                                        "type": "number"
                                    }
                                },
                                "required": [
                                    "inputType",
                                    "fileName",
                                    "start",
                                    "end"
                                ],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "inputType": {
                                        "type": "string",
                                        "enum": [
                                            "deviceMetadata"
                                        ]
                                    },
                                    "fileName": {
                                        "$ref": "#/definitions/common/templateOrSafeFileName"
                                    },
                                    "deviceTags": {
                                        "$ref": "#/definitions/common/templateTags"
                                    },
                                    "deviceIds": {
                                        "$ref": "#/definitions/common/templatesOrObjectIds"
                                    },
                                    "queryJson": {
                                        "$ref": "#/definitions/common/queryJson"
                                    }
                                },
                                "required": [
                                    "inputType",
                                    "fileName"
                                ],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "inputType": {
                                        "type": "string",
                                        "enum": [
                                            "dataTable"
                                        ]
                                    },
                                    "fileName": {
                                        "$ref": "#/definitions/common/templateOrSafeFileName"
                                    },
                                    "dataTableId": {
                                        "$ref": "#/definitions/common/templateOrObjectId"
                                    },
                                    "queryJson": {
                                        "$ref": "#/definitions/common/queryJson"
                                    }
                                },
                                "required": [
                                    "inputType",
                                    "fileName",
                                    "dataTableId"
                                ],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "inputType": {
                                        "type": "string",
                                        "enum": [
                                            "eventData"
                                        ]
                                    },
                                    "fileName": {
                                        "$ref": "#/definitions/common/templateOrSafeFileName"
                                    },
                                    "queryJson": {
                                        "$ref": "#/definitions/common/queryJson"
                                    }
                                },
                                "required": [
                                    "inputType",
                                    "fileName"
                                ],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "inputType": {
                                        "type": "string",
                                        "enum": [
                                            "externalUrl"
                                        ]
                                    },
                                    "fileName": {
                                        "$ref": "#/definitions/common/templateOrSafeFileName"
                                    },
                                    "sourceUrl": {
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 1024
                                    }
                                },
                                "required": [
                                    "inputType",
                                    "fileName",
                                    "sourceUrl"
                                ],
                                "additionalProperties": false
                            }
                        ]
                    }
                },
                "outputs": {
                    "type": "array",
                    "items": {
                        "maxItems": 100,
                        "oneOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "outputType": {
                                        "type": "string",
                                        "enum": [
                                            "dataTable"
                                        ]
                                    },
                                    "fileName": {
                                        "$ref": "#/definitions/common/templateOrSafeFileName"
                                    },
                                    "dataTableId": {
                                        "$ref": "#/definitions/common/templateOrObjectId"
                                    },
                                    "createMissingColumns": {
                                        "type": "boolean"
                                    },
                                    "truncateExistingTable": {
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "fileName",
                                    "outputType",
                                    "dataTableId"
                                ],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "outputType": {
                                        "type": "string",
                                        "enum": [
                                            "file"
                                        ]
                                    },
                                    "fileName": {
                                        "$ref": "#/definitions/common/templateOrSafeFileName"
                                    },
                                    "destinationDirectoryTemplate": {
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 1024
                                    },
                                    "destinationFileNameTemplate": {
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 1024
                                    }
                                },
                                "required": [
                                    "fileName",
                                    "outputType",
                                    "destinationFileNameTemplate"
                                ],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "outputType": {
                                        "type": "string",
                                        "enum": [
                                            "directory"
                                        ]
                                    },
                                    "directoryName": {
                                        "$ref": "#/definitions/common/templateOrSafeFileName"
                                    },
                                    "destinationDirectoryTemplate": {
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 1024
                                    }
                                },
                                "required": [
                                    "directoryName",
                                    "outputType",
                                    "destinationDirectoryTemplate"
                                ],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "outputType": {
                                        "type": "string",
                                        "enum": [
                                            "executionResult"
                                        ]
                                    },
                                    "fileName": {
                                        "type": "string",
                                        "enum": [
                                            "result.html",
                                            "result.pdf",
                                            "result.ipynb",
                                            "result.error.log",
                                            "result.log"
                                        ]
                                    },
                                    "destinationDirectoryTemplate": {
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 1024
                                    },
                                    "destinationFileNameTemplate": {
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 1024
                                    }
                                },
                                "required": [
                                    "fileName",
                                    "outputType"
                                ],
                                "additionalProperties": false
                            }
                        ]
                    }
                }
            }
        },
        "notebookDataExportOptions": {
            "title": "Notebook Data Export Options",
            "description": "Schema for the options for a Notebook data export request",
            "type": "object",
            "properties": {
                "email": {
                    "$ref": "#/definitions/common/email"
                },
                "relativeTo": {
                    "$ref": "#/definitions/common/timeFormats"
                },
                "templateContext": {
                    "type": "string",
                    "maxLength": 32767
                }
            },
            "additionalProperties": false
        },
        "notebookExecutionLogs": {
            "title": "Notebook Execution Logs",
            "description": "Schema for a set of Notebook execution logs",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "id": {
                        "$ref": "#/definitions/common/objectId"
                    },
                    "notebookExecutionId": {
                        "$ref": "#/definitions/common/objectId"
                    },
                    "notebookId": {
                        "$ref": "#/definitions/common/objectId"
                    },
                    "applicationId": {
                        "$ref": "#/definitions/common/objectId"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "queued",
                            "inProgress",
                            "completed",
                            "errored",
                            "timeout"
                        ]
                    },
                    "executionRelativeTo": {
                        "$ref": "#/definitions/common/date"
                    },
                    "maxAllowedRunMinutes": {
                        "type": "number"
                    },
                    "sourceType": {
                        "$ref": "#/definitions/common/sourceType"
                    },
                    "sourceId": {
                        "$ref": "#/definitions/common/objectId"
                    },
                    "runQueuedAt": {
                        "$ref": "#/definitions/common/date"
                    },
                    "runStartedAt": {
                        "$ref": "#/definitions/common/date"
                    },
                    "inputsCompletedAt": {
                        "$ref": "#/definitions/common/date"
                    },
                    "notebookCompletedAt": {
                        "$ref": "#/definitions/common/date"
                    },
                    "outputsCompletedAt": {
                        "$ref": "#/definitions/common/date"
                    },
                    "templateContext": {
                        "type": "string",
                        "maxLength": 32767
                    },
                    "inputInfo": {
                        "type": "object",
                        "patternProperties": {
                            ".*": {
                                "type": "object",
                                "properties": {
                                    "size": {
                                        "type": "number"
                                    },
                                    "url": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "outputInfo": {
                        "type": "object",
                        "patternProperties": {
                            ".*": {
                                "type": "object",
                                "properties": {
                                    "size": {
                                        "type": "number"
                                    },
                                    "url": {
                                        "type": "string"
                                    },
                                    "contentType": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "executionErrors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "notebookExecutionOptions": {
            "title": "Notebook Execution Options",
            "description": "Schema for the options for a Notebook execution request",
            "type": "object",
            "properties": {
                "relativeTo": {
                    "$ref": "#/definitions/common/timeFormats"
                },
                "templateContext": {
                    "type": "string",
                    "maxLength": 32767
                }
            },
            "additionalProperties": false
        },
        "notebookPatch": {
            "title": "Notebook Patch",
            "description": "Schema for the body of a Notebook modification request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/reqMedStr"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "inputs": {
                    "$ref": "#/definitions/notebook/properties/inputs"
                },
                "outputs": {
                    "$ref": "#/definitions/notebook/properties/outputs"
                }
            },
            "additionalProperties": false
        },
        "notebookPost": {
            "title": "Notebook Post",
            "description": "Schema for the body of an Notebook creation request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/reqMedStr"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "inputs": {
                    "$ref": "#/definitions/notebook/properties/inputs"
                },
                "outputs": {
                    "$ref": "#/definitions/notebook/properties/outputs"
                }
            },
            "additionalProperties": false,
            "required": [
                "name"
            ]
        },
        "notebooks": {
            "title": "Notebooks",
            "description": "Schema for a collection of Notebooks",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/notebook"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "filter": {
                    "type": "string"
                },
                "filterField": {
                    "type": "string"
                },
                "sortField": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                }
            }
        },
        "org": {
            "title": "Organization",
            "description": "Schema for a single Organization",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "orgId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "userId": {
                                "$ref": "#/definitions/common/objectId"
                            },
                            "firstName": {
                                "$ref": "#/definitions/common/reqMedStr"
                            },
                            "lastName": {
                                "$ref": "#/definitions/common/reqMedStr"
                            },
                            "email": {
                                "$ref": "#/definitions/common/email"
                            },
                            "avatarUrl": {
                                "$ref": "#/definitions/me/properties/avatarUrl"
                            },
                            "role": {
                                "$ref": "#/definitions/common/orgRole"
                            },
                            "applicationRoles": {
                                "$ref": "#/definitions/common/resourceRoles"
                            },
                            "dashboardRoles": {
                                "$ref": "#/definitions/common/resourceRoles"
                            }
                        }
                    }
                },
                "limits": {
                    "apitoken": {
                        "type": "number"
                    },
                    "application": {
                        "type": "number"
                    },
                    "applicationkey": {
                        "type": "number"
                    },
                    "dashboard": {
                        "type": "number"
                    },
                    "datatable": {
                        "type": "number"
                    },
                    "device": {
                        "type": "number"
                    },
                    "devicerecipe": {
                        "type": "number"
                    },
                    "experiencedomain": {
                        "type": "number"
                    },
                    "experienceendpoint": {
                        "type": "number"
                    },
                    "experiencegroup": {
                        "type": "number"
                    },
                    "experienceslug": {
                        "type": "number"
                    },
                    "experienceuser": {
                        "type": "number"
                    },
                    "experienceversion": {
                        "type": "number"
                    },
                    "experienceview": {
                        "type": "number"
                    },
                    "file": {
                        "type": "number"
                    },
                    "flow": {
                        "type": "number"
                    },
                    "integration": {
                        "type": "number"
                    },
                    "notebook": {
                        "type": "number"
                    },
                    "webhook": {
                        "type": "number"
                    },
                    "dataTTL": {
                        "type": "number"
                    },
                    "member": {
                        "type": "number"
                    },
                    "payload": {
                        "type": "number"
                    },
                    "notebookMinutesPerRun": {
                        "type": "number"
                    },
                    "notebookMinutesPerMonth": {
                        "type": "number"
                    },
                    "notebookInParallel": {
                        "type": "number"
                    }
                },
                "summary": {
                    "type": "object",
                    "properties": {
                        "apiTokenCount": {
                            "type": "number"
                        },
                        "appCount": {
                            "type": "number"
                        },
                        "dashCount": {
                            "type": "number"
                        },
                        "dataTableCount": {
                            "type": "number"
                        },
                        "deviceCount": {
                            "type": "number"
                        },
                        "deviceRecipeCount": {
                            "type": "number"
                        },
                        "experienceDomainCount": {
                            "type": "number"
                        },
                        "experienceEndpointCount": {
                            "type": "number"
                        },
                        "experienceGroupCount": {
                            "type": "number"
                        },
                        "experienceSlugCount": {
                            "type": "number"
                        },
                        "experienceUserCount": {
                            "type": "number"
                        },
                        "experienceVersionCount": {
                            "type": "number"
                        },
                        "experienceViewCount": {
                            "type": "number"
                        },
                        "fileCount": {
                            "type": "number"
                        },
                        "flowCount": {
                            "type": "number"
                        },
                        "integrationCount": {
                            "type": "number"
                        },
                        "keyCount": {
                            "type": "number"
                        },
                        "memberCount": {
                            "type": "number"
                        },
                        "payloadCount": {
                            "$ref": "#/definitions/payloadCounts"
                        },
                        "pendingInviteCount": {
                            "type": "number"
                        },
                        "storageStats": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number"
                                },
                                "size": {
                                    "type": "number"
                                }
                            }
                        },
                        "webhookCount": {
                            "type": "number"
                        }
                    }
                },
                "planId": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "billingEmail": {
                    "$ref": "#/definitions/common/email"
                },
                "subscriptionStatus": {
                    "type": "string",
                    "enum": [
                        "trialing",
                        "active",
                        "past_due",
                        "canceled",
                        "unpaid"
                    ]
                },
                "currentPeriodStart": {
                    "$ref": "#/definitions/common/date"
                },
                "currentPeriodEnd": {
                    "$ref": "#/definitions/common/date"
                },
                "isEnterprise": {
                    "type": "boolean"
                },
                "iconColor": {
                    "$ref": "#/definitions/common/color"
                },
                "whitelistedEmailDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common/domainName"
                    }
                }
            }
        },
        "orgInviteAction": {
            "title": "Organization Invitation Action",
            "description": "Schema for the body of a request to accept or reject an invitation",
            "type": "object",
            "properties": {
                "email": {
                    "$ref": "#/definitions/common/email"
                },
                "token": {
                    "$ref": "#/definitions/common/token"
                },
                "accept": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false,
            "required": [
                "email",
                "token",
                "accept"
            ]
        },
        "orgInviteInfo": {
            "title": "Organization Invitation Information",
            "description": "Schema for information about an invitation",
            "type": "object",
            "properties": {
                "orgName": {
                    "$ref": "#/definitions/common/name"
                },
                "email": {
                    "$ref": "#/definitions/common/email"
                },
                "role": {
                    "$ref": "#/definitions/common/orgRole"
                },
                "inviteDate": {
                    "$ref": "#/definitions/common/date"
                },
                "ttl": {
                    "type": "number"
                }
            }
        },
        "orgInvitePost": {
            "title": "Organization Invitation Post",
            "description": "Schema for the body of a request to send an invitation",
            "type": "object",
            "properties": {
                "email": {
                    "$ref": "#/definitions/common/email"
                },
                "role": {
                    "$ref": "#/definitions/common/orgRole"
                },
                "applicationRoles": {
                    "$ref": "#/definitions/common/resourceRoles"
                },
                "dashboardRoles": {
                    "$ref": "#/definitions/common/resourceRoles"
                }
            },
            "additionalProperties": false,
            "required": [
                "email",
                "role"
            ]
        },
        "orgInviteResult": {
            "title": "Organization Invitation Result",
            "description": "Schema for the result of accepting/rejecting an invitation",
            "type": "object",
            "properties": {
                "accepted": {
                    "type": "boolean"
                },
                "orgId": {
                    "$ref": "#/definitions/common/objectId"
                }
            }
        },
        "orgInvites": {
            "title": "Organization Invitations",
            "description": "Schema for an array of pending invitations to an Organization",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "id": {
                        "$ref": "#/definitions/common/objectId"
                    },
                    "email": {
                        "$ref": "#/definitions/common/email"
                    },
                    "role": {
                        "$ref": "#/definitions/common/orgRole"
                    },
                    "applicationRoles": {
                        "$ref": "#/definitions/common/resourceRoles"
                    },
                    "dashboardRoles": {
                        "$ref": "#/definitions/common/resourceRoles"
                    },
                    "inviteDate": {
                        "$ref": "#/definitions/common/date"
                    },
                    "ttl": {
                        "type": "number"
                    },
                    "hasExpired": {
                        "type": "boolean"
                    }
                }
            }
        },
        "orgMemberPatch": {
            "title": "Organization Member Patch",
            "description": "Schema for the body of a request to modify an Organization member",
            "type": "object",
            "properties": {
                "userId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "role": {
                    "$ref": "#/definitions/common/orgRole"
                },
                "applicationRoles": {
                    "$ref": "#/definitions/common/resourceRoles"
                },
                "dashboardRoles": {
                    "$ref": "#/definitions/common/resourceRoles"
                }
            },
            "additionalProperties": false,
            "required": [
                "userId"
            ]
        },
        "orgPatch": {
            "title": "Organization Patch",
            "description": "Schema for the body of an Organization modification request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "planId": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "billingEmail": {
                    "$ref": "#/definitions/common/email"
                },
                "cardToken": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "iconColor": {
                    "$ref": "#/definitions/common/color"
                },
                "whitelistedEmailDomains": {
                    "type": "array",
                    "maxItems": 25,
                    "items": {
                        "$ref": "#/definitions/common/domainName"
                    }
                }
            },
            "additionalProperties": false
        },
        "orgPost": {
            "title": "Organization Post",
            "description": "Schema for the body of an Organization creation request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "description": {
                    "$ref": "#/definitions/common/description"
                },
                "planId": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "billingEmail": {
                    "$ref": "#/definitions/common/email"
                },
                "cardToken": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "iconColor": {
                    "$ref": "#/definitions/common/color"
                }
            },
            "additionalProperties": false,
            "required": [
                "name"
            ]
        },
        "orgs": {
            "title": "Organizations",
            "description": "Schema for a collection of Organizations",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/org"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "filter": {
                    "type": "string"
                },
                "filterField": {
                    "type": "string"
                },
                "sortField": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                }
            }
        },
        "passwordResetFinish": {
            "title": "Password Reset Finish",
            "description": "Schema for the body of a request to complete the reset password flow",
            "type": "object",
            "properties": {
                "token": {
                    "$ref": "#/definitions/common/token"
                },
                "email": {
                    "$ref": "#/definitions/common/email"
                },
                "password": {
                    "$ref": "#/definitions/common/userPassword"
                }
            },
            "required": [
                "token",
                "email",
                "password"
            ],
            "additionalProperties": false
        },
        "passwordResetInput": {
            "title": "Password Reset Input",
            "description": "Schema for the body of a request to start the reset password flow",
            "type": "object",
            "properties": {
                "email": {
                    "$ref": "#/definitions/common/email"
                }
            },
            "required": [
                "email"
            ],
            "additionalProperties": false
        },
        "passwordResetResponse": {
            "title": "Password Reset Response",
            "description": "Schema for result of a successful password reset",
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean",
                    "enum": [
                        true
                    ]
                },
                "accountIsLocked": {
                    "type": "boolean"
                },
                "twoFactorAuthEnabled": {
                    "type": "boolean"
                }
            }
        },
        "payloadCounts": {
            "title": "Payload Counts",
            "description": "Schema for the result of a payload count request",
            "type": "object",
            "properties": {
                "mqttOut": {
                    "type": "object",
                    "patternProperties": {
                        ".*": {
                            "type": "number"
                        }
                    }
                },
                "mqttIn": {
                    "type": "object",
                    "patternProperties": {
                        ".*": {
                            "type": "number"
                        }
                    }
                },
                "dataTable": {
                    "type": "object",
                    "patternProperties": {
                        ".*": {
                            "type": "number"
                        }
                    }
                },
                "deviceState": {
                    "type": "object",
                    "patternProperties": {
                        ".*": {
                            "type": "number"
                        }
                    }
                },
                "deviceCommand": {
                    "type": "object",
                    "patternProperties": {
                        ".*": {
                            "type": "number"
                        }
                    }
                },
                "webhook": {
                    "type": "object",
                    "patternProperties": {
                        ".*": {
                            "type": "number"
                        }
                    }
                },
                "timer": {
                    "type": "object",
                    "patternProperties": {
                        ".*": {
                            "type": "number"
                        }
                    }
                },
                "event": {
                    "type": "object",
                    "patternProperties": {
                        ".*": {
                            "type": "number"
                        }
                    }
                },
                "virtualButton": {
                    "type": "object",
                    "patternProperties": {
                        ".*": {
                            "type": "number"
                        }
                    }
                },
                "deviceConnect": {
                    "type": "object",
                    "patternProperties": {
                        ".*": {
                            "type": "number"
                        }
                    }
                },
                "deviceDisconnect": {
                    "type": "object",
                    "patternProperties": {
                        ".*": {
                            "type": "number"
                        }
                    }
                },
                "endpoint": {
                    "type": "object",
                    "patternProperties": {
                        ".*": {
                            "type": "number"
                        }
                    }
                },
                "integration": {
                    "type": "object",
                    "patternProperties": {
                        ".*": {
                            "type": "number"
                        }
                    }
                }
            }
        },
        "recentItem": {
            "title": "Recent Item",
            "description": "Schema for the body of a request to add a recent item",
            "type": "object",
            "properties": {
                "itemType": {
                    "type": "string",
                    "enum": [
                        "application",
                        "device",
                        "flow",
                        "dashboard",
                        "organization"
                    ]
                },
                "parentId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "itemId": {
                    "$ref": "#/definitions/common/objectId"
                }
            },
            "required": [
                "itemType",
                "itemId"
            ]
        },
        "recentItemList": {
            "title": "Recent Item List",
            "description": "Schema for an array of recent items",
            "type": "object",
            "properties": {
                "itemType": {
                    "$ref": "#/definitions/recentItem/properties/itemType"
                },
                "parentId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "$ref": "#/definitions/common/objectId"
                            },
                            "name": {
                                "$ref": "#/definitions/common/name"
                            }
                        }
                    }
                }
            }
        },
        "resourceTransfer": {
            "title": "Resource Transfer",
            "description": "Schema for the body of a resource transfer request",
            "type": "object",
            "properties": {
                "destinationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "destinationType": {
                    "$ref": "#/definitions/common/ownerType"
                },
                "applicationIds": {
                    "$ref": "#/definitions/common/objectIds"
                },
                "dashboardIds": {
                    "$ref": "#/definitions/common/objectIds"
                },
                "strict": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false,
            "required": [
                "destinationId",
                "destinationType"
            ]
        },
        "samlResponse": {
            "title": "SAML Response",
            "description": "SAML Response body for login",
            "type": "object",
            "properties": {
                "SAMLResponse": {
                    "type": "string",
                    "minLength": 4,
                    "maxLength": 100000
                },
                "SAMLDomain": {
                    "$ref": "#/definitions/common/domainName"
                }
            },
            "required": [
                "SAMLResponse",
                "SAMLDomain"
            ],
            "additionalProperties": false
        },
        "ssoRequest": {
            "title": "SSO Request",
            "description": "SSO Request built from the SP and IDP config",
            "type": "object",
            "properties": {
                "ssoType": {
                    "type": "string",
                    "enum": [
                        "SAML"
                    ]
                },
                "ssoRequest": {
                    "$ref": "#/definitions/common/description"
                }
            },
            "required": [
                "ssoType",
                "ssoRequest"
            ]
        },
        "success": {
            "title": "Success",
            "description": "Schema for reporting a successful operation",
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean",
                    "enum": [
                        true
                    ]
                }
            }
        },
        "timeSeriesData": {
            "title": "Time Series Data",
            "description": "Schema for the result of a time series query",
            "type": "object",
            "properties": {
                "start": {
                    "$ref": "#/definitions/common/date"
                },
                "end": {
                    "$ref": "#/definitions/common/date"
                },
                "resolution": {
                    "type": "number"
                },
                "aggregation": {
                    "$ref": "#/definitions/common/aggregation"
                },
                "devices": {
                    "type": "object",
                    "patternProperties": {
                        "^[A-Fa-f\\d]{24}$": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "$ref": "#/definitions/common/name"
                                },
                                "points": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "time": {
                                                "$ref": "#/definitions/common/date"
                                            },
                                            "data": {
                                                "type": "object",
                                                "patternProperties": {
                                                    "^[0-9a-zA-Z_-]{1,255}$": {
                                                        "type": [
                                                            "number",
                                                            "string",
                                                            "boolean"
                                                        ]
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        },
                                        "additionalProperties": false,
                                        "required": [
                                            "data",
                                            "time"
                                        ]
                                    }
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "name",
                                "points"
                            ]
                        }
                    },
                    "additionalProperties": false
                }
            },
            "additionalProperties": false,
            "required": [
                "start",
                "end",
                "resolution",
                "aggregation",
                "devices"
            ]
        },
        "timeSeriesQuery": {
            "title": "Time Series Query",
            "description": "Schema for the body of a time series query request",
            "type": "object",
            "properties": {
                "start": {
                    "type": "number"
                },
                "end": {
                    "type": "number"
                },
                "duration": {
                    "type": "number"
                },
                "resolution": {
                    "type": "number"
                },
                "aggregation": {
                    "$ref": "#/definitions/common/aggregation"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common/key"
                    }
                },
                "deviceTags": {
                    "$ref": "#/definitions/common/tagsOptional"
                },
                "deviceIds": {
                    "$ref": "#/definitions/common/objectIds"
                },
                "limit": {
                    "type": "number"
                },
                "order": {
                    "type": "string",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "default": "asc"
                }
            },
            "additionalProperties": false
        },
        "userCredentials": {
            "title": "User Credentials",
            "description": "Schema for the body of a User authentication request",
            "type": "object",
            "properties": {
                "email": {
                    "$ref": "#/definitions/common/email"
                },
                "password": {
                    "$ref": "#/definitions/common/password"
                },
                "twoFactorCode": {
                    "type": "string",
                    "maxLength": 2048
                },
                "requestedScopes": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/common/userApiScope"
                    }
                },
                "tokenTTL": {
                    "type": "integer",
                    "minimum": 0
                }
            },
            "required": [
                "email",
                "password"
            ],
            "additionalProperties": false
        },
        "userPost": {
            "title": "User Post",
            "description": "Schema for the body of a User creation request",
            "type": "object",
            "properties": {
                "email": {
                    "$ref": "#/definitions/common/email"
                },
                "firstName": {
                    "$ref": "#/definitions/common/reqMedStr"
                },
                "lastName": {
                    "$ref": "#/definitions/common/reqMedStr"
                },
                "companyName": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "title": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "phoneNumber": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "location": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "url": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "oauth": {
                    "type": "object",
                    "properties": {
                        "service": {
                            "type": "string"
                        },
                        "accessToken": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "service",
                        "accessToken"
                    ]
                },
                "password": {
                    "$ref": "#/definitions/common/userPassword"
                },
                "acceptTerms": {
                    "enum": [
                        "on"
                    ]
                },
                "hsToken": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "iotJourneyStage": {
                    "$ref": "#/definitions/common/optMedStr"
                },
                "requestedScopes": {
                    "$ref": "#/definitions/userCredentials/properties/requestedScopes"
                },
                "tokenTTL": {
                    "type": "integer",
                    "minimum": 0
                }
            },
            "anyOf": [
                {
                    "required": [
                        "email",
                        "firstName",
                        "lastName",
                        "password",
                        "acceptTerms"
                    ]
                },
                {
                    "required": [
                        "email",
                        "firstName",
                        "lastName",
                        "oauth",
                        "acceptTerms"
                    ]
                }
            ]
        },
        "validateContextError": {
            "title": "Validate Context Error",
            "description": "Schema for the result of a validateContext call when invalid context is passed",
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/definitions/error/properties/type"
                },
                "message": {
                    "$ref": "#/definitions/error/properties/message"
                },
                "ctx": {
                    "$ref": "#/definitions/common/validateContextCtx"
                }
            }
        },
        "validateContextSuccess": {
            "title": "Validate Context Success",
            "description": "Schema for the result of a successful validateContext call",
            "type": "object",
            "properties": {
                "success": {
                    "$ref": "#/definitions/success/properties/success"
                },
                "ctx": {
                    "$ref": "#/definitions/common/validateContextCtx"
                }
            }
        },
        "validationErrors": {
            "title": "Validation Error",
            "description": "Schema for validation errors returned by the API",
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "validationErrors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "name": {
                                "type": "string"
                            },
                            "id": {
                                "oneOf": [
                                    {
                                        "$ref": "#/definitions/common/objectId"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "message": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "virtualButtonPress": {
            "title": "Virtual Button Press",
            "description": "Schema for the body of a request to press a Workflow virtual button",
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "payload": {},
                "meta": {},
                "flowVersion": {
                    "$ref": "#/definitions/common/name"
                },
                "deviceId": {
                    "$ref": "#/definitions/common/objectId"
                }
            },
            "required": [
                "key"
            ],
            "additionalProperties": false
        },
        "webhook": {
            "title": "Webhook",
            "description": "Schema for a single Webhook",
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/common/objectId"
                },
                "webhookId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                },
                "creationDate": {
                    "$ref": "#/definitions/common/date"
                },
                "lastUpdated": {
                    "$ref": "#/definitions/common/date"
                },
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "token": {
                    "$ref": "#/definitions/common/token"
                },
                "responseCode": {
                    "$ref": "#/definitions/common/responseCode"
                },
                "verificationType": {
                    "type": "string",
                    "enum": [
                        "facebook",
                        "fitbit",
                        "none",
                        "twilio",
                        "alexa"
                    ]
                },
                "verificationCode": {
                    "type": "string",
                    "maxLength": 32767
                },
                "waitForReply": {
                    "type": "boolean"
                },
                "basicAuthUsername": {
                    "type": "string",
                    "maxLength": 255
                },
                "basicAuthPassword": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "webhookPatch": {
            "title": "Webhook Patch",
            "description": "Schema for the body of a Webhook modification request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "responseCode": {
                    "$ref": "#/definitions/common/responseCode"
                },
                "verificationType": {
                    "$ref": "#/definitions/webhook/properties/verificationType"
                },
                "verificationCode": {
                    "$ref": "#/definitions/webhook/properties/verificationCode"
                },
                "waitForReply": {
                    "type": "boolean"
                },
                "basicAuthUsername": {
                    "type": "string",
                    "maxLength": 255
                },
                "basicAuthPassword": {
                    "type": "string",
                    "maxLength": 255
                }
            },
            "additionalProperties": false
        },
        "webhookPost": {
            "title": "Webhook Post",
            "description": "Schema for the body of a Webhook creation request",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/common/name"
                },
                "responseCode": {
                    "$ref": "#/definitions/common/responseCode"
                },
                "verificationType": {
                    "$ref": "#/definitions/webhook/properties/verificationType"
                },
                "verificationCode": {
                    "$ref": "#/definitions/webhook/properties/verificationCode"
                },
                "waitForReply": {
                    "type": "boolean"
                },
                "basicAuthUsername": {
                    "type": "string",
                    "maxLength": 255
                },
                "basicAuthPassword": {
                    "type": "string",
                    "maxLength": 255
                }
            },
            "required": [
                "name"
            ],
            "additionalProperties": false
        },
        "webhooks": {
            "title": "Webhooks",
            "description": "Schema for a collection of Webhooks",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/webhook"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "filter": {
                    "type": "string"
                },
                "filterField": {
                    "type": "string"
                },
                "sortField": {
                    "type": "string"
                },
                "sortDirection": {
                    "$ref": "#/definitions/common/sortDirection"
                },
                "applicationId": {
                    "$ref": "#/definitions/common/objectId"
                }
            }
        },
        "common": {
            "advancedIdQuery": {
                "oneOf": [
                    {
                        "$ref": "#/definitions/common/objectIdOrNull"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "$eq": {
                                "$ref": "#/definitions/common/objectIdOrNull"
                            },
                            "$ne": {
                                "$ref": "#/definitions/common/objectIdOrNull"
                            },
                            "$in": {
                                "type": "array",
                                "maxItems": 100,
                                "items": {
                                    "$ref": "#/definitions/common/objectId"
                                }
                            },
                            "$nin": {
                                "type": "array",
                                "maxItems": 100,
                                "items": {
                                    "$ref": "#/definitions/common/objectId"
                                }
                            }
                        },
                        "additionalProperties": false,
                        "minProperties": 1,
                        "maxProperties": 1
                    }
                ]
            },
            "advancedTagQuery": {
                "oneOf": [
                    {
                        "type": "object",
                        "properties": {
                            "$tagKey": {
                                "type": "string",
                                "maxLength": 255
                            },
                            "$tagValue": {
                                "type": "string",
                                "maxLength": 255
                            }
                        },
                        "additionalProperties": false,
                        "minProperties": 1
                    },
                    {
                        "type": "object",
                        "patternProperties": {
                            "^[0-9a-zA-Z_-]{1,255}": {
                                "type": "string",
                                "maxLength": 255
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "advancedTagQueryWithOps": {
                "oneOf": [
                    {
                        "$ref": "#/definitions/common/advancedTagQuery"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "$eq": {
                                "$ref": "#/definitions/common/advancedTagQuery"
                            }
                        },
                        "required": [
                            "$eq"
                        ],
                        "additionalProperties": false
                    },
                    {
                        "type": "object",
                        "properties": {
                            "$ne": {
                                "$ref": "#/definitions/common/advancedTagQuery"
                            }
                        },
                        "required": [
                            "$ne"
                        ],
                        "additionalProperties": false
                    }
                ]
            },
            "advancedValueQuery": {
                "oneOf": [
                    {
                        "type": [
                            "string",
                            "number",
                            "boolean",
                            "null"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "$eq": {
                                "type": [
                                    "string",
                                    "number",
                                    "boolean",
                                    "null"
                                ]
                            },
                            "$ne": {
                                "type": [
                                    "string",
                                    "number",
                                    "boolean",
                                    "null"
                                ]
                            },
                            "$gt": {
                                "type": [
                                    "string",
                                    "number",
                                    "boolean",
                                    "null"
                                ]
                            },
                            "$lt": {
                                "type": [
                                    "string",
                                    "number",
                                    "boolean",
                                    "null"
                                ]
                            },
                            "$gte": {
                                "type": [
                                    "string",
                                    "number",
                                    "boolean",
                                    "null"
                                ]
                            },
                            "$lte": {
                                "type": [
                                    "string",
                                    "number",
                                    "boolean",
                                    "null"
                                ]
                            },
                            "$startsWith": {
                                "type": "string",
                                "minLength": 1
                            },
                            "$endsWith": {
                                "type": "string",
                                "minLength": 1
                            },
                            "$contains": {
                                "type": "string",
                                "minLength": 1
                            },
                            "$ci": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "aggregation": {
                "type": "string",
                "enum": [
                    "FIRST",
                    "LAST",
                    "COUNT",
                    "MAX",
                    "MIN",
                    "MEDIAN",
                    "MEAN",
                    "SUM",
                    "STD_DEV",
                    "NONE"
                ]
            },
            "applicationApiScope": {
                "type": "string",
                "enum": [
                    "all.Application",
                    "all.Application.read",
                    "all.Device",
                    "all.Device.read",
                    "application.*",
                    "applicationApiToken.*",
                    "applicationApiTokens.*",
                    "applicationCertificate.*",
                    "applicationCertificates.*",
                    "applicationCertificateAuthority.*",
                    "applicationCertificateAuthorities.*",
                    "applicationKey.*",
                    "applicationKeys.*",
                    "data.*",
                    "dataTable.*",
                    "dataTables.*",
                    "dataTableRow.*",
                    "dataTableRows.*",
                    "device.*",
                    "deviceRecipe.*",
                    "deviceRecipes.*",
                    "devices.*",
                    "edgeDeployments.*",
                    "event.*",
                    "events.*",
                    "experience.*",
                    "experienceDomain.*",
                    "experienceDomains.*",
                    "experienceEndpoint.*",
                    "experienceEndpoints.*",
                    "experienceGroup.*",
                    "experienceGroups.*",
                    "experienceSlug.*",
                    "experienceSlugs.*",
                    "experienceUser.*",
                    "experienceUsers.*",
                    "experienceVersion.*",
                    "experienceVersions.*",
                    "experienceView.*",
                    "experienceViews.*",
                    "integration.*",
                    "integrations.*",
                    "file.*",
                    "files.*",
                    "flow.*",
                    "flows.*",
                    "flowVersion.*",
                    "flowVersions.*",
                    "notebook.*",
                    "notebooks.*",
                    "webhook.*",
                    "webhooks.*",
                    "application.archiveData",
                    "application.backfillArchiveData",
                    "application.clone",
                    "application.export",
                    "application.fullEventsArchive",
                    "application.fullDataTablesArchive",
                    "application.debug",
                    "application.delete",
                    "application.get",
                    "application.mqttPublishMessage",
                    "application.mqttSubscriptionStream",
                    "application.patch",
                    "application.payloadCounts",
                    "application.search",
                    "applicationApiToken.delete",
                    "applicationApiToken.get",
                    "applicationApiToken.patch",
                    "applicationApiTokens.get",
                    "applicationApiTokens.post",
                    "applicationCertificate.delete",
                    "applicationCertificate.get",
                    "applicationCertificate.patch",
                    "applicationCertificates.get",
                    "applicationCertificates.post",
                    "applicationCertificateAuthority.delete",
                    "applicationCertificateAuthority.get",
                    "applicationCertificateAuthority.patch",
                    "applicationCertificateAuthorities.get",
                    "applicationCertificateAuthorities.post",
                    "applicationKey.delete",
                    "applicationKey.get",
                    "applicationKey.patch",
                    "applicationKeys.get",
                    "applicationKeys.post",
                    "data.export",
                    "data.lastValueQuery",
                    "data.timeSeriesQuery",
                    "dataTable.addColumn",
                    "dataTable.delete",
                    "dataTable.get",
                    "dataTable.patch",
                    "dataTable.removeColumn",
                    "dataTableRow.delete",
                    "dataTableRow.get",
                    "dataTableRow.patch",
                    "dataTableRows.get",
                    "dataTableRows.post",
                    "dataTableRows.query",
                    "dataTableRows.export",
                    "dataTableRows.delete",
                    "dataTableRows.truncate",
                    "dataTables.get",
                    "dataTables.post",
                    "device.commandStream",
                    "device.debug",
                    "device.delete",
                    "device.export",
                    "device.get",
                    "device.getCommand",
                    "device.getCompositeState",
                    "device.getLogEntries",
                    "device.getState",
                    "device.patch",
                    "device.removeData",
                    "device.sendCommand",
                    "device.sendState",
                    "device.setConnectionStatus",
                    "device.stateStream",
                    "deviceRecipe.bulkCreate",
                    "deviceRecipe.delete",
                    "deviceRecipe.get",
                    "deviceRecipe.patch",
                    "deviceRecipes.get",
                    "deviceRecipes.post",
                    "devices.patch",
                    "devices.detailedSummary",
                    "devices.export",
                    "devices.get",
                    "devices.post",
                    "devices.sendCommand",
                    "edgeDeployments.get",
                    "edgeDeployments.release",
                    "edgeDeployments.remove",
                    "edgeDeployments.replace",
                    "event.delete",
                    "event.get",
                    "event.patch",
                    "events.delete",
                    "events.get",
                    "events.mostRecentBySeverity",
                    "events.patch",
                    "events.post",
                    "events.export",
                    "experience.delete",
                    "experience.bootstrap",
                    "experienceDomain.delete",
                    "experienceDomain.get",
                    "experienceDomain.patch",
                    "experienceDomains.get",
                    "experienceDomains.post",
                    "experienceEndpoint.delete",
                    "experienceEndpoint.get",
                    "experienceEndpoint.linkedResources",
                    "experienceEndpoint.patch",
                    "experienceEndpoints.get",
                    "experienceEndpoints.post",
                    "experienceEndpoints.stats",
                    "experienceGroup.delete",
                    "experienceGroup.get",
                    "experienceGroup.patch",
                    "experienceGroups.detailedSummary",
                    "experienceGroups.get",
                    "experienceGroups.post",
                    "experienceSlug.delete",
                    "experienceSlug.get",
                    "experienceSlug.patch",
                    "experienceSlugs.get",
                    "experienceSlugs.post",
                    "experienceUser.delete",
                    "experienceUser.get",
                    "experienceUser.patch",
                    "experienceUsers.detailedSummary",
                    "experienceUsers.get",
                    "experienceUsers.post",
                    "experienceVersion.delete",
                    "experienceVersion.get",
                    "experienceVersion.patch",
                    "experienceVersions.get",
                    "experienceVersions.post",
                    "experienceView.debug",
                    "experienceView.delete",
                    "experienceView.get",
                    "experienceView.linkedResources",
                    "experienceView.patch",
                    "experienceViews.debug",
                    "experienceViews.detailedSummary",
                    "experienceViews.get",
                    "experienceViews.post",
                    "file.get",
                    "file.patch",
                    "file.move",
                    "file.delete",
                    "file.upload",
                    "files.get",
                    "files.post",
                    "flow.debug",
                    "flow.delete",
                    "flow.clearStorageEntries",
                    "flow.get",
                    "flow.getStorageEntries",
                    "flow.log",
                    "flow.patch",
                    "flow.pressVirtualButton",
                    "flow.setStorageEntry",
                    "flows.get",
                    "flows.getByVersion",
                    "flows.import",
                    "flows.post",
                    "flowVersion.delete",
                    "flowVersion.get",
                    "flowVersion.log",
                    "flowVersion.patch",
                    "flowVersions.get",
                    "flowVersions.post",
                    "integration.delete",
                    "integration.get",
                    "integration.patch",
                    "integrations.get",
                    "integrations.post",
                    "notebook.delete",
                    "notebook.execute",
                    "notebook.get",
                    "notebook.logs",
                    "notebook.patch",
                    "notebook.requestInputDataExport",
                    "notebook.upload",
                    "notebooks.get",
                    "notebooks.post",
                    "webhook.delete",
                    "webhook.get",
                    "webhook.patch",
                    "webhooks.get",
                    "webhooks.post"
                ]
            },
            "applicationGlobals": {
                "type": "array",
                "maxItems": 100,
                "items": {
                    "type": "object",
                    "properties": {
                        "key": {
                            "$ref": "#/definitions/common/key"
                        },
                        "json": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 32767
                        },
                        "cloudOnly": {
                            "type": "boolean",
                            "default": false
                        },
                        "description": {
                            "$ref": "#/definitions/common/shortString"
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "key",
                        "json"
                    ]
                }
            },
            "authFilterType": {
                "oneOf": [
                    {
                        "$ref": "#/definitions/common/filterType"
                    },
                    {
                        "type": "string",
                        "enum": [
                            "none"
                        ]
                    }
                ]
            },
            "authPubSubTopics": {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/common/reqMedStr"
                }
            },
            "certificateInfo": {
                "type": "object",
                "properties": {
                    "serialNumber": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1024
                    },
                    "fingerprint": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1024
                    },
                    "commonName": {
                        "type": "string",
                        "maxLength": 1024
                    },
                    "issuerName": {
                        "type": "string",
                        "maxLength": 1024
                    },
                    "notValidBefore": {
                        "$ref": "#/definitions/common/date"
                    },
                    "notValidAfter": {
                        "$ref": "#/definitions/common/date"
                    }
                }
            },
            "certificateString": {
                "type": "string",
                "maxLength": 32767,
                "minLength": 50
            },
            "contextVariableValue": {
                "oneOf": [
                    {
                        "type": "string",
                        "maxLength": 32767
                    },
                    {
                        "type": "number"
                    },
                    {
                        "$ref": "#/definitions/common/tagOptional"
                    }
                ]
            },
            "color": {
                "type": "string",
                "maxLength": 64
            },
            "customNodeFieldConfig": {
                "oneOf": [
                    {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "checkbox"
                                ]
                            },
                            "label": {
                                "$ref": "#/definitions/common/reqMedStr"
                            },
                            "id": {
                                "$ref": "#/definitions/common/reqMedStr"
                            },
                            "description": {
                                "$ref": "#/definitions/common/description"
                            },
                            "defaultValue": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "required": [
                            "type",
                            "label"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "select"
                                ]
                            },
                            "label": {
                                "$ref": "#/definitions/common/reqMedStr"
                            },
                            "id": {
                                "$ref": "#/definitions/common/reqMedStr"
                            },
                            "description": {
                                "$ref": "#/definitions/common/description"
                            },
                            "defaultValue": {
                                "$ref": "#/definitions/common/reqMedStr"
                            },
                            "options": {
                                "type": "array",
                                "minItems": 1,
                                "maxItems": 100,
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "label": {
                                            "$ref": "#/definitions/common/optMedStr"
                                        },
                                        "value": {
                                            "$ref": "#/definitions/common/reqMedStr"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                        "value"
                                    ]
                                }
                            }
                        },
                        "additionalProperties": false,
                        "required": [
                            "type",
                            "label",
                            "defaultValue",
                            "options"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "stringTemplate"
                                ]
                            },
                            "label": {
                                "$ref": "#/definitions/common/reqMedStr"
                            },
                            "id": {
                                "$ref": "#/definitions/common/reqMedStr"
                            },
                            "description": {
                                "$ref": "#/definitions/common/description"
                            },
                            "defaultValue": {
                                "$ref": "#/definitions/common/optMedStr"
                            },
                            "required": {
                                "type": "boolean"
                            },
                            "validRegExp": {
                                "$ref": "#/definitions/common/optMedStr"
                            }
                        },
                        "additionalProperties": false,
                        "required": [
                            "type",
                            "label"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "numberTemplate"
                                ]
                            },
                            "label": {
                                "$ref": "#/definitions/common/reqMedStr"
                            },
                            "id": {
                                "$ref": "#/definitions/common/reqMedStr"
                            },
                            "description": {
                                "$ref": "#/definitions/common/description"
                            },
                            "defaultValue": {
                                "type": "number"
                            },
                            "required": {
                                "type": "boolean"
                            },
                            "validMin": {
                                "type": "number"
                            },
                            "validMax": {
                                "type": "number"
                            }
                        },
                        "additionalProperties": false,
                        "required": [
                            "type",
                            "label"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "jsonTemplate"
                                ]
                            },
                            "label": {
                                "$ref": "#/definitions/common/reqMedStr"
                            },
                            "id": {
                                "$ref": "#/definitions/common/reqMedStr"
                            },
                            "description": {
                                "$ref": "#/definitions/common/description"
                            },
                            "defaultValue": {
                                "type": "string",
                                "maxLength": 32767
                            },
                            "required": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "required": [
                            "type",
                            "label"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "payloadPath"
                                ]
                            },
                            "label": {
                                "$ref": "#/definitions/common/reqMedStr"
                            },
                            "id": {
                                "$ref": "#/definitions/common/reqMedStr"
                            },
                            "description": {
                                "$ref": "#/definitions/common/description"
                            },
                            "required": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "required": [
                            "type",
                            "label"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "section"
                                ]
                            },
                            "label": {
                                "$ref": "#/definitions/common/reqMedStr"
                            },
                            "id": {
                                "$ref": "#/definitions/common/reqMedStr"
                            },
                            "description": {
                                "$ref": "#/definitions/common/description"
                            }
                        },
                        "additionalProperties": false,
                        "required": [
                            "type",
                            "label"
                        ]
                    }
                ]
            },
            "date": {
                "type": "string",
                "format": "date-time"
            },
            "description": {
                "type": "string",
                "maxLength": 32767
            },
            "deviceAttributes": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "$ref": "#/definitions/common/key"
                        },
                        "dataType": {
                            "type": "string",
                            "enum": [
                                "string",
                                "number",
                                "gps",
                                "boolean"
                            ]
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "attributeTags": {
                            "$ref": "#/definitions/common/objectTags"
                        },
                        "system": {
                            "$ref": "#/definitions/common/systemAttributes"
                        }
                    },
                    "required": [
                        "name",
                        "dataType"
                    ],
                    "additionalProperties": false
                },
                "maxItems": 256
            },
            "deviceClass": {
                "type": "string",
                "enum": [
                    "standalone",
                    "gateway",
                    "peripheral",
                    "floating",
                    "edgeCompute",
                    "system"
                ]
            },
            "domainName": {
                "type": "string",
                "maxLength": 1024,
                "minLength": 3
            },
            "email": {
                "type": "string",
                "format": "email",
                "maxLength": 1024
            },
            "eventSourceType": {
                "type": "string",
                "enum": [
                    "flow",
                    "user",
                    "device",
                    "apiToken",
                    "experienceUser",
                    "public"
                ]
            },
            "eventState": {
                "type": "string",
                "enum": [
                    "new",
                    "acknowledged",
                    "resolved"
                ]
            },
            "expSourceType": {
                "type": "string",
                "enum": [
                    "flow",
                    "user",
                    "apiToken"
                ]
            },
            "filterType": {
                "type": "string",
                "enum": [
                    "all",
                    "whitelist",
                    "blacklist"
                ]
            },
            "globals": {
                "type": "array",
                "maxItems": 100,
                "items": {
                    "type": "object",
                    "properties": {
                        "key": {
                            "$ref": "#/definitions/common/key"
                        },
                        "json": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 32767
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "key",
                        "json"
                    ]
                }
            },
            "helper": {
                "type": "string",
                "minLength": 4,
                "maxLength": 255,
                "pattern": ".*{{.+}}.*"
            },
            "imageDataUri": {
                "type": "string",
                "maxLength": 32767,
                "pattern": "^data:image/(jpg|jpeg|png|svg\\+xml);base64,[0-9a-zA-Z+/=]*$"
            },
            "key": {
                "type": "string",
                "pattern": "^[0-9a-zA-Z_-]{1,255}$"
            },
            "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
            },
            "nullableName": {
                "type": [
                    "string",
                    "null"
                ],
                "minLength": 1,
                "maxLength": 255
            },
            "nullableObjectId": {
                "type": [
                    "string",
                    "null"
                ],
                "pattern": "^[A-Fa-f\\d]{24}$"
            },
            "objectId": {
                "type": "string",
                "pattern": "^[A-Fa-f\\d]{24}$"
            },
            "objectIdOrNull": {
                "oneOf": [
                    {
                        "$ref": "#/definitions/common/objectId"
                    },
                    {
                        "type": "null"
                    }
                ]
            },
            "objectIds": {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/common/objectId"
                },
                "maxItems": 1000
            },
            "objectTags": {
                "type": "object",
                "patternProperties": {
                    "^[0-9a-zA-Z_-]{1,255}$": {
                        "$ref": "#/definitions/common/name"
                    }
                },
                "additionalProperties": false
            },
            "optMedStr": {
                "type": "string",
                "maxLength": 1024
            },
            "orgApiScope": {
                "oneOf": [
                    {
                        "$ref": "#/definitions/common/applicationApiScope"
                    },
                    {
                        "type": "string",
                        "enum": [
                            "all.Organization",
                            "all.Organization.read",
                            "applications.*",
                            "auditLog.*",
                            "auditLogs.*",
                            "dashboard.*",
                            "dashboards.*",
                            "org.*",
                            "applications.get",
                            "applications.post",
                            "applications.import",
                            "applications.detailedSummary",
                            "auditLog.get",
                            "auditLogs.get",
                            "dashboard.patch",
                            "dashboard.delete",
                            "dashboard.sendReport",
                            "dashboards.get",
                            "dashboards.post",
                            "org.get",
                            "org.patch",
                            "org.delete",
                            "org.pendingInvites",
                            "org.inviteMember",
                            "org.revokeInvite",
                            "org.modifyMember",
                            "org.removeMember",
                            "org.payloadCounts",
                            "org.invoices",
                            "org.currentCard",
                            "org.chargeDetails",
                            "org.transferResources"
                        ]
                    }
                ]
            },
            "orgRole": {
                "type": "string",
                "enum": [
                    "admin",
                    "edit",
                    "collaborate",
                    "view",
                    "none"
                ]
            },
            "outputIds": {
                "type": "array",
                "items": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "maxItems": 100
                },
                "maxItems": 100
            },
            "ownerType": {
                "type": "string",
                "enum": [
                    "user",
                    "organization"
                ]
            },
            "password": {
                "type": "string",
                "minLength": 8,
                "maxLength": 2048
            },
            "queryJson": {
                "type": "string",
                "maxLength": 8192
            },
            "queryJsonOrNull": {
                "type": [
                    "string",
                    "null"
                ],
                "maxLength": 8192
            },
            "reqMedStr": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1024
            },
            "resourceRoles": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "resourceId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "role": {
                            "type": "string",
                            "enum": [
                                "collaborate",
                                "view",
                                "none"
                            ]
                        }
                    },
                    "required": [
                        "resourceId",
                        "role"
                    ],
                    "additionalProperties": false
                },
                "maxItems": 1000
            },
            "responseCode": {
                "type": "integer",
                "minimum": 100,
                "maximum": 599
            },
            "safeFileName": {
                "type": "string",
                "pattern": "^(?!\\.{1,2}$)[0-9a-zA-Z_.-]{1,255}$"
            },
            "shortString": {
                "type": "string",
                "maxLength": 1024
            },
            "slug": {
                "type": "string",
                "minLength": 4,
                "maxLength": 63,
                "pattern": "^[0-9a-z-]*$"
            },
            "sortDirection": {
                "type": "string",
                "enum": [
                    "asc",
                    "desc",
                    "ASC",
                    "DESC",
                    ""
                ]
            },
            "sourceType": {
                "type": "string",
                "enum": [
                    "flow",
                    "user",
                    "device",
                    "apiToken",
                    "notebook"
                ]
            },
            "staticReply": {
                "oneOf": [
                    {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "string"
                            },
                            "statusCode": {
                                "type": "number",
                                "min": 100,
                                "max": 599,
                                "integer": true
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "page",
                                    "redirect"
                                ]
                            }
                        },
                        "required": [
                            "value",
                            "type"
                        ],
                        "additionalProperties": false
                    },
                    {
                        "type": "null"
                    }
                ]
            },
            "status": {
                "type": "string",
                "enum": [
                    "active",
                    "inactive"
                ]
            },
            "systemAttributes": {
                "type": "object",
                "properties": {
                    "aggregation": {
                        "$ref": "#/definitions/common/aggregation"
                    },
                    "childAttributes": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "$ref": "#/definitions/common/key"
                                },
                                "mode": {
                                    "$ref": "#/definitions/common/filterType"
                                },
                                "deviceIds": {
                                    "$ref": "#/definitions/common/objectIds"
                                },
                                "deviceTags": {
                                    "$ref": "#/definitions/common/tagsOptional"
                                }
                            },
                            "required": [
                                "name",
                                "mode"
                            ],
                            "additionalProperties": false
                        },
                        "maxItems": 256
                    }
                },
                "additionalProperties": false
            },
            "systemInterval": {
                "type": "integer",
                "minimum": 5,
                "maximum": 3600
            },
            "tagOptional": {
                "type": "object",
                "properties": {
                    "key": {
                        "$ref": "#/definitions/common/key"
                    },
                    "value": {
                        "$ref": "#/definitions/common/name"
                    }
                },
                "additionalProperties": false
            },
            "tagRequired": {
                "type": "object",
                "properties": {
                    "key": {
                        "$ref": "#/definitions/common/key"
                    },
                    "value": {
                        "$ref": "#/definitions/common/name"
                    }
                },
                "required": [
                    "key",
                    "value"
                ],
                "additionalProperties": false
            },
            "tagsOptional": {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/common/tagOptional"
                },
                "maxItems": 100
            },
            "tagsRequired": {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/common/tagRequired"
                },
                "maxItems": 100
            },
            "templateArray": {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/common/helper"
                },
                "maxItems": 1000
            },
            "templateOrObjectId": {
                "oneOf": [
                    {
                        "$ref": "#/definitions/common/objectId"
                    },
                    {
                        "$ref": "#/definitions/common/helper"
                    }
                ]
            },
            "templateOrSafeFileName": {
                "oneOf": [
                    {
                        "$ref": "#/definitions/common/safeFileName"
                    },
                    {
                        "$ref": "#/definitions/common/helper"
                    }
                ]
            },
            "templateTags": {
                "type": "array",
                "maxItems": 100,
                "items": {
                    "type": "object",
                    "properties": {
                        "key": {
                            "oneOf": [
                                {
                                    "$ref": "#/definitions/common/key"
                                },
                                {
                                    "$ref": "#/definitions/common/helper"
                                }
                            ]
                        },
                        "value": {
                            "$ref": "#/definitions/common/name"
                        }
                    },
                    "additionalProperties": false
                }
            },
            "templatesOrObjectIds": {
                "type": "array",
                "maxItems": 100,
                "items": {
                    "$ref": "#/definitions/common/templateOrObjectId"
                }
            },
            "timeFormats": {
                "oneOf": [
                    {
                        "type": "string"
                    },
                    {
                        "type": "number"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "$date": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "required": [
                            "$date"
                        ]
                    }
                ]
            },
            "token": {
                "type": "string",
                "minLength": 1
            },
            "upload": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "patternProperties": {
                            "^.*$": {
                                "type": "string"
                            }
                        },
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "bucket": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "userApiScope": {
                "oneOf": [
                    {
                        "$ref": "#/definitions/common/orgApiScope"
                    },
                    {
                        "type": "string",
                        "enum": [
                            "all.User",
                            "all.User.read",
                            "applicationTemplates.*",
                            "applicationTemplates.get",
                            "me.*",
                            "orgs.*",
                            "me.get",
                            "me.patch",
                            "me.delete",
                            "me.verifyEmail",
                            "me.changePassword",
                            "me.enableTwoFactorAuth",
                            "me.disableTwoFactorAuth",
                            "me.disconnectGithub",
                            "me.connectGithub",
                            "me.disconnectTwitter",
                            "me.connectTwitter",
                            "me.addRecentItem",
                            "me.fetchRecentItems",
                            "me.payloadCounts",
                            "me.transferResources",
                            "orgs.get",
                            "orgs.post"
                        ]
                    }
                ]
            },
            "userPassword": {
                "type": "string",
                "minLength": 8,
                "maxLength": 2048,
                "pattern": "^(?=.*[A-Z])(?=.*[^A-z0-9])(?=.*[0-9])(?=.*[a-z]).{8,}$"
            },
            "validateContextCtx": {
                "type": "object",
                "patternProperties": {
                    "^[0-9a-zA-Z_-]{1,255}$": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/common/contextVariableValue/oneOf"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "$ref": "#/definitions/common/objectId"
                                    },
                                    "name": {
                                        "$ref": "#/definitions/common/name"
                                    },
                                    "description": {
                                        "$ref": "#/definitions/common/description"
                                    },
                                    "tags": {
                                        "type": "object",
                                        "patternProperties": {
                                            "^[0-9a-zA-Z_-]{1,255}$": {
                                                "type": "array",
                                                "minItems": 1,
                                                "items": {
                                                    "$ref": "#/definitions/common/name"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    }
                },
                "additionalProperties": false
            },
            "version": {
                "type": "string",
                "pattern": "^(0|([1-9]\\d*))\\.(0|([1-9]\\d*))\\.(0|([1-9]\\d*))$"
            },
            "blockComponents": {
                "attributes": {
                    "oneOf": [
                        {
                            "type": "null"
                        },
                        {
                            "type": "array",
                            "maxItems": 100,
                            "items": {
                                "type": "string",
                                "maxLength": 255
                            }
                        }
                    ]
                },
                "condition": {
                    "type": "object",
                    "properties": {
                        "color": {
                            "$ref": "#/definitions/common/color"
                        },
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "label": {
                            "$ref": "#/definitions/common/description"
                        },
                        "condition": {
                            "type": "string",
                            "maxLength": 2048
                        },
                        "imageUrl": {
                            "$ref": "#/definitions/common/description"
                        },
                        "shape": {
                            "type": "string",
                            "enum": [
                                "circle",
                                "square",
                                "triangle-down",
                                "triangle-up",
                                "octagon"
                            ]
                        }
                    },
                    "additionalProperties": false
                },
                "commonSegments": {
                    "type": "array",
                    "maxItems": 255,
                    "items": {
                        "$ref": "#/definitions/common/blockComponents/commonSegment"
                    }
                },
                "conditions": {
                    "type": "array",
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/common/blockComponents/condition"
                    }
                },
                "deviceIdsAllowCtx": {
                    "type": "array",
                    "maxItems": 100,
                    "items": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "deviceTagsAllowCtx": {
                    "type": "array",
                    "maxItems": 100,
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string",
                                "maxLength": 255
                            },
                            "value": {
                                "type": "string",
                                "maxLength": 255
                            },
                            "fromCtx": {
                                "type": "string",
                                "maxLength": 255
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "commonSegment": {
                    "type": "object",
                    "properties": {
                        "attribute": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "aggregation": {
                            "$ref": "#/definitions/common/aggregation"
                        },
                        "color": {
                            "$ref": "#/definitions/common/color"
                        },
                        "deviceIds": {
                            "$ref": "#/definitions/common/blockComponents/deviceIdsAllowCtx"
                        },
                        "deviceTags": {
                            "$ref": "#/definitions/common/blockComponents/deviceTagsAllowCtx"
                        },
                        "label": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "yAxisLabel": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "lineWeight": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 5
                        },
                        "detectDataGaps": {
                            "type": "boolean"
                        },
                        "graphType": {
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    "additionalProperties": false
                },
                "duration": {
                    "type": "integer",
                    "minimum": 0
                },
                "imageOverlayRequiredOverlayProps": [
                    "type",
                    "position",
                    "size",
                    "defaultCondition"
                ],
                "imageOverlaySizes": {
                    "type": "string",
                    "enum": [
                        "small",
                        "medium",
                        "large"
                    ]
                },
                "inputControlDefaultQuery": {
                    "type": "object",
                    "properties": {
                        "attribute": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "aggregation": {
                            "$ref": "#/definitions/common/aggregation"
                        },
                        "deviceIds": {
                            "$ref": "#/definitions/common/blockComponents/deviceIdsAllowCtx"
                        },
                        "deviceTags": {
                            "$ref": "#/definitions/common/blockComponents/deviceTagsAllowCtx"
                        }
                    },
                    "additionalProperties": false
                },
                "inputControlGrid": {
                    "type": "object",
                    "properties": {
                        "h": {
                            "type": "number"
                        },
                        "w": {
                            "type": "number"
                        },
                        "x": {
                            "type": "number"
                        },
                        "y": {
                            "type": "number"
                        }
                    },
                    "additionalProperties": false
                },
                "largeString": {
                    "type": "string",
                    "maxLength": 73727
                },
                "resolution": {
                    "oneOf": [
                        {
                            "type": "integer",
                            "minimum": 0
                        },
                        {
                            "type": "null"
                        },
                        {
                            "type": "string",
                            "maxLength": 255
                        }
                    ]
                },
                "stringXyCoordinate": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 255
                },
                "shortStringOrNumber": {
                    "oneOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "string",
                            "maxLength": 64
                        }
                    ]
                }
            },
            "blocks": {
                "applicationList": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "title": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "startX": {
                            "type": "number"
                        },
                        "startY": {
                            "type": "number"
                        },
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        },
                        "blockType": {
                            "type": "string",
                            "enum": [
                                "application-list"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "filter": {
                                    "type": "string",
                                    "maxLength": 255
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "blockType",
                        "startX",
                        "startY",
                        "width",
                        "height"
                    ],
                    "additionalProperties": false
                },
                "bar": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "title": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "startX": {
                            "type": "number"
                        },
                        "startY": {
                            "type": "number"
                        },
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        },
                        "blockType": {
                            "type": "string",
                            "enum": [
                                "bar"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "realTime": {
                                    "type": "boolean"
                                },
                                "duration": {
                                    "$ref": "#/definitions/common/blockComponents/duration"
                                },
                                "xAxisFormat": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "xAxisLabel": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "xAxisMax": {
                                    "$ref": "#/definitions/common/blockComponents/shortStringOrNumber"
                                },
                                "xAxisMin": {
                                    "$ref": "#/definitions/common/blockComponents/shortStringOrNumber"
                                },
                                "segments": {
                                    "$ref": "#/definitions/common/blockComponents/commonSegments"
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "blockType",
                        "startX",
                        "startY",
                        "width",
                        "height"
                    ],
                    "additionalProperties": false
                },
                "customBlock": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "title": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "startX": {
                            "type": "number"
                        },
                        "startY": {
                            "type": "number"
                        },
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        },
                        "blockType": {
                            "type": "string",
                            "enum": [
                                "custom-chart",
                                "custom-html"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "configuration": {
                                    "oneOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "headContent": {
                                                    "$ref": "#/definitions/common/description"
                                                },
                                                "bodyContent": {
                                                    "$ref": "#/definitions/common/description"
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        {
                                            "$ref": "#/definitions/common/description"
                                        }
                                    ]
                                },
                                "segments": {
                                    "type": "array",
                                    "maxItems": 100,
                                    "items": {
                                        "oneOf": [
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "queryType": {
                                                        "type": "string",
                                                        "enum": [
                                                            "time-series"
                                                        ]
                                                    },
                                                    "id": {
                                                        "type": "string",
                                                        "maxLength": 48
                                                    },
                                                    "attribute": {
                                                        "type": "string",
                                                        "maxLength": 255
                                                    },
                                                    "aggregation": {
                                                        "$ref": "#/definitions/common/aggregation"
                                                    },
                                                    "deviceIds": {
                                                        "$ref": "#/definitions/common/blockComponents/deviceIdsAllowCtx"
                                                    },
                                                    "deviceTags": {
                                                        "$ref": "#/definitions/common/blockComponents/deviceTagsAllowCtx"
                                                    },
                                                    "duration": {
                                                        "$ref": "#/definitions/common/blockComponents/duration"
                                                    },
                                                    "resolution": {
                                                        "$ref": "#/definitions/common/blockComponents/resolution"
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "queryType": {
                                                        "type": "string",
                                                        "enum": [
                                                            "gauge"
                                                        ]
                                                    },
                                                    "id": {
                                                        "type": "string",
                                                        "maxLength": 48
                                                    },
                                                    "attribute": {
                                                        "type": "string",
                                                        "maxLength": 255
                                                    },
                                                    "aggregation": {
                                                        "$ref": "#/definitions/common/aggregation"
                                                    },
                                                    "deviceIds": {
                                                        "$ref": "#/definitions/common/blockComponents/deviceIdsAllowCtx"
                                                    },
                                                    "deviceTags": {
                                                        "$ref": "#/definitions/common/blockComponents/deviceTagsAllowCtx"
                                                    },
                                                    "duration": {
                                                        "$ref": "#/definitions/common/blockComponents/duration"
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "queryType": {
                                                        "type": "string",
                                                        "enum": [
                                                            "data-table"
                                                        ]
                                                    },
                                                    "id": {
                                                        "type": "string",
                                                        "maxLength": 48
                                                    },
                                                    "dataTableId": {
                                                        "$ref": "#/definitions/common/objectId"
                                                    },
                                                    "query": {
                                                        "$ref": "#/definitions/common/description"
                                                    },
                                                    "queryMode": {
                                                        "type": "string",
                                                        "enum": [
                                                            "$or",
                                                            "$and",
                                                            "advanced"
                                                        ]
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        ]
                                    }
                                },
                                "vegaVersion": {
                                    "type": "string",
                                    "enum": [
                                        "vegaLite2",
                                        "vegaLite3",
                                        "vega4",
                                        "vega5"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "blockType",
                        "startX",
                        "startY",
                        "width",
                        "height"
                    ],
                    "additionalProperties": false
                },
                "dashboardList": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "title": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "startX": {
                            "type": "number"
                        },
                        "startY": {
                            "type": "number"
                        },
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        },
                        "blockType": {
                            "type": "string",
                            "enum": [
                                "dashboard-list"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "filter": {
                                    "type": "string",
                                    "maxLength": 255
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "blockType",
                        "startX",
                        "startY",
                        "width",
                        "height"
                    ],
                    "additionalProperties": false
                },
                "dataTable": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "title": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "startX": {
                            "type": "number"
                        },
                        "startY": {
                            "type": "number"
                        },
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        },
                        "blockType": {
                            "type": "string",
                            "enum": [
                                "data-table"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "dataTableId": {
                                    "$ref": "#/definitions/common/objectId"
                                },
                                "defaultSortColumn": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "defaultSortDirection": {
                                    "$ref": "#/definitions/common/sortDirection"
                                },
                                "query": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "queryMode": {
                                    "type": "string",
                                    "enum": [
                                        "$or",
                                        "$and",
                                        "advanced"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "blockType",
                        "startX",
                        "startY",
                        "width",
                        "height"
                    ],
                    "additionalProperties": false
                },
                "deviceList": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "title": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "startX": {
                            "type": "number"
                        },
                        "startY": {
                            "type": "number"
                        },
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        },
                        "blockType": {
                            "type": "string",
                            "enum": [
                                "device-list"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "additionalAttributes": {
                                    "$ref": "#/definitions/common/blockComponents/attributes"
                                },
                                "excludeConnectionInfo": {
                                    "type": "boolean"
                                },
                                "deviceLinkNewWindow": {
                                    "type": "boolean"
                                },
                                "deviceLinkType": {
                                    "type": "string",
                                    "enum": [
                                        "custom",
                                        "default"
                                    ]
                                },
                                "deviceLinkUrl": {
                                    "type": "string",
                                    "maxLength": 2048
                                },
                                "match": {
                                    "type": "string",
                                    "enum": [
                                        "unfiltered",
                                        "all",
                                        "any"
                                    ]
                                },
                                "showPublicFilter": {
                                    "type": "boolean"
                                },
                                "sortField": {
                                    "type": "string",
                                    "enum": [
                                        "id",
                                        "creationDate",
                                        "lastUpdated",
                                        "name"
                                    ]
                                },
                                "sortDirection": {
                                    "$ref": "#/definitions/common/sortDirection"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "maxLength": 255
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "ids": {
                                                    "$ref": "#/definitions/common/blockComponents/deviceIdsAllowCtx"
                                                },
                                                "tags": {
                                                    "$ref": "#/definitions/common/blockComponents/deviceTagsAllowCtx"
                                                },
                                                "searchParam": {
                                                    "type": "string",
                                                    "maxLength": 255
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    ]
                                },
                                "query": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "columns": {
                                    "type": "array",
                                    "maxItems": 100,
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "maxLength": 48
                                            },
                                            "type": {
                                                "type": "string",
                                                "enum": [
                                                    "id",
                                                    "connectionStatus",
                                                    "attribute",
                                                    "tag",
                                                    "name",
                                                    "custom",
                                                    "created",
                                                    "updated"
                                                ]
                                            },
                                            "source": {
                                                "type": "string",
                                                "maxLength": 255
                                            },
                                            "headerTemplate": {
                                                "type": "string",
                                                "maxLength": 1024
                                            },
                                            "rowTemplate": {
                                                "$ref": "#/definitions/common/description"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "blockType",
                        "startX",
                        "startY",
                        "width",
                        "height"
                    ],
                    "additionalProperties": false
                },
                "deviceLog": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "title": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "startX": {
                            "type": "number"
                        },
                        "startY": {
                            "type": "number"
                        },
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        },
                        "blockType": {
                            "type": "string",
                            "enum": [
                                "device-log"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "deviceIds": {
                                    "$ref": "#/definitions/common/blockComponents/deviceIdsAllowCtx"
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "blockType",
                        "startX",
                        "startY",
                        "width",
                        "height"
                    ],
                    "additionalProperties": false
                },
                "deviceStateTable": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "title": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "startX": {
                            "type": "number"
                        },
                        "startY": {
                            "type": "number"
                        },
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        },
                        "blockType": {
                            "type": "string",
                            "enum": [
                                "device-state-table"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "attributes": {
                                    "$ref": "#/definitions/common/blockComponents/attributes"
                                },
                                "deviceIds": {
                                    "$ref": "#/definitions/common/blockComponents/deviceIdsAllowCtx"
                                },
                                "deviceTags": {
                                    "$ref": "#/definitions/common/blockComponents/deviceTagsAllowCtx"
                                },
                                "duration": {
                                    "$ref": "#/definitions/common/blockComponents/duration"
                                },
                                "sortDirection": {
                                    "type": "integer",
                                    "minimum": -1,
                                    "maximum": 1
                                },
                                "sortIndex": {
                                    "type": "integer",
                                    "minimum": 0,
                                    "maximum": 100
                                },
                                "columns": {
                                    "type": "array",
                                    "maxItems": 100,
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "headerTemplate": {
                                                "type": "string",
                                                "maxLength": 1024
                                            },
                                            "id": {
                                                "type": "string",
                                                "maxLength": 48
                                            },
                                            "rowTemplate": {
                                                "$ref": "#/definitions/common/description"
                                            },
                                            "type": {
                                                "type": "string",
                                                "enum": [
                                                    "deviceTags",
                                                    "deviceId",
                                                    "deviceName",
                                                    "timestamp",
                                                    "attribute"
                                                ]
                                            },
                                            "attribute": {
                                                "type": "string",
                                                "maxLength": 255
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "blockType",
                        "startX",
                        "startY",
                        "width",
                        "height"
                    ],
                    "additionalProperties": false
                },
                "eventList": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "title": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "startX": {
                            "type": "number"
                        },
                        "startY": {
                            "type": "number"
                        },
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        },
                        "blockType": {
                            "type": "string",
                            "enum": [
                                "event-list"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "allowUpdates": {
                                    "type": "boolean"
                                },
                                "query": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "sortDirection": {
                                    "$ref": "#/definitions/common/sortDirection"
                                },
                                "sortField": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "filter": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "eventState": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "maxLength": 255
                                        },
                                        {
                                            "type": "null"
                                        },
                                        {
                                            "type": "object",
                                            "additionalProperties": false
                                        }
                                    ]
                                },
                                "columnErrors": {
                                    "type": "object",
                                    "additionalProperties": false
                                },
                                "columns": {
                                    "type": "array",
                                    "maxItems": 100,
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "maxLength": 48
                                            },
                                            "selectedTag": {
                                                "type": "string",
                                                "maxLength": 255
                                            },
                                            "type": {
                                                "type": "string",
                                                "enum": [
                                                    "level",
                                                    "subject",
                                                    "subjectWithMessage",
                                                    "creationDate",
                                                    "creationDateWithSource",
                                                    "lastUpdatedDate",
                                                    "lastUpdatedDateWithSource",
                                                    "id",
                                                    "state",
                                                    "tag",
                                                    "deviceName",
                                                    "sourceId"
                                                ]
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "blockType",
                        "startX",
                        "startY",
                        "width",
                        "height"
                    ],
                    "additionalProperties": false
                },
                "gauge": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "title": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "startX": {
                            "type": "number"
                        },
                        "startY": {
                            "type": "number"
                        },
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        },
                        "blockType": {
                            "type": "string",
                            "enum": [
                                "gauge"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "realTime": {
                                    "type": "boolean"
                                },
                                "displayAsPercentage": {
                                    "type": "boolean"
                                },
                                "duration": {
                                    "$ref": "#/definitions/common/blockComponents/duration"
                                },
                                "gaugeMax": {
                                    "$ref": "#/definitions/common/blockComponents/shortStringOrNumber"
                                },
                                "gaugeMin": {
                                    "$ref": "#/definitions/common/blockComponents/shortStringOrNumber"
                                },
                                "gaugeType": {
                                    "type": "string",
                                    "enum": [
                                        "battery",
                                        "dial",
                                        "number",
                                        "tank",
                                        "thermometer"
                                    ]
                                },
                                "precision": {
                                    "$ref": "#/definitions/common/blockComponents/shortStringOrNumber"
                                },
                                "precisionType": {
                                    "type": "string",
                                    "enum": [
                                        "floating",
                                        "significant"
                                    ]
                                },
                                "segment": {
                                    "$ref": "#/definitions/common/blockComponents/commonSegment"
                                },
                                "conditions": {
                                    "$ref": "#/definitions/common/blockComponents/conditions"
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "blockType",
                        "startX",
                        "startY",
                        "width",
                        "height"
                    ],
                    "additionalProperties": false
                },
                "graph": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "title": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "startX": {
                            "type": "number"
                        },
                        "startY": {
                            "type": "number"
                        },
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        },
                        "blockType": {
                            "type": "string",
                            "enum": [
                                "graph"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "realTime": {
                                    "type": "boolean"
                                },
                                "duration": {
                                    "$ref": "#/definitions/common/blockComponents/duration"
                                },
                                "resolution": {
                                    "$ref": "#/definitions/common/blockComponents/resolution"
                                },
                                "recharts": {
                                    "type": "boolean"
                                },
                                "displayType": {
                                    "type": "string",
                                    "enum": [
                                        "stick",
                                        "line"
                                    ]
                                },
                                "segments": {
                                    "type": "array",
                                    "maxItems": 100,
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "attribute": {
                                                "type": "string",
                                                "maxLength": 255
                                            },
                                            "aggregation": {
                                                "$ref": "#/definitions/common/aggregation"
                                            },
                                            "color": {
                                                "$ref": "#/definitions/common/color"
                                            },
                                            "cumulative": {
                                                "type": "boolean"
                                            },
                                            "detectDataGaps": {
                                                "type": "boolean"
                                            },
                                            "expression": {
                                                "type": "string",
                                                "maxLength": 255
                                            },
                                            "graphType": {
                                                "type": "string",
                                                "enum": [
                                                    "area",
                                                    "bar",
                                                    "line"
                                                ]
                                            },
                                            "label": {
                                                "type": "string",
                                                "maxLength": 255
                                            },
                                            "yAxisFormat": {
                                                "type": "string",
                                                "maxLength": 255
                                            },
                                            "yAxisLabel": {
                                                "type": "string",
                                                "maxLength": 255
                                            },
                                            "yAxisMax": {
                                                "$ref": "#/definitions/common/blockComponents/shortStringOrNumber"
                                            },
                                            "yAxisMin": {
                                                "$ref": "#/definitions/common/blockComponents/shortStringOrNumber"
                                            },
                                            "lineType": {
                                                "type": "string",
                                                "enum": [
                                                    "monotone",
                                                    "step",
                                                    "stepAfter",
                                                    "linear",
                                                    "stepBefore"
                                                ]
                                            },
                                            "lineWeight": {
                                                "type": "integer",
                                                "minimum": 0,
                                                "maximum": 5
                                            },
                                            "dotWeight": {
                                                "type": "integer",
                                                "minimum": 0,
                                                "maximum": 5
                                            },
                                            "deviceIds": {
                                                "$ref": "#/definitions/common/blockComponents/deviceIdsAllowCtx"
                                            },
                                            "deviceTags": {
                                                "$ref": "#/definitions/common/blockComponents/deviceTagsAllowCtx"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "blockType",
                        "startX",
                        "startY",
                        "width",
                        "height"
                    ],
                    "additionalProperties": false
                },
                "heatmap": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "title": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "startX": {
                            "type": "number"
                        },
                        "startY": {
                            "type": "number"
                        },
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        },
                        "blockType": {
                            "type": "string",
                            "enum": [
                                "heatmap"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "additionalAttributes": {
                                    "$ref": "#/definitions/common/blockComponents/attributes"
                                },
                                "attribute": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "defaultBearing": {
                                    "type": "number"
                                },
                                "defaultCenter": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "defaultPitch": {
                                    "type": "number"
                                },
                                "defaultZoom": {
                                    "$ref": "#/definitions/common/blockComponents/shortStringOrNumber"
                                },
                                "deviceIds": {
                                    "$ref": "#/definitions/common/blockComponents/deviceIdsAllowCtx"
                                },
                                "deviceTags": {
                                    "$ref": "#/definitions/common/blockComponents/deviceTagsAllowCtx"
                                },
                                "duration": {
                                    "$ref": "#/definitions/common/blockComponents/duration"
                                },
                                "mapStyle": {
                                    "type": "string",
                                    "enum": [
                                        "normal",
                                        "satellite"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "blockType",
                        "startX",
                        "startY",
                        "width",
                        "height"
                    ],
                    "additionalProperties": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "title": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "startX": {
                            "type": "number"
                        },
                        "startY": {
                            "type": "number"
                        },
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        },
                        "blockType": {
                            "type": "string",
                            "enum": [
                                "image"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "bgColor": {
                                    "$ref": "#/definitions/common/color"
                                },
                                "imageLinkNewWindow": {
                                    "type": "boolean"
                                },
                                "imageLinkUrl": {
                                    "type": "string",
                                    "maxLength": 2048
                                },
                                "imageUrl": {
                                    "$ref": "#/definitions/common/description"
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "blockType",
                        "startX",
                        "startY",
                        "width",
                        "height"
                    ],
                    "additionalProperties": false
                },
                "iframe": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "title": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "startX": {
                            "type": "number"
                        },
                        "startY": {
                            "type": "number"
                        },
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        },
                        "blockType": {
                            "type": "string",
                            "enum": [
                                "iframe"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "url": {
                                    "type": "string",
                                    "maxLength": 2048
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "blockType",
                        "startX",
                        "startY",
                        "width",
                        "height"
                    ],
                    "additionalProperties": false
                },
                "imageOverlay": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "title": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "startX": {
                            "type": "number"
                        },
                        "startY": {
                            "type": "number"
                        },
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        },
                        "blockType": {
                            "type": "string",
                            "enum": [
                                "image-overlay"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "imageUrl": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "backgroundColor": {
                                    "$ref": "#/definitions/common/color"
                                },
                                "defaultZoom": {
                                    "type": "number"
                                },
                                "segments": {
                                    "type": "array",
                                    "maxItems": 100,
                                    "items": {
                                        "oneOf": [
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "queryType": {
                                                        "type": "string",
                                                        "enum": [
                                                            "gauge"
                                                        ]
                                                    },
                                                    "id": {
                                                        "type": "string",
                                                        "maxLength": 48
                                                    },
                                                    "attribute": {
                                                        "type": "string",
                                                        "maxLength": 255
                                                    },
                                                    "aggregation": {
                                                        "$ref": "#/definitions/common/aggregation"
                                                    },
                                                    "deviceIds": {
                                                        "$ref": "#/definitions/common/blockComponents/deviceIdsAllowCtx"
                                                    },
                                                    "deviceTags": {
                                                        "$ref": "#/definitions/common/blockComponents/deviceTagsAllowCtx"
                                                    },
                                                    "duration": {
                                                        "$ref": "#/definitions/common/blockComponents/duration"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        ]
                                    }
                                },
                                "overlays": {
                                    "type": "array",
                                    "maxItems": 100,
                                    "items": {
                                        "oneOf": [
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "type": {
                                                        "type": "string",
                                                        "enum": [
                                                            "indicator",
                                                            "label",
                                                            "image"
                                                        ]
                                                    },
                                                    "size": {
                                                        "$ref": "#/definitions/common/blockComponents/imageOverlaySizes"
                                                    },
                                                    "position": {
                                                        "$ref": "#/definitions/common/blockComponents/stringXyCoordinate"
                                                    },
                                                    "popupTemplate": {
                                                        "$ref": "#/definitions/common/description"
                                                    },
                                                    "conditions": {
                                                        "$ref": "#/definitions/common/blockComponents/conditions"
                                                    },
                                                    "defaultCondition": {
                                                        "$ref": "#/definitions/common/blockComponents/condition"
                                                    }
                                                },
                                                "required": {
                                                    "$ref": "#/definitions/common/blockComponents/imageOverlayRequiredOverlayProps"
                                                },
                                                "additionalProperties": false
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "type": {
                                                        "type": "string",
                                                        "enum": [
                                                            "value"
                                                        ]
                                                    },
                                                    "size": {
                                                        "$ref": "#/definitions/common/blockComponents/imageOverlaySizes"
                                                    },
                                                    "position": {
                                                        "$ref": "#/definitions/common/blockComponents/stringXyCoordinate"
                                                    },
                                                    "popupTemplate": {
                                                        "$ref": "#/definitions/common/description"
                                                    },
                                                    "conditions": {
                                                        "$ref": "#/definitions/common/blockComponents/conditions"
                                                    },
                                                    "defaultCondition": {
                                                        "$ref": "#/definitions/common/blockComponents/condition"
                                                    },
                                                    "valueTemplate": {
                                                        "type": "string",
                                                        "maxLength": 255
                                                    }
                                                },
                                                "required": {
                                                    "$ref": "#/definitions/common/blockComponents/imageOverlayRequiredOverlayProps"
                                                },
                                                "additionalProperties": false
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "type": {
                                                        "type": "string",
                                                        "enum": [
                                                            "bar"
                                                        ]
                                                    },
                                                    "size": {
                                                        "$ref": "#/definitions/common/blockComponents/imageOverlaySizes"
                                                    },
                                                    "position": {
                                                        "$ref": "#/definitions/common/blockComponents/stringXyCoordinate"
                                                    },
                                                    "popupTemplate": {
                                                        "$ref": "#/definitions/common/description"
                                                    },
                                                    "conditions": {
                                                        "$ref": "#/definitions/common/blockComponents/conditions"
                                                    },
                                                    "defaultCondition": {
                                                        "$ref": "#/definitions/common/blockComponents/condition"
                                                    },
                                                    "min": {
                                                        "$ref": "#/definitions/common/blockComponents/shortStringOrNumber"
                                                    },
                                                    "max": {
                                                        "$ref": "#/definitions/common/blockComponents/shortStringOrNumber"
                                                    },
                                                    "backgroundColor": {
                                                        "$ref": "#/definitions/common/color"
                                                    },
                                                    "valueTemplate": {
                                                        "type": "string",
                                                        "maxLength": 255
                                                    },
                                                    "length": {
                                                        "type": "integer",
                                                        "min": 1,
                                                        "max": 10
                                                    },
                                                    "orientation": {
                                                        "type": "string",
                                                        "enum": [
                                                            "horizontal",
                                                            "vertical"
                                                        ]
                                                    }
                                                },
                                                "required": {
                                                    "$ref": "#/definitions/common/blockComponents/imageOverlayRequiredOverlayProps"
                                                },
                                                "additionalProperties": false
                                            }
                                        ]
                                    }
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "blockType",
                        "startX",
                        "startY",
                        "width",
                        "height",
                        "config"
                    ],
                    "additionalProperties": false
                },
                "indicator": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "title": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "startX": {
                            "type": "number"
                        },
                        "startY": {
                            "type": "number"
                        },
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        },
                        "blockType": {
                            "type": "string",
                            "enum": [
                                "indicator"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "realTime": {
                                    "type": "boolean"
                                },
                                "duration": {
                                    "$ref": "#/definitions/common/blockComponents/duration"
                                },
                                "segments": {
                                    "$ref": "#/definitions/common/blockComponents/commonSegments"
                                },
                                "conditions": {
                                    "$ref": "#/definitions/common/blockComponents/conditions"
                                },
                                "defaultCondition": {
                                    "$ref": "#/definitions/common/blockComponents/condition"
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "blockType",
                        "startX",
                        "startY",
                        "width",
                        "height"
                    ],
                    "additionalProperties": false
                },
                "input": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "title": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "startX": {
                            "type": "number"
                        },
                        "startY": {
                            "type": "number"
                        },
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        },
                        "blockType": {
                            "type": "string",
                            "enum": [
                                "input"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "defaultMode": {
                                    "type": "string",
                                    "enum": [
                                        "unlocked",
                                        "locked"
                                    ]
                                },
                                "controls": {
                                    "type": "array",
                                    "maxItems": 100,
                                    "items": {
                                        "oneOf": [
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "type": {
                                                        "type": "string",
                                                        "enum": [
                                                            "range"
                                                        ]
                                                    },
                                                    "id": {
                                                        "type": "string",
                                                        "maxLength": 48
                                                    },
                                                    "templateId": {
                                                        "type": "string",
                                                        "maxLength": 64
                                                    },
                                                    "label": {
                                                        "type": "string",
                                                        "maxLength": 512
                                                    },
                                                    "color": {
                                                        "$ref": "#/definitions/common/color"
                                                    },
                                                    "grid": {
                                                        "$ref": "#/definitions/common/blockComponents/inputControlGrid"
                                                    },
                                                    "defaultQuery": {
                                                        "$ref": "#/definitions/common/blockComponents/inputControlDefaultQuery"
                                                    },
                                                    "max": {
                                                        "$ref": "#/definitions/common/blockComponents/shortStringOrNumber"
                                                    },
                                                    "min": {
                                                        "$ref": "#/definitions/common/blockComponents/shortStringOrNumber"
                                                    },
                                                    "step": {
                                                        "$ref": "#/definitions/common/blockComponents/shortStringOrNumber"
                                                    },
                                                    "defaultValue": {
                                                        "$ref": "#/definitions/common/blockComponents/shortStringOrNumber"
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "type": {
                                                        "type": "string",
                                                        "enum": [
                                                            "toggle"
                                                        ]
                                                    },
                                                    "id": {
                                                        "type": "string",
                                                        "maxLength": 48
                                                    },
                                                    "templateId": {
                                                        "type": "string",
                                                        "maxLength": 64
                                                    },
                                                    "label": {
                                                        "type": "string",
                                                        "maxLength": 512
                                                    },
                                                    "color": {
                                                        "$ref": "#/definitions/common/color"
                                                    },
                                                    "grid": {
                                                        "$ref": "#/definitions/common/blockComponents/inputControlGrid"
                                                    },
                                                    "defaultQuery": {
                                                        "$ref": "#/definitions/common/blockComponents/inputControlDefaultQuery"
                                                    },
                                                    "defaultValue": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "type": {
                                                        "type": "string",
                                                        "enum": [
                                                            "text"
                                                        ]
                                                    },
                                                    "id": {
                                                        "type": "string",
                                                        "maxLength": 48
                                                    },
                                                    "templateId": {
                                                        "type": "string",
                                                        "maxLength": 64
                                                    },
                                                    "label": {
                                                        "type": "string",
                                                        "maxLength": 512
                                                    },
                                                    "grid": {
                                                        "$ref": "#/definitions/common/blockComponents/inputControlGrid"
                                                    },
                                                    "defaultQuery": {
                                                        "$ref": "#/definitions/common/blockComponents/inputControlDefaultQuery"
                                                    },
                                                    "defaultValue": {
                                                        "type": "string",
                                                        "maxLength": 2048
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "type": {
                                                        "type": "string",
                                                        "enum": [
                                                            "select"
                                                        ]
                                                    },
                                                    "id": {
                                                        "type": "string",
                                                        "maxLength": 48
                                                    },
                                                    "templateId": {
                                                        "type": "string",
                                                        "maxLength": 64
                                                    },
                                                    "label": {
                                                        "type": "string",
                                                        "maxLength": 512
                                                    },
                                                    "grid": {
                                                        "$ref": "#/definitions/common/blockComponents/inputControlGrid"
                                                    },
                                                    "defaultQuery": {
                                                        "$ref": "#/definitions/common/blockComponents/inputControlDefaultQuery"
                                                    },
                                                    "defaultValue": {
                                                        "type": "string",
                                                        "maxLength": 255
                                                    },
                                                    "options": {
                                                        "type": "array",
                                                        "maxItems": 500,
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "value": {
                                                                    "type": "string",
                                                                    "maxLength": 255
                                                                },
                                                                "label": {
                                                                    "type": "string",
                                                                    "maxLength": 255
                                                                }
                                                            },
                                                            "additionalProperties": false
                                                        }
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "type": {
                                                        "type": "string",
                                                        "enum": [
                                                            "help"
                                                        ]
                                                    },
                                                    "id": {
                                                        "type": "string",
                                                        "maxLength": 48
                                                    },
                                                    "templateId": {
                                                        "type": "string",
                                                        "maxLength": 64
                                                    },
                                                    "grid": {
                                                        "$ref": "#/definitions/common/blockComponents/inputControlGrid"
                                                    },
                                                    "help": {
                                                        "$ref": "#/definitions/common/description"
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "type": {
                                                        "type": "string",
                                                        "enum": [
                                                            "button"
                                                        ]
                                                    },
                                                    "action": {
                                                        "type": "string",
                                                        "enum": [
                                                            "workflow",
                                                            "command"
                                                        ]
                                                    },
                                                    "id": {
                                                        "type": "string",
                                                        "maxLength": 48
                                                    },
                                                    "templateId": {
                                                        "type": "string",
                                                        "maxLength": 64
                                                    },
                                                    "label": {
                                                        "type": "string",
                                                        "maxLength": 512
                                                    },
                                                    "grid": {
                                                        "$ref": "#/definitions/common/blockComponents/inputControlGrid"
                                                    },
                                                    "color": {
                                                        "$ref": "#/definitions/common/color"
                                                    },
                                                    "payload": {
                                                        "$ref": "#/definitions/common/description"
                                                    },
                                                    "buttonId": {
                                                        "type": "string",
                                                        "maxLength": 255
                                                    },
                                                    "workflowId": {
                                                        "oneOf": [
                                                            {
                                                                "type": "string",
                                                                "maxLength": 255
                                                            },
                                                            {
                                                                "type": "null"
                                                            }
                                                        ]
                                                    },
                                                    "deviceIds": {
                                                        "$ref": "#/definitions/common/blockComponents/deviceIdsAllowCtx"
                                                    },
                                                    "deviceTags": {
                                                        "$ref": "#/definitions/common/blockComponents/deviceTagsAllowCtx"
                                                    },
                                                    "commandName": {
                                                        "type": "string",
                                                        "maxLength": 255
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        ]
                                    }
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "blockType",
                        "startX",
                        "startY",
                        "width",
                        "height"
                    ],
                    "additionalProperties": false
                },
                "map": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "title": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "startX": {
                            "type": "number"
                        },
                        "startY": {
                            "type": "number"
                        },
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        },
                        "blockType": {
                            "type": "string",
                            "enum": [
                                "map"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "additionalAttributes": {
                                    "$ref": "#/definitions/common/blockComponents/attributes"
                                },
                                "attribute": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "clusterPoints": {
                                    "type": "boolean"
                                },
                                "compositeResult": {
                                    "type": "boolean"
                                },
                                "defaultBearing": {
                                    "type": "number"
                                },
                                "defaultCenter": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "defaultPitch": {
                                    "type": "number"
                                },
                                "defaultZoom": {
                                    "$ref": "#/definitions/common/blockComponents/shortStringOrNumber"
                                },
                                "deviceIds": {
                                    "$ref": "#/definitions/common/blockComponents/deviceIdsAllowCtx"
                                },
                                "deviceTags": {
                                    "$ref": "#/definitions/common/blockComponents/deviceTagsAllowCtx"
                                },
                                "duration": {
                                    "$ref": "#/definitions/common/blockComponents/duration"
                                },
                                "endColor": {
                                    "$ref": "#/definitions/common/color"
                                },
                                "iconTemplate": {
                                    "$ref": "#/definitions/common/blockComponents/largeString"
                                },
                                "includeArrows": {
                                    "type": "boolean"
                                },
                                "includeLines": {
                                    "type": "boolean"
                                },
                                "mapStyle": {
                                    "type": "string",
                                    "enum": [
                                        "normal",
                                        "satellite"
                                    ]
                                },
                                "pinMode": {
                                    "type": "string",
                                    "enum": [
                                        "simple",
                                        "advanced"
                                    ]
                                },
                                "popupTemplate": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "resizedPins": {
                                    "type": "boolean"
                                },
                                "resolution": {
                                    "$ref": "#/definitions/common/blockComponents/resolution"
                                },
                                "startColor": {
                                    "$ref": "#/definitions/common/color"
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "blockType",
                        "startX",
                        "startY",
                        "width",
                        "height"
                    ],
                    "additionalProperties": false
                },
                "openEventIndicator": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "title": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "startX": {
                            "type": "number"
                        },
                        "startY": {
                            "type": "number"
                        },
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        },
                        "blockType": {
                            "type": "string",
                            "enum": [
                                "open-event-indicator"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "allowUpdates": {
                                    "type": "boolean"
                                },
                                "query": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "filter": {
                                    "type": "string",
                                    "maxLength": 255
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "blockType",
                        "startX",
                        "startY",
                        "width",
                        "height"
                    ],
                    "additionalProperties": false
                },
                "pie": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "title": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "startX": {
                            "type": "number"
                        },
                        "startY": {
                            "type": "number"
                        },
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        },
                        "blockType": {
                            "type": "string",
                            "enum": [
                                "pie"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "realTime": {
                                    "type": "boolean"
                                },
                                "duration": {
                                    "$ref": "#/definitions/common/blockComponents/duration"
                                },
                                "percentFormat": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "valueFormat": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "segments": {
                                    "$ref": "#/definitions/common/blockComponents/commonSegments"
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "blockType",
                        "startX",
                        "startY",
                        "width",
                        "height"
                    ],
                    "additionalProperties": false
                },
                "positionChart": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "title": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "startX": {
                            "type": "number"
                        },
                        "startY": {
                            "type": "number"
                        },
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        },
                        "blockType": {
                            "type": "string",
                            "enum": [
                                "position-chart"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "additionalAttributes": {
                                    "$ref": "#/definitions/common/blockComponents/attributes"
                                },
                                "compositeResult": {
                                    "type": "boolean"
                                },
                                "coordinateA": {
                                    "$ref": "#/definitions/common/blockComponents/stringXyCoordinate"
                                },
                                "coordinateB": {
                                    "$ref": "#/definitions/common/blockComponents/stringXyCoordinate"
                                },
                                "defaultCenter": {
                                    "$ref": "#/definitions/common/blockComponents/stringXyCoordinate"
                                },
                                "defaultZoom": {
                                    "$ref": "#/definitions/common/blockComponents/shortStringOrNumber"
                                },
                                "deviceIds": {
                                    "$ref": "#/definitions/common/blockComponents/deviceIdsAllowCtx"
                                },
                                "deviceTags": {
                                    "$ref": "#/definitions/common/blockComponents/deviceTagsAllowCtx"
                                },
                                "duration": {
                                    "$ref": "#/definitions/common/blockComponents/duration"
                                },
                                "endColor": {
                                    "$ref": "#/definitions/common/color"
                                },
                                "iconTemplate": {
                                    "$ref": "#/definitions/common/blockComponents/largeString"
                                },
                                "imageUrl": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "includeArrows": {
                                    "type": "boolean"
                                },
                                "includeLines": {
                                    "type": "boolean"
                                },
                                "pinMode": {
                                    "type": "string",
                                    "enum": [
                                        "simple",
                                        "advanced"
                                    ]
                                },
                                "pixelA": {
                                    "$ref": "#/definitions/common/blockComponents/stringXyCoordinate"
                                },
                                "pixelB": {
                                    "$ref": "#/definitions/common/blockComponents/stringXyCoordinate"
                                },
                                "popupTemplate": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "resizedPins": {
                                    "type": "boolean"
                                },
                                "resolution": {
                                    "$ref": "#/definitions/common/blockComponents/resolution"
                                },
                                "startColor": {
                                    "$ref": "#/definitions/common/color"
                                },
                                "xAttribute": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "yAttribute": {
                                    "type": "string",
                                    "maxLength": 255
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "blockType",
                        "startX",
                        "startY",
                        "width",
                        "height"
                    ],
                    "additionalProperties": false
                },
                "sectionHeader": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "title": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "startX": {
                            "type": "number"
                        },
                        "startY": {
                            "type": "number"
                        },
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        },
                        "blockType": {
                            "type": "string",
                            "enum": [
                                "section-header"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "content": {
                                    "$ref": "#/definitions/common/description"
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "blockType",
                        "startX",
                        "startY",
                        "width",
                        "height"
                    ],
                    "additionalProperties": false
                },
                "workflowList": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "maxLength": 48
                        },
                        "title": {
                            "type": "string",
                            "maxLength": 255
                        },
                        "description": {
                            "$ref": "#/definitions/common/description"
                        },
                        "applicationId": {
                            "$ref": "#/definitions/common/objectId"
                        },
                        "startX": {
                            "type": "number"
                        },
                        "startY": {
                            "type": "number"
                        },
                        "width": {
                            "type": "number"
                        },
                        "height": {
                            "type": "number"
                        },
                        "blockType": {
                            "type": "string",
                            "enum": [
                                "workflow-list"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "filter": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "includeCloud": {
                                    "type": "boolean"
                                },
                                "includeEdge": {
                                    "type": "boolean"
                                },
                                "includeExperience": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "blockType",
                        "startX",
                        "startY",
                        "width",
                        "height"
                    ],
                    "additionalProperties": false
                }
            },
            "triggers": {
                "basic": {
                    "type": "object",
                    "properties": {
                        "key": {
                            "$ref": "#/definitions/common/optMedStr"
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "customNodeStart",
                                "deviceCommand",
                                "deviceIdConnect",
                                "deviceTagConnect",
                                "deviceIdDisconnect",
                                "deviceTagDisconnect",
                                "integration",
                                "mqttTopic",
                                "notebook",
                                "onBoot",
                                "onConnect",
                                "onDisconnect",
                                "request",
                                "udp",
                                "webhook"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "additionalProperties": false
                        },
                        "meta": {
                            "type": "object",
                            "properties": {
                                "category": {
                                    "type": "string",
                                    "enum": [
                                        "trigger"
                                    ]
                                },
                                "name": {
                                    "type": "string",
                                    "enum": [
                                        "customNodeStart",
                                        "deviceCommand",
                                        "deviceIdsTagsConnect",
                                        "deviceIdsTagsDisconnect",
                                        "flowError",
                                        "googlePubSub",
                                        "meridian",
                                        "mqtt",
                                        "notebook",
                                        "onBoot",
                                        "onConnect",
                                        "onDisconnect",
                                        "particle",
                                        "request",
                                        "udp",
                                        "webhook"
                                    ]
                                },
                                "label": {
                                    "$ref": "#/definitions/common/name"
                                },
                                "x": {
                                    "type": "number"
                                },
                                "y": {
                                    "type": "number"
                                },
                                "uiId": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "description": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "icon": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "color": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "inputCount": {
                                    "type": "number"
                                },
                                "outputCount": {
                                    "type": "number"
                                },
                                "triggerId": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "id": {
                                    "type": "string",
                                    "maxLength": 48
                                }
                            },
                            "additionalProperties": false
                        },
                        "outputIds": {
                            "$ref": "#/definitions/common/outputIds"
                        }
                    },
                    "required": [
                        "type"
                    ],
                    "additionalProperties": false
                },
                "dataTable": {
                    "type": "object",
                    "properties": {
                        "key": {
                            "$ref": "#/definitions/common/optMedStr"
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "dataTable"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "bulkInsert": {
                                    "type": "boolean"
                                },
                                "delete": {
                                    "type": "boolean"
                                },
                                "insert": {
                                    "type": "boolean"
                                },
                                "update": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        },
                        "meta": {
                            "type": "object",
                            "properties": {
                                "category": {
                                    "type": "string",
                                    "enum": [
                                        "trigger"
                                    ]
                                },
                                "name": {
                                    "type": "string",
                                    "enum": [
                                        "dataTable"
                                    ]
                                },
                                "label": {
                                    "$ref": "#/definitions/common/name"
                                },
                                "x": {
                                    "type": "number"
                                },
                                "y": {
                                    "type": "number"
                                },
                                "uiId": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "description": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "icon": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "color": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "inputCount": {
                                    "type": "number"
                                },
                                "outputCount": {
                                    "type": "number"
                                },
                                "id": {
                                    "type": "string",
                                    "maxLength": 48
                                }
                            },
                            "additionalProperties": false
                        },
                        "outputIds": {
                            "$ref": "#/definitions/common/outputIds"
                        }
                    },
                    "required": [
                        "type"
                    ],
                    "additionalProperties": false
                },
                "deviceIdsTags": {
                    "type": "object",
                    "properties": {
                        "key": {
                            "$ref": "#/definitions/common/optMedStr"
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "deviceId",
                                "deviceTag"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "attributeBlacklist": {
                                    "type": "array",
                                    "maxItems": 100,
                                    "items": {
                                        "$ref": "#/definitions/common/key"
                                    }
                                },
                                "attributeWhitelist": {
                                    "type": "array",
                                    "maxItems": 100,
                                    "items": {
                                        "$ref": "#/definitions/common/key"
                                    }
                                },
                                "maxAge": {
                                    "type": "number"
                                }
                            },
                            "additionalProperties": false
                        },
                        "meta": {
                            "type": "object",
                            "properties": {
                                "category": {
                                    "type": "string",
                                    "enum": [
                                        "trigger"
                                    ]
                                },
                                "name": {
                                    "type": "string",
                                    "enum": [
                                        "deviceIdsTags",
                                        "device",
                                        "deviceTag"
                                    ]
                                },
                                "label": {
                                    "$ref": "#/definitions/common/name"
                                },
                                "x": {
                                    "type": "number"
                                },
                                "y": {
                                    "type": "number"
                                },
                                "uiId": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "description": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "icon": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "color": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "inputCount": {
                                    "type": "number"
                                },
                                "outputCount": {
                                    "type": "number"
                                },
                                "id": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "timeUnit": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "maxAgeToggle": {
                                    "type": "boolean"
                                },
                                "allowedAttributeType": {
                                    "type": "string",
                                    "enum": [
                                        "attributeWhitelist",
                                        "any",
                                        "attributeBlacklist"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        },
                        "outputIds": {
                            "$ref": "#/definitions/common/outputIds"
                        }
                    },
                    "required": [
                        "type"
                    ],
                    "additionalProperties": false
                },
                "deviceIdsTagsInactivity": {
                    "type": "object",
                    "properties": {
                        "key": {
                            "$ref": "#/definitions/common/optMedStr"
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "deviceIdInactivity",
                                "deviceTagInactivity"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "seconds": {
                                    "type": "number"
                                }
                            },
                            "additionalProperties": false
                        },
                        "meta": {
                            "type": "object",
                            "properties": {
                                "category": {
                                    "type": "string",
                                    "enum": [
                                        "trigger"
                                    ]
                                },
                                "name": {
                                    "type": "string",
                                    "enum": [
                                        "deviceIdsTagsInactivity"
                                    ]
                                },
                                "label": {
                                    "$ref": "#/definitions/common/name"
                                },
                                "x": {
                                    "type": "number"
                                },
                                "y": {
                                    "type": "number"
                                },
                                "uiId": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "description": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "icon": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "color": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "inputCount": {
                                    "type": "number"
                                },
                                "outputCount": {
                                    "type": "number"
                                },
                                "id": {
                                    "type": "string",
                                    "maxLength": 48
                                }
                            },
                            "additionalProperties": false
                        },
                        "outputIds": {
                            "$ref": "#/definitions/common/outputIds"
                        }
                    },
                    "required": [
                        "type"
                    ],
                    "additionalProperties": false
                },
                "endpoint": {
                    "type": "object",
                    "properties": {
                        "key": {
                            "$ref": "#/definitions/common/optMedStr"
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "endpoint"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "experienceVersion": {
                                    "$ref": "#/definitions/common/name"
                                }
                            },
                            "additionalProperties": false
                        },
                        "meta": {
                            "type": "object",
                            "properties": {
                                "category": {
                                    "type": "string",
                                    "enum": [
                                        "trigger"
                                    ]
                                },
                                "name": {
                                    "type": "string",
                                    "enum": [
                                        "endpoint"
                                    ]
                                },
                                "label": {
                                    "$ref": "#/definitions/common/name"
                                },
                                "x": {
                                    "type": "number"
                                },
                                "y": {
                                    "type": "number"
                                },
                                "uiId": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "description": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "icon": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "color": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "inputCount": {
                                    "type": "number"
                                },
                                "outputCount": {
                                    "type": "number"
                                },
                                "id": {
                                    "type": "string",
                                    "maxLength": 48
                                }
                            },
                            "additionalProperties": false
                        },
                        "outputIds": {
                            "$ref": "#/definitions/common/outputIds"
                        }
                    },
                    "required": [
                        "type"
                    ],
                    "additionalProperties": false
                },
                "event": {
                    "type": "object",
                    "properties": {
                        "key": {
                            "$ref": "#/definitions/common/optMedStr"
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "event"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "subject": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "new": {
                                    "type": "boolean"
                                },
                                "acknowledged": {
                                    "type": "boolean"
                                },
                                "resolved": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        },
                        "meta": {
                            "type": "object",
                            "properties": {
                                "category": {
                                    "type": "string",
                                    "enum": [
                                        "trigger"
                                    ]
                                },
                                "name": {
                                    "type": "string",
                                    "enum": [
                                        "event"
                                    ]
                                },
                                "label": {
                                    "$ref": "#/definitions/common/name"
                                },
                                "x": {
                                    "type": "number"
                                },
                                "y": {
                                    "type": "number"
                                },
                                "uiId": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "description": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "icon": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "color": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "inputCount": {
                                    "type": "number"
                                },
                                "outputCount": {
                                    "type": "number"
                                },
                                "id": {
                                    "type": "string",
                                    "maxLength": 48
                                }
                            },
                            "additionalProperties": false
                        },
                        "outputIds": {
                            "$ref": "#/definitions/common/outputIds"
                        }
                    },
                    "required": [
                        "type"
                    ],
                    "additionalProperties": false
                },
                "fileTail": {
                    "type": "object",
                    "properties": {
                        "key": {
                            "$ref": "#/definitions/common/optMedStr"
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "fileTail"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "path": {
                                    "type": "string",
                                    "maxLength": 1024
                                },
                                "encoding": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "byteLength": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "delimiter": {
                                    "type": "string",
                                    "maxLength": 48
                                }
                            },
                            "additionalProperties": false
                        },
                        "meta": {
                            "type": "object",
                            "properties": {
                                "category": {
                                    "type": "string",
                                    "enum": [
                                        "trigger"
                                    ]
                                },
                                "name": {
                                    "type": "string",
                                    "enum": [
                                        "fileTail"
                                    ]
                                },
                                "label": {
                                    "$ref": "#/definitions/common/name"
                                },
                                "x": {
                                    "type": "number"
                                },
                                "y": {
                                    "type": "number"
                                },
                                "uiId": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "description": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "icon": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "color": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "inputCount": {
                                    "type": "number"
                                },
                                "outputCount": {
                                    "type": "number"
                                },
                                "id": {
                                    "type": "string",
                                    "maxLength": 48
                                }
                            },
                            "additionalProperties": false
                        },
                        "outputIds": {
                            "$ref": "#/definitions/common/outputIds"
                        }
                    },
                    "required": [
                        "type"
                    ],
                    "additionalProperties": false
                },
                "fileWatch": {
                    "type": "object",
                    "properties": {
                        "key": {
                            "$ref": "#/definitions/common/optMedStr"
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "fileWatch"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "path": {
                                    "type": "string",
                                    "maxLength": 1024
                                },
                                "fileAdded": {
                                    "type": "boolean"
                                },
                                "fileChanged": {
                                    "type": "boolean"
                                },
                                "fileRemoved": {
                                    "type": "boolean"
                                },
                                "directoryAdded": {
                                    "type": "boolean"
                                },
                                "directoryRemoved": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        },
                        "meta": {
                            "type": "object",
                            "properties": {
                                "category": {
                                    "type": "string",
                                    "enum": [
                                        "trigger"
                                    ]
                                },
                                "name": {
                                    "type": "string",
                                    "enum": [
                                        "fileWatch"
                                    ]
                                },
                                "label": {
                                    "$ref": "#/definitions/common/name"
                                },
                                "x": {
                                    "type": "number"
                                },
                                "y": {
                                    "type": "number"
                                },
                                "uiId": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "description": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "icon": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "color": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "inputCount": {
                                    "type": "number"
                                },
                                "outputCount": {
                                    "type": "number"
                                },
                                "id": {
                                    "type": "string",
                                    "maxLength": 48
                                }
                            },
                            "additionalProperties": false
                        },
                        "outputIds": {
                            "$ref": "#/definitions/common/outputIds"
                        }
                    },
                    "required": [
                        "type"
                    ],
                    "additionalProperties": false
                },
                "flowError": {
                    "type": "object",
                    "properties": {
                        "key": {
                            "$ref": "#/definitions/common/optMedStr"
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "flowError"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "additionalProperties": false
                        },
                        "meta": {
                            "type": "object",
                            "properties": {
                                "category": {
                                    "type": "string",
                                    "enum": [
                                        "trigger"
                                    ]
                                },
                                "name": {
                                    "type": "string",
                                    "enum": [
                                        "flowError"
                                    ]
                                },
                                "label": {
                                    "$ref": "#/definitions/common/name"
                                },
                                "x": {
                                    "type": "number"
                                },
                                "y": {
                                    "type": "number"
                                },
                                "uiId": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "description": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "icon": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "color": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "inputCount": {
                                    "type": "number"
                                },
                                "outputCount": {
                                    "type": "number"
                                },
                                "id": {
                                    "type": "string",
                                    "maxLength": 48
                                }
                            },
                            "additionalProperties": false
                        },
                        "outputIds": {
                            "$ref": "#/definitions/common/outputIds"
                        }
                    },
                    "required": [
                        "type"
                    ],
                    "additionalProperties": false
                },
                "opcua": {
                    "type": "object",
                    "properties": {
                        "key": {
                            "$ref": "#/definitions/common/optMedStr"
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "opcua"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "uri": {
                                    "type": "string",
                                    "maxLength": 1024
                                },
                                "securityPolicy": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "securityMode": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "username": {
                                    "type": "string",
                                    "maxLength": 1024
                                },
                                "password": {
                                    "type": "string",
                                    "maxLength": 1024
                                },
                                "cert": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "privateKey": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "nameSpace": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "identifier": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "samplingInterval": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "eventFilter": {
                                    "type": "array",
                                    "maxItems": 100,
                                    "items": {
                                        "type": "string",
                                        "maxLength": 255
                                    }
                                }
                            },
                            "additionalProperties": false
                        },
                        "meta": {
                            "type": "object",
                            "properties": {
                                "category": {
                                    "type": "string",
                                    "enum": [
                                        "trigger"
                                    ]
                                },
                                "name": {
                                    "type": "string",
                                    "enum": [
                                        "opcua"
                                    ]
                                },
                                "label": {
                                    "$ref": "#/definitions/common/name"
                                },
                                "x": {
                                    "type": "number"
                                },
                                "y": {
                                    "type": "number"
                                },
                                "uiId": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "description": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "icon": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "color": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "inputCount": {
                                    "type": "number"
                                },
                                "outputCount": {
                                    "type": "number"
                                },
                                "id": {
                                    "type": "string",
                                    "maxLength": 48
                                }
                            },
                            "additionalProperties": false
                        },
                        "outputIds": {
                            "$ref": "#/definitions/common/outputIds"
                        }
                    },
                    "required": [
                        "type"
                    ],
                    "additionalProperties": false
                },
                "redis": {
                    "type": "object",
                    "properties": {
                        "key": {
                            "$ref": "#/definitions/common/optMedStr"
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "redis"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "host": {
                                    "type": "string",
                                    "maxLength": 1024
                                },
                                "port": {
                                    "type": "string",
                                    "maxLength": 16
                                },
                                "password": {
                                    "type": "string",
                                    "maxLength": 1024
                                },
                                "topic": {
                                    "type": "string",
                                    "maxLength": 1024
                                },
                                "fileAdded": {
                                    "type": "boolean"
                                },
                                "fileChanged": {
                                    "type": "boolean"
                                },
                                "fileRemoved": {
                                    "type": "boolean"
                                },
                                "directoryAdded": {
                                    "type": "boolean"
                                },
                                "directoryRemoved": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        },
                        "meta": {
                            "type": "object",
                            "properties": {
                                "category": {
                                    "type": "string",
                                    "enum": [
                                        "trigger"
                                    ]
                                },
                                "name": {
                                    "type": "string",
                                    "enum": [
                                        "redisTrigger"
                                    ]
                                },
                                "label": {
                                    "$ref": "#/definitions/common/name"
                                },
                                "x": {
                                    "type": "number"
                                },
                                "y": {
                                    "type": "number"
                                },
                                "uiId": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "description": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "icon": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "color": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "inputCount": {
                                    "type": "number"
                                },
                                "outputCount": {
                                    "type": "number"
                                },
                                "id": {
                                    "type": "string",
                                    "maxLength": 48
                                }
                            },
                            "additionalProperties": false
                        },
                        "outputIds": {
                            "$ref": "#/definitions/common/outputIds"
                        }
                    },
                    "required": [
                        "type"
                    ],
                    "additionalProperties": false
                },
                "timer": {
                    "type": "object",
                    "properties": {
                        "key": {
                            "$ref": "#/definitions/common/optMedStr"
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "timer"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "seconds": {
                                    "type": "number"
                                },
                                "cron": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "tz": {
                                    "type": "string",
                                    "maxLength": 255
                                }
                            },
                            "additionalProperties": false
                        },
                        "meta": {
                            "type": "object",
                            "properties": {
                                "category": {
                                    "type": "string",
                                    "enum": [
                                        "trigger"
                                    ]
                                },
                                "name": {
                                    "type": "string",
                                    "enum": [
                                        "timer"
                                    ]
                                },
                                "label": {
                                    "$ref": "#/definitions/common/name"
                                },
                                "x": {
                                    "type": "number"
                                },
                                "y": {
                                    "type": "number"
                                },
                                "uiId": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "description": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "icon": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "color": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "inputCount": {
                                    "type": "number"
                                },
                                "outputCount": {
                                    "type": "number"
                                },
                                "id": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "timerTypeSelect": {
                                    "type": "string",
                                    "enum": [
                                        "cronWeekly",
                                        "seconds",
                                        "cron"
                                    ]
                                },
                                "timeAt": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "timezone": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "weekdays": {
                                    "type": "array",
                                    "maxItems": 7,
                                    "items": {
                                        "type": "number"
                                    }
                                }
                            },
                            "additionalProperties": false
                        },
                        "outputIds": {
                            "$ref": "#/definitions/common/outputIds"
                        }
                    },
                    "required": [
                        "type"
                    ],
                    "additionalProperties": false
                },
                "serial": {
                    "type": "object",
                    "properties": {
                        "key": {
                            "$ref": "#/definitions/common/optMedStr"
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "serial"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "path": {
                                    "type": "string",
                                    "maxLength": 1024
                                },
                                "baudRate": {
                                    "type": "number"
                                },
                                "encoding": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "writeOnOpen": {
                                    "type": "string",
                                    "maxLength": 1024
                                },
                                "byteLength": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "delimiter": {
                                    "type": "string",
                                    "maxLength": 48
                                }
                            },
                            "additionalProperties": false
                        },
                        "meta": {
                            "type": "object",
                            "properties": {
                                "category": {
                                    "type": "string",
                                    "enum": [
                                        "trigger"
                                    ]
                                },
                                "name": {
                                    "type": "string",
                                    "enum": [
                                        "serial"
                                    ]
                                },
                                "label": {
                                    "$ref": "#/definitions/common/name"
                                },
                                "x": {
                                    "type": "number"
                                },
                                "y": {
                                    "type": "number"
                                },
                                "uiId": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "description": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "icon": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "color": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "inputCount": {
                                    "type": "number"
                                },
                                "outputCount": {
                                    "type": "number"
                                },
                                "id": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "parseBy": {
                                    "type": "string",
                                    "enum": [
                                        "byteLength",
                                        "delimiter"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        },
                        "outputIds": {
                            "$ref": "#/definitions/common/outputIds"
                        }
                    },
                    "required": [
                        "type"
                    ],
                    "additionalProperties": false
                },
                "virtualButton": {
                    "type": "object",
                    "properties": {
                        "key": {
                            "$ref": "#/definitions/common/optMedStr"
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "virtualButton"
                            ]
                        },
                        "config": {
                            "type": "object",
                            "additionalProperties": false
                        },
                        "meta": {
                            "type": "object",
                            "properties": {
                                "category": {
                                    "type": "string",
                                    "enum": [
                                        "trigger"
                                    ]
                                },
                                "name": {
                                    "type": "string",
                                    "enum": [
                                        "virtualButton"
                                    ]
                                },
                                "label": {
                                    "$ref": "#/definitions/common/name"
                                },
                                "x": {
                                    "type": "number"
                                },
                                "y": {
                                    "type": "number"
                                },
                                "uiId": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "groupId": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "description": {
                                    "$ref": "#/definitions/common/description"
                                },
                                "icon": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "color": {
                                    "$ref": "#/definitions/common/optMedStr"
                                },
                                "inputCount": {
                                    "type": "number"
                                },
                                "outputCount": {
                                    "type": "number"
                                },
                                "id": {
                                    "type": "string",
                                    "maxLength": 48
                                },
                                "payload": {
                                    "type": "string",
                                    "maxLength": 262144
                                },
                                "deviceId": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/definitions/common/objectId"
                                        },
                                        {
                                            "type": "string",
                                            "enum": [
                                                ""
                                            ]
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ]
                                }
                            },
                            "additionalProperties": false
                        },
                        "outputIds": {
                            "$ref": "#/definitions/common/outputIds"
                        }
                    },
                    "required": [
                        "type"
                    ],
                    "additionalProperties": false
                }
            }
        }
    },
    "examples": {
        "advancedDeviceQuery": {
            "$or": [
                {
                    "name": {
                        "$ne": "myValue"
                    }
                },
                {
                    "parentId": "575ec8687ae143cd83dc4a97"
                }
            ]
        },
        "advancedEventQuery": {
            "$or": [
                {
                    "level": {
                        "$ne": "myValue"
                    }
                },
                {
                    "level": 5
                }
            ]
        },
        "apiToken": {
            "id": "575ec7417ae143cd83dc4a95",
            "apiTokenId": "575ec7417ae143cd83dc4a95",
            "creatorId": "575ed70c7ae143cd83dc4aa9",
            "creatorType": "user",
            "ownerId": "575ec8687ae143cd83dc4a97",
            "ownerType": "application",
            "name": "My API Token",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "expirationDate": "2017-06-13T04:00:00.000Z",
            "scope": [
                "all.Application"
            ],
            "status": "active",
            "token": "the_actual_token_string"
        },
        "apiTokenPatch": {
            "name": "My Updated API Token",
            "status": "inactive"
        },
        "advancedQuery": {
            "$or": [
                {
                    "level": {
                        "$ne": "myValue"
                    }
                },
                {
                    "level": 5
                }
            ]
        },
        "apiTokens": {
            "items": [
                {
                    "$ref": "#/examples/apiToken"
                }
            ],
            "count": 1,
            "totalCount": 4,
            "perPage": 1,
            "page": 0,
            "sortField": "name",
            "sortDirection": "asc",
            "ownerId": "575ec8687ae143cd83dc4a97",
            "ownerType": "application"
        },
        "application": {
            "id": "575ec8687ae143cd83dc4a97",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "ownerId": "575ed70c7ae143cd83dc4aa9",
            "ownerType": "user",
            "name": "My Application",
            "description": "The is the best application description",
            "summary": {
                "deviceCount": 5,
                "flowCount": 2,
                "webhookCount": 0,
                "eventCount": 0,
                "keyCount": 1,
                "deviceRecipeCount": 0
            },
            "archiveConfig": {
                "s3": {
                    "bucket": "bucketName",
                    "accessKeyId": "awsAccessKey",
                    "accessSecretKey": "awsSecretKey",
                    "region": "us-west-1"
                },
                "mode": "all",
                "deviceIds": [
                    "575ec8687ae143cd83dc4a95",
                    "575ec8687ae143cd83dc4a91"
                ]
            }
        },
        "applicationApiTokenPost": {
            "name": "My New API Token",
            "expirationDate": "2017-06-13T04:00:00.000Z",
            "scope": [
                "all.Application"
            ],
            "status": "active"
        },
        "applicationCertificate": {
            "id": "5cd02a50df66feb0994c7196",
            "applicationCertificateId": "5cd02a50df66feb0994c7196",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "status": "active",
            "description": "An example certificate description",
            "certificateInfo": {
                "serialNumber": "ad:0e:ff:63:27:83:e5:3e:6b:a9:fb:57:0d:37:fc:e9",
                "fingerprint": "FF:4A:88:5D:93:E7:FF:61:E4:72:94:EE:82:4B:56:B2:AB:71:38:06",
                "commonName": "myDomain.com",
                "issuerName": "Network Solutions OV Server CA 2",
                "notValidBefore": "2019-04-10T00:00:00.000Z",
                "notValidAfter": "2020-04-10T00:00:00.000Z"
            },
            "filterType": "all",
            "pubTopics": [],
            "subTopics": []
        },
        "applicationCertificateAuthorities": {
            "items": [
                {
                    "$ref": "#/examples/applicationCertificateAuthority"
                }
            ],
            "count": 1,
            "totalCount": 4,
            "perPage": 1,
            "page": 0,
            "sortField": "key",
            "sortDirection": "asc",
            "applicationId": "575ec8687ae143cd83dc4a97"
        },
        "applicationCertificateAuthorityPatch": {
            "status": "active",
            "description": "An example updated authority description"
        },
        "applicationCertificateAuthority": {
            "id": "5cd02a7bdf66feb0994c7197",
            "applicationCertificateAuthorityId": "5cd02a7bdf66feb0994c7197",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "status": "active",
            "name": "my certificate authority",
            "description": "An example certificate authority description",
            "caBundle": "MY_SSL_CERTIFICATE",
            "caInfo": [
                {
                    "serialNumber": "ad:0e:ff:63:27:83:e5:3e:6b:a9:fb:57:0d:37:fc:e9",
                    "fingerprint": "FF:4A:88:5D:93:E7:FF:61:E4:72:94:EE:82:4B:56:B2:AB:71:38:06",
                    "commonName": "myDomain.com",
                    "issuerName": "Network Solutions OV Server CA 2",
                    "notValidBefore": "2019-04-10T00:00:00.000Z",
                    "notValidAfter": "2020-04-10T00:00:00.000Z"
                }
            ]
        },
        "applicationCertificateAuthorityPost": {
            "name": "my certificate authority",
            "description": "An example new authority description",
            "caBundle": "MY_SSL_CERTIFICATE"
        },
        "applicationCertificatePatch": {
            "status": "active",
            "description": "An example updated certificate description"
        },
        "applicationCertificatePost": {
            "description": "An example new certificate description",
            "certificate": "MY_SSL_CERTIFICATE",
            "filterType": "all",
            "pubTopics": [],
            "subTopics": []
        },
        "applicationCertificates": {
            "items": [
                {
                    "$ref": "#/examples/applicationCertificate"
                }
            ],
            "count": 1,
            "totalCount": 4,
            "perPage": 1,
            "page": 0,
            "sortField": "key",
            "sortDirection": "asc",
            "applicationId": "575ec8687ae143cd83dc4a97"
        },
        "applicationCloneDryRunResult": {
            "success": true,
            "jobRequired": false
        },
        "applicationClonePost": {
            "options": {
                "includeFiles": true,
                "includeDevices": true,
                "ownerType": "organization",
                "ownerId": "575ec8687ae143cd83dc4a98"
            }
        },
        "applicationCreationByTemplateResult": {
            "application": {
                "id": "575ec8687ae143cd83dc4a98",
                "applicationId": "575ec8687ae143cd83dc4a97",
                "creationDate": "2016-06-13T04:00:00.000Z",
                "lastUpdated": "2016-06-13T04:00:00.000Z",
                "ownerId": "575ed70c7ae143cd83dc4aa9",
                "ownerType": "user",
                "name": "My Application Cloned",
                "description": "The is the best application description",
                "summary": {
                    "deviceCount": 5,
                    "flowCount": 2,
                    "webhookCount": 0,
                    "eventCount": 0,
                    "keyCount": 1,
                    "deviceRecipeCount": 0
                },
                "archiveConfig": {
                    "s3": {
                        "bucket": "bucketName",
                        "accessKeyId": "awsAccessKey",
                        "accessSecretKey": "awsSecretKey",
                        "region": "us-west-1"
                    },
                    "mode": "all",
                    "deviceIds": [
                        "575ec8687ae143cd83dc4a95",
                        "575ec8687ae143cd83dc4a91"
                    ]
                }
            }
        },
        "applicationExportPost": {
            "includeFiles": true,
            "includeDevices": true,
            "email": "test@wnology.io"
        },
        "applicationExportResult": {
            "url": "https://s3.us-west-1.amazonaws.com/a-bucket-on-amazon/applicationExport.zip"
        },
        "applicationKey": {
            "id": "575ec76c7ae143cd83dc4a96",
            "applicationKeyId": "575ec76c7ae143cd83dc4a96",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "key": "this_would_be_the_key",
            "status": "active",
            "description": "An example key description",
            "filterType": "all",
            "pubTopics": [],
            "subTopics": []
        },
        "applicationKeyPatch": {
            "status": "active",
            "description": "An example updated key description"
        },
        "applicationKeyPost": {
            "description": "An example new key description",
            "filterType": "all",
            "pubTopics": [],
            "subTopics": []
        },
        "applicationKeyPostResponse": {
            "id": "575ec76c7ae143cd83dc4a96",
            "applicationKeyId": "575ec76c7ae143cd83dc4a96",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "key": "this_would_be_the_key",
            "status": "active",
            "secret": "shhhSecret",
            "description": "An example key description",
            "filterType": "all",
            "pubTopics": [],
            "subTopics": []
        },
        "applicationKeys": {
            "items": [
                {
                    "$ref": "#/examples/applicationKey"
                }
            ],
            "count": 1,
            "totalCount": 4,
            "perPage": 1,
            "page": 0,
            "sortField": "key",
            "sortDirection": "asc",
            "applicationId": "575ec8687ae143cd83dc4a97"
        },
        "applicationPatch": {
            "name": "My Updated Application",
            "description": "Description of my updated application"
        },
        "applicationPost": {
            "name": "My New Application",
            "description": "Description of my new application"
        },
        "applicationReadme": {
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "lastUpdatedById": "575ed70c7ae143cd83dc4aa9",
            "lastUpdatedByType": "user",
            "content": "The readme content"
        },
        "applicationReadmePatch": {
            "content": "The new readme content"
        },
        "applicationSearchResult": [
            {
                "type": "device",
                "name": "My Device #1",
                "metadata": {
                    "descriptor": "a basic description of device #1"
                },
                "id": "575ec8687ae143cd83dc4a97"
            }
        ],
        "applicationTemplate": {
            "id": "586e9d5151265cb9d72f6ec6",
            "creationDate": "2020-01-13T04:00:00.000Z",
            "lastUpdated": "2020-01-13T04:00:00.000Z",
            "name": "smart environment",
            "description": "a smart env set up",
            "public": true,
            "authorName": "WEGnology",
            "authorUrl": "https://console.app.wnology.io",
            "templateUrl": "https://console.app.wnology.io",
            "summary": {
                "applicationCertificateAuthorityCount": 0,
                "dashboardCount": 0,
                "deviceCount": 1,
                "deviceRecipeCount": 0,
                "dataTableCount": 2,
                "fileCount": 0,
                "experienceGroupCount": 1,
                "experienceUserCount": 1,
                "experienceVersionCount": 3,
                "experienceViewCount": 6,
                "experienceEndpointCount": 6,
                "flowCount": 1,
                "integrationCount": 0,
                "notebookCount": 0,
                "dataTableCsvSize": 4008,
                "webhookCount": 0
            }
        },
        "applicationTemplates": {
            "items": [
                {
                    "$ref": "#/examples/applicationTemplate"
                }
            ],
            "count": 1,
            "totalCount": 8,
            "perPage": 1,
            "page": 0,
            "sortField": "name",
            "sortDirection": "asc"
        },
        "applications": {
            "items": [
                {
                    "$ref": "#/examples/application"
                }
            ],
            "count": 1,
            "totalCount": 8,
            "perPage": 1,
            "page": 0,
            "sortField": "name",
            "sortDirection": "asc"
        },
        "auditLog": {
            "id": "586e9d5151265cb9d72f6ec6",
            "auditLogId": "586e9d5151265cb9d72f6ec6",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "orgId": "575ed6e87ae143cd83dc4aa8",
            "primaryTargetId": "575ec8687ae143cd83dc4a97",
            "primaryTargetType": "Application",
            "primaryTargetName": "My Application",
            "actorId": "575ed70c7ae143cd83dc4aa9",
            "actorType": "User",
            "actorName": "example@wnology.io",
            "requestResource": "application",
            "requestAction": "delete",
            "requestQueryParams": {},
            "requestBody": {},
            "requestPathParams": {
                "applicationId": "575ec8687ae143cd83dc4a97"
            },
            "responseBody": {
                "success": true
            },
            "responseStatus": 200
        },
        "auditLogFilter": {
            "primaryTarget": [
                {
                    "type": "Dashboard"
                },
                {
                    "type": "Application",
                    "id": "575ec8687ae143cd83dc4a97"
                }
            ],
            "actor": [
                {
                    "type": "User",
                    "id": "575ed70c7ae143cd83dc4aa9"
                }
            ]
        },
        "auditLogs": {
            "items": [
                {
                    "$ref": "#/examples/auditLog"
                }
            ],
            "count": 1,
            "totalCount": 4,
            "perPage": 1,
            "page": 0,
            "sortField": "creationDate",
            "sortDirection": "desc",
            "orgId": "575ed6e87ae143cd83dc4aa8"
        },
        "authedDevice": {
            "applicationId": "575ec8687ae143cd83dc4a97",
            "deviceId": "575ecf887ae143cd83dc4aa2",
            "deviceClass": "standalone",
            "token": "token_to_use_for_authenticating_subsequent_requests",
            "ownerType": "organization",
            "filterType": "whitelist",
            "pubTopics": [
                "#"
            ],
            "subTopics": [
                "#"
            ]
        },
        "authedUser": {
            "userId": "575ed70c7ae143cd83dc4aa9",
            "token": "token_to_use_for_authenticating_subsequent_requests"
        },
        "changePassword": {
            "newPassword": "yourNewPassword",
            "password": "yourCurrentPassword",
            "invalidateExistingTokens": true
        },
        "compositeDeviceState": {
            "voltage": {
                "time": "2016-06-13T04:00:00.000Z",
                "value": 22.4
            },
            "loaded": {
                "time": "2016-06-13T03:00:00.000Z",
                "value": false
            }
        },
        "dashboard": {
            "id": "575ece2b7ae143cd83dc4a9b",
            "dashboardId": "575ece2b7ae143cd83dc4a9b",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "organizationName": "WEGnology",
            "organizationIconColor": "#284fff",
            "ownerType": "organization",
            "ownerId": "58238ff2fe7b4b01009a0554",
            "name": "My Dashboard",
            "description": "The best dashboard description",
            "refreshRate": 60,
            "public": false,
            "isPasswordProtected": false,
            "defaultTheme": "light",
            "blocks": [],
            "_currentRole": "admin",
            "reportConfigs": [
                {
                    "toEmail": [
                        "test@email.com"
                    ],
                    "cron": "0 0 12 * * MON-FRI *",
                    "theme": "dark",
                    "subject": "Daily Dashboard Report"
                }
            ],
            "contextConfiguration": [
                {
                    "validationEnabled": true,
                    "validationConfig": {
                        "deviceIds": [
                            "589de9bca1975a00017b2293"
                        ],
                        "deviceTags": [
                            {
                                "key": "type",
                                "value": "Weather Station"
                            }
                        ],
                        "includeFullDevice": true
                    },
                    "name": "deviceId-withIdAndTagValidationAndIncludeFullDevice",
                    "type": "deviceId",
                    "applicationId": "589de7d2a1975a00017b227f",
                    "defaultValue": "589de9bca1975a00017b2295"
                },
                {
                    "validationEnabled": false,
                    "validationConfig": {
                        "includeFullDevice": false
                    },
                    "name": "deviceId-noValidationNoFullDevice",
                    "type": "deviceId",
                    "applicationId": "589de7d2a1975a00017b227f",
                    "defaultValue": "589de9bca1975a00017b2295"
                },
                {
                    "validationEnabled": true,
                    "validationConfig": {
                        "attributes": [
                            "dew-point",
                            "feels-like",
                            "humidity",
                            "location",
                            "pressure",
                            "temp",
                            "visibility",
                            "wind-speed"
                        ]
                    },
                    "name": "attr",
                    "type": "deviceAttribute",
                    "applicationId": "589de7d2a1975a00017b227f",
                    "defaultValue": "temp"
                },
                {
                    "validationEnabled": true,
                    "validationConfig": {
                        "deviceTags": [
                            {
                                "key": "DeviceRecipe",
                                "value": "Weather Station"
                            },
                            {
                                "key": "region"
                            }
                        ]
                    },
                    "name": "deviceTag-withValidation",
                    "type": "deviceTag",
                    "applicationId": "589de7d2a1975a00017b227f",
                    "defaultValue": {
                        "key": "DeviceRecipe",
                        "value": "Weather Station"
                    }
                },
                {
                    "validationEnabled": false,
                    "validationConfig": {},
                    "name": "deviceTag-noValidation",
                    "type": "deviceTag",
                    "applicationId": "589de7d2a1975a00017b227f",
                    "defaultValue": {
                        "key": "DeviceRecipe",
                        "value": "Weather Station"
                    }
                }
            ]
        },
        "dashboardContextInstance": {
            "myContextVariable": "myValue",
            "myOtherVariable": "575ecf887ae143cd83dc4aa2"
        },
        "dashboardPatch": {
            "name": "My Updated Dashboard",
            "description": "Description of my updated dashboard",
            "refreshRate": 300,
            "public": true
        },
        "dashboardPost": {
            "name": "My New Dashboard",
            "public": false
        },
        "dashboardSendReport": {
            "toEmail": [
                "test@email.com"
            ],
            "subject": "Dashboard Report",
            "message": "Lookit",
            "time": 1551887386704,
            "theme": "dark",
            "timezone": "America/New_York"
        },
        "dashboardUpdateEvents": {
            "eventIds": [
                "596e6ce831761df4231708f1"
            ],
            "updates": {
                "state": "acknowledged",
                "comment": "Looking into this issue"
            }
        },
        "dashboards": {
            "items": [
                {
                    "$ref": "#/examples/dashboard"
                }
            ],
            "count": 1,
            "totalCount": 5,
            "perPage": 1,
            "page": 0,
            "sortField": "name",
            "sortDirection": "asc"
        },
        "dataExport": {
            "email": "example@wnology.io",
            "deviceIds": [
                "575ecf887ae143cd83dc4aa2",
                "575ef5c97ae143cd83dc4aac"
            ],
            "attributes": [
                "voltage"
            ],
            "end": 0,
            "options": {
                "includeDate": false,
                "includeID": true
            }
        },
        "dataTable": {
            "id": "596e6ce831761df4231708f1",
            "dataTableId": "596e6ce831761df4231708f1",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "name": "My Data Table",
            "columns": [
                {
                    "name": "myColumn1",
                    "dataType": "string",
                    "constraint": "unique"
                },
                {
                    "name": "myColumn2",
                    "dataType": "number",
                    "constraint": "optional"
                }
            ]
        },
        "dataTableColumn": {
            "name": "myColumn3",
            "dataType": "string",
            "constraint": "optional",
            "defaultValue": "aDefault"
        },
        "dataTablePatch": {
            "name": "My Updated Data Table"
        },
        "dataTablePost": {
            "name": "My Data Table",
            "columns": [
                {
                    "name": "myColumn1",
                    "dataType": "string",
                    "constraint": "unique"
                },
                {
                    "name": "myColumn2",
                    "dataType": "number",
                    "constraint": "optional"
                }
            ]
        },
        "dataTableRow": {
            "id": "596fbb703fc088453872e609",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "myColumn1": "myValue",
            "myColumn2": 5
        },
        "dataTableRowInMultiple": [
            {
                "$ref": "#/examples/dataTableRowInsertUpdate"
            },
            {
                "$ref": "#/examples/dataTableRowInsertUpdate"
            }
        ],
        "dataTableRowInsert": {
            "myColumn1": "myValue"
        },
        "dataTableRowInsertResult": {
            "id": "596fbb703fc088453872e609",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "myColumn1": "myValue",
            "myColumn2": 5
        },
        "dataTableRowInsertUpdate": {
            "myColumn1": "myValue"
        },
        "dataTableRows": {
            "items": [
                {
                    "$ref": "#/examples/dataTableRow"
                }
            ],
            "count": 1,
            "totalCount": 4,
            "offset": 0,
            "limit": 1,
            "sortColumn": "myColumn1",
            "sortDirection": "asc",
            "dataTableId": "596e6ce831761df4231708f1",
            "applicationId": "575ec8687ae143cd83dc4a97"
        },
        "dataTableRowsDelete": {
            "removed": 100
        },
        "dataTableRowsExport": {
            "email": "email@example.com",
            "query": {
                "$or": [
                    {
                        "myColumn1": {
                            "$ne": "myValue"
                        }
                    },
                    {
                        "myColumn2": 5
                    }
                ]
            },
            "queryOptions": {
                "limit": 10000
            }
        },
        "dataTables": {
            "items": [
                {
                    "$ref": "#/examples/dataTable"
                }
            ],
            "count": 1,
            "totalCount": 4,
            "perPage": 1,
            "page": 0,
            "sortField": "name",
            "sortDirection": "asc",
            "applicationId": "575ec8687ae143cd83dc4a97"
        },
        "device": {
            "id": "575ecf887ae143cd83dc4aa2",
            "deviceId": "575ecf887ae143cd83dc4aa2",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "name": "My Device",
            "description": "A device description",
            "tags": [
                {
                    "key": "TagKey",
                    "value": "TagValue"
                },
                {
                    "key": "floor",
                    "value": "8"
                }
            ],
            "attributes": [
                {
                    "name": "voltage",
                    "dataType": "number"
                }
            ],
            "parentId": "5d8a0da7ce2f3d37c205d0c5",
            "deviceClass": "standalone",
            "connectionInfo": {
                "time": "2016-06-14T08:15:00.000Z",
                "connected": 1
            }
        },
        "deviceClassFilter": [
            "standalone",
            "edgeCompute"
        ],
        "deviceCommand": {
            "time": "2016-06-13T04:00:00.000Z",
            "name": "myCommand",
            "payload": [
                1,
                1,
                2,
                3,
                5
            ]
        },
        "deviceCommands": [
            {
                "$ref": "#/examples/deviceCommand"
            },
            {
                "$ref": "#/examples/deviceCommand"
            }
        ],
        "deviceConnectionStatus": {
            "status": "connected"
        },
        "deviceCredentials": {
            "deviceId": "575ecf887ae143cd83dc4aa2",
            "key": "this_would_be_the_key",
            "secret": "this_would_be_the_secret"
        },
        "deviceLog": [
            {
                "connected": 1,
                "time": "2016-06-03T00:56:22.447Z"
            },
            {
                "connected": 0,
                "disconnectReason": "Connection Lost",
                "messagesFromClient": 2548,
                "messagesToClient": 0,
                "time": "2016-06-03T00:56:21.028Z"
            },
            {
                "connected": 1,
                "time": "2016-06-01T06:24:39.190Z"
            },
            {
                "connected": 0,
                "disconnectReason": "Connection Lost",
                "messagesFromClient": 479,
                "messagesToClient": 0,
                "time": "2016-06-01T06:24:37.925Z"
            },
            {
                "connected": 1,
                "time": "2016-05-31T22:24:48.777Z"
            }
        ],
        "devicePatch": {
            "name": "My Updated Device",
            "description": "Description of my updated device",
            "tags": [
                {
                    "key": "TagKey",
                    "value": "TagValue"
                }
            ],
            "attributes": [
                {
                    "name": "voltage",
                    "dataType": "number"
                }
            ],
            "deviceClass": "standalone"
        },
        "devicePost": {
            "name": "My New Device",
            "description": "Description of my new device",
            "tags": [
                {
                    "key": "TagKey",
                    "value": "TagValue"
                }
            ],
            "attributes": [
                {
                    "name": "voltage",
                    "dataType": "number"
                }
            ],
            "deviceClass": "standalone"
        },
        "deviceRecipe": {
            "id": "575ecec57ae143cd83dc4a9f",
            "deviceRecipeId": "575ecec57ae143cd83dc4a9f",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "name": "Actual recipe name",
            "deviceName": "Future device name",
            "description": "My recipe description",
            "deviceDescription": "Future device description",
            "tags": [
                {
                    "key": "TagKey",
                    "value": "TagValue"
                }
            ],
            "attributes": [
                {
                    "name": "voltage",
                    "dataType": "number"
                }
            ],
            "deviceClass": "standalone"
        },
        "deviceRecipeBulkCreate": {
            "created": 10,
            "failed": 0,
            "csvResult": "a,comma,separated,string,of,results"
        },
        "deviceRecipeBulkCreateEnqueued": {
            "jobQueued": true
        },
        "deviceRecipeBulkCreatePost": {
            "nameColumn": "myNameColumn",
            "descriptionColumn": "column2",
            "csv": "a,comma,separated,string,of,input,data"
        },
        "deviceRecipePatch": {
            "name": "My Updated Device Recipe",
            "deviceName": "Future device name",
            "description": "Description of my updated device recipe",
            "deviceDescription": "Future device description",
            "tags": [
                {
                    "key": "TagKey",
                    "value": "TagValue"
                }
            ],
            "attributes": [
                {
                    "name": "voltage",
                    "dataType": "number"
                }
            ],
            "deviceClass": "standalone"
        },
        "deviceRecipePost": {
            "name": "My New Device Recipe",
            "deviceName": "Future device name",
            "description": "Description of my new device recipe",
            "deviceDescription": "Future device description",
            "tags": [
                {
                    "key": "TagKey",
                    "value": "TagValue"
                }
            ],
            "attributes": [
                {
                    "name": "voltage",
                    "dataType": "number"
                }
            ],
            "deviceClass": "standalone"
        },
        "deviceRecipes": {
            "items": [
                {
                    "$ref": "#/examples/deviceRecipe"
                }
            ],
            "count": 1,
            "totalCount": 4,
            "perPage": 1,
            "page": 0,
            "sortField": "name",
            "sortDirection": "asc",
            "applicationId": "575ec8687ae143cd83dc4a97"
        },
        "deviceState": {
            "time": "2016-06-13T04:00:00.000Z",
            "data": {
                "voltage": 22.4
            }
        },
        "deviceStateOrStates": {
            "time": "2016-06-13T04:00:00.000Z",
            "data": {
                "voltage": 22.4
            }
        },
        "deviceStates": [
            {
                "$ref": "#/examples/deviceState"
            },
            {
                "$ref": "#/examples/deviceState"
            }
        ],
        "deviceTagFilter": [
            {
                "key": "Floor",
                "value": "2"
            },
            {
                "key": "Serial"
            }
        ],
        "devices": {
            "items": [
                {
                    "$ref": "#/examples/device"
                }
            ],
            "count": 1,
            "totalCount": 4,
            "perPage": 1,
            "page": 0,
            "sortField": "name",
            "sortDirection": "asc",
            "applicationId": "575ec8687ae143cd83dc4a97"
        },
        "devicesPatch": {
            "updateFields": {
                "name": "My Updated Device",
                "description": "Description of my updated device",
                "tags": [
                    {
                        "key": "TagKey",
                        "value": "TagValue"
                    }
                ],
                "attributes": [
                    {
                        "name": "voltage",
                        "dataType": "number"
                    }
                ],
                "deviceClass": "standalone"
            },
            "deviceIds": [
                "575ecec57ae143cd83dc4a9f",
                "575ecec57ae143cd83dc4a9e",
                "575ecec57ae143cd83dc4a9a"
            ]
        },
        "disableTwoFactorAuth": {
            "twoFactorCode": "123123",
            "password": "this would be your password"
        },
        "edgeDeployment": {
            "id": "5a591be186b70d7b9f9b0954",
            "edgeDeploymentId": "5a591be186b70d7b9f9b0954",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "deviceId": "575ecf887ae143cd83dc4aa2",
            "flowId": "575ed18f7ae143cd83dc4aa6",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "desiredVersion": "v1.4.0",
            "currentVersion": null,
            "logs": [
                {
                    "sourceType": "user",
                    "sourceId": "575ed70c7ae143cd83dc4aa9",
                    "date": "2016-06-13T04:00:00.000Z",
                    "changeType": "desired",
                    "newValue": "v1.4.0",
                    "previousValue": null
                }
            ]
        },
        "edgeDeploymentRelease": {
            "flowId": "575ed18f7ae143cd83dc4aa6",
            "version": "v1.2.3",
            "deviceIds": [
                "575ecf887ae143cd83dc4aa2"
            ]
        },
        "edgeDeploymentRemove": {
            "flowId": "575ed18f7ae143cd83dc4aa6",
            "deviceId": null
        },
        "edgeDeploymentReplace": {
            "flowId": "575ed18f7ae143cd83dc4aa6",
            "oldVersion": "v1.2.3",
            "newVersion": "v1.2.4"
        },
        "edgeDeployments": {
            "items": [
                {
                    "$ref": "#/examples/edgeDeployment"
                }
            ],
            "count": 1,
            "totalCount": 4,
            "perPage": 1,
            "page": 0,
            "sortField": "id",
            "sortDirection": "asc",
            "applicationId": "575ec8687ae143cd83dc4a97"
        },
        "emailVerificationVerify": {
            "email": "example@wnology.io",
            "token": "the email verification token"
        },
        "enableTwoFactorAuth": {
            "twoFactorAuthKey": "HBBGWJJVOVLXS4ZGNRTDOUKTMESFUR3BMRWVQND2HJYT44TOMVJA",
            "password": "this would be your password"
        },
        "error": {
            "type": "NotFound",
            "message": "Application was not found"
        },
        "event": {
            "id": "575ed0de7ae143cd83dc4aa5",
            "eventId": "575ed0de7ae143cd83dc4aa5",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "sourceType": "user",
            "sourceId": "575ed70c7ae143cd83dc4aa9",
            "sourceName": "hello@example.com",
            "level": "info",
            "state": "new",
            "subject": "Power levels critical",
            "message": "Power levels on device 432 have surpassed critical thresholds",
            "updates": [],
            "deviceId": "575ecf887ae143cd83dc4aa2",
            "deviceName": "My Device",
            "eventTags": {
                "customKey": "customValue"
            }
        },
        "eventPatch": {
            "state": "acknowledged",
            "comment": "Looking into this issue"
        },
        "eventPost": {
            "level": "info",
            "state": "new",
            "subject": "Power levels critical",
            "message": "Power levels on device 432 have surpassed critical thresholds",
            "deviceId": "575ecf887ae143cd83dc4aa2"
        },
        "eventTagsSummary": {
            "eventTags": [
                {
                    "key": "TagKey",
                    "value": "TagValue"
                },
                {
                    "key": "floor",
                    "value": "8"
                }
            ]
        },
        "events": {
            "items": [
                {
                    "$ref": "#/examples/event"
                }
            ],
            "count": 1,
            "totalCount": 4,
            "perPage": 1,
            "page": 0,
            "sortField": "subject",
            "sortDirection": "asc",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "state": "new"
        },
        "eventsDeleted": {
            "removed": 3
        },
        "eventsExport": {
            "email": "email@example.com",
            "query": {
                "$or": [
                    {
                        "subject": {
                            "$ne": "myValue"
                        }
                    },
                    {
                        "level": "info"
                    }
                ]
            }
        },
        "experienceBootstrapOptions": {
            "replaceExisting": true
        },
        "experienceBootstrapResult": {
            "homePath": "/",
            "password": "examplePass",
            "email": "example.user@example.com"
        },
        "experienceDomain": {
            "id": "58c1de6c8f812590d8e82980",
            "experienceDomainId": "58c1de6c8f812590d8e82980",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "domainName": "my.example.domain.com",
            "version": "develop"
        },
        "experienceDomainPatch": {
            "domainName": "my.example.domain.com",
            "sslCert": "MY_SSL_CERTIFICATE",
            "sslKey": "MY_SSL_KEY",
            "version": "develop"
        },
        "experienceDomainPost": {
            "domainName": "my.example.domain.com",
            "sslCert": "MY_SSL_CERTIFICATE",
            "sslKey": "MY_SSL_KEY",
            "version": "develop"
        },
        "experienceDomains": {
            "items": [
                {
                    "$ref": "#/examples/experienceDomain"
                }
            ],
            "count": 1,
            "totalCount": 1,
            "applicationId": "575ec8687ae143cd83dc4a97"
        },
        "experienceEndpoint": {
            "id": "58c1de6c8f812590d8e82980",
            "experienceEndpointId": "58c1de6c8f812590d8e82980",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "route": "/my/route/{id}",
            "enabled": true,
            "method": "get",
            "access": "group",
            "experienceGroups": [
                {
                    "name": "myGroup",
                    "id": "58b9d794cbfafe1be675744f"
                }
            ]
        },
        "experienceEndpointPatch": {
            "access": "group",
            "experienceGroupIds": [
                "58c1de6f8f812590d8e82983"
            ]
        },
        "experienceEndpointPost": {
            "route": "/my/route/{id}",
            "method": "get",
            "access": "public"
        },
        "experienceEndpointStats": {
            "58cae95a0f5fcd000138ed0d": [
                {
                    "time": "2017-03-21T20:00:00.000Z",
                    "count": 10
                },
                {
                    "time": "2017-03-21T21:00:00.000Z",
                    "count": 1
                }
            ],
            "NotFound": [
                {
                    "time": "2017-03-21T20:00:00.000Z",
                    "count": 1
                },
                {
                    "time": "2017-03-21T21:00:00.000Z",
                    "count": 4
                }
            ]
        },
        "experienceEndpoints": {
            "items": [
                {
                    "$ref": "#/examples/experienceEndpoint"
                }
            ],
            "count": 1,
            "totalCount": 4,
            "perPage": 1,
            "page": 0,
            "sortField": "name",
            "sortDirection": "asc",
            "applicationId": "575ec8687ae143cd83dc4a97"
        },
        "experienceGroup": {
            "id": "58b9d794cbfafe1be675744f",
            "experienceGroupId": "58b9d794cbfafe1be675744f",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "name": "My Group",
            "experienceUserIds": [
                "58b9d782cbfafe1be675744d",
                "58b9d787cbfafe1be675744e"
            ],
            "experienceEndpointIds": [
                "58b9d743cbfafe1be675744b",
                "58b9d743cbfafe1be675744c"
            ]
        },
        "experienceGroupPatch": {
            "name": "My New Group Name",
            "experienceUserIds": [
                "575ed70c7ae143cd83dc4aa9",
                "675ed70c7ae143cd83dc4aa9"
            ],
            "experienceEndpointIds": [
                "58b9d743cbfafe1be675744b",
                "58b9d743cbfafe1be675744c"
            ],
            "parentId": "775ed70c7ae143cd83dc4aa9",
            "deviceIds": [
                "58b9d743cbfafe1be675744d"
            ],
            "deviceTags": [
                {
                    "key": "myKey",
                    "value": "foo"
                }
            ]
        },
        "experienceGroupPost": {
            "name": "My Group",
            "experienceUserIds": [
                "575ed70c7ae143cd83dc4aa9",
                "675ed70c7ae143cd83dc4aa9"
            ],
            "experienceEndpointIds": [
                "58b9d743cbfafe1be675744b",
                "58b9d743cbfafe1be675744c"
            ],
            "deviceIds": [
                "58b9d743cbfafe1be675744d"
            ],
            "deviceTags": [
                {
                    "key": "floor",
                    "value": 8
                }
            ],
            "parentId": "58b9d743cbfafe1be675744e"
        },
        "experienceGroups": {
            "items": [
                {
                    "$ref": "#/examples/experienceGroup"
                }
            ],
            "count": 1,
            "totalCount": 4,
            "perPage": 1,
            "page": 0,
            "sortField": "name",
            "sortDirection": "asc",
            "applicationId": "575ec8687ae143cd83dc4a97"
        },
        "experienceLinkedResources": {
            "experienceViews": {
                "$ref": "#/examples/experienceViews"
            },
            "experienceEndpoints": {
                "$ref": "#/examples/experienceEndpoints"
            },
            "flows": {
                "$ref": "#/examples/flows"
            },
            "flowVersions": {
                "$ref": "#/examples/flowVersions"
            }
        },
        "experienceSlug": {
            "id": "5b995e51ea9994b50d745284",
            "experienceSlugId": "5b995e51ea9994b50d745284",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "slug": "my-custom-slug",
            "version": "develop"
        },
        "experienceSlugPatch": {
            "slug": "my-new-slug",
            "version": null
        },
        "experienceSlugPost": {
            "slug": "my-custom-slug",
            "version": "develop"
        },
        "experienceSlugs": {
            "items": [
                {
                    "$ref": "#/examples/experienceSlug"
                }
            ],
            "count": 1,
            "totalCount": 1,
            "applicationId": "575ec8687ae143cd83dc4a97"
        },
        "experienceUser": {
            "id": "58b9d782cbfafe1be675744d",
            "experienceUserId": "58b9d782cbfafe1be675744d",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "passwordLastUpdated": "2016-06-13T04:00:00.000Z",
            "lastLogin": "2016-06-13T04:00:00.000Z",
            "email": "example@experienceuser.com",
            "firstName": "Example",
            "lastName": "Name",
            "avatarUrl": "https://example.avatar.url/is_here.png",
            "userTags": {
                "customKey": "customValue"
            }
        },
        "experienceUserPatch": {
            "password": "aNewPassword",
            "userTags": {
                "customKey": "newCustomValue"
            }
        },
        "experienceUserPost": {
            "email": "example@experienceuser.com",
            "firstName": "Example",
            "lastName": "Name",
            "password": "aUserPassword",
            "userTags": {
                "customKey": "customValue"
            }
        },
        "experienceUsers": {
            "items": [
                {
                    "$ref": "#/examples/experienceUser"
                }
            ],
            "count": 1,
            "totalCount": 4,
            "perPage": 1,
            "page": 0,
            "sortField": "name",
            "sortDirection": "asc",
            "applicationId": "575ec8687ae143cd83dc4a97"
        },
        "experienceVersion": {
            "id": "5b995ec6ea9994b50d745285",
            "experienceVersionId": "5b995ec6ea9994b50d745285",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "version": "myVersionName",
            "endpointDefaultCors": true,
            "attachedDomains": [
                {
                    "id": "58c1de6c8f812590d8e82980",
                    "domainName": "my.example.domain.com"
                }
            ],
            "attachedSlugs": [
                {
                    "id": "5b995e51ea9994b50d745284",
                    "slug": "my-custom-slug"
                }
            ]
        },
        "experienceVersionPatch": {
            "endpointDefaultCors": false
        },
        "experienceVersionPost": {
            "version": "myNewVersion",
            "description": "my version description",
            "domainIds": [
                "58c1de6c8f812590d8e82980"
            ],
            "slugIds": [
                "5b995e51ea9994b50d745284"
            ]
        },
        "experienceVersions": {
            "items": [
                {
                    "$ref": "#/examples/experienceVersion"
                }
            ],
            "count": 1,
            "totalCount": 1,
            "applicationId": "575ec8687ae143cd83dc4a97"
        },
        "experienceView": {
            "id": "59cc5c628246c6caed4b16c1",
            "experienceViewId": "59cc5c628246c6caed4b16c1",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "name": "My Page View",
            "viewType": "page",
            "body": "<p>{{data}}</p>",
            "layoutId": "59cc5cad8246c6caed4b16c2",
            "viewTags": {
                "customKey": "customValue"
            }
        },
        "experienceViewPatch": {
            "body": "New Content! <p>{{newData}}</p>",
            "viewTags": {
                "customKey": "newCustomValue"
            }
        },
        "experienceViewPost": {
            "name": "My Page View",
            "viewType": "page",
            "body": "<p>{{data}}</p>",
            "layoutId": "59cc5cad8246c6caed4b16c2",
            "viewTags": {
                "customKey": "customValue"
            }
        },
        "experienceViews": {
            "items": [
                {
                    "$ref": "#/examples/experienceView"
                }
            ],
            "count": 1,
            "totalCount": 4,
            "perPage": 1,
            "page": 0,
            "sortField": "name",
            "sortDirection": "asc",
            "applicationId": "575ec8687ae143cd83dc4a97"
        },
        "file": {
            "id": "575ec8687ae143cd83dc4a97",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "authorId": "575ed70c7ae143cd83dc4aa9",
            "authorType": "user",
            "status": "pending",
            "name": "file.csv",
            "type": "file",
            "parentDirectory": "/",
            "fileSize": 500,
            "contentType": "text/csv"
        },
        "filePatch": {
            "fileSize": 500,
            "contentType": "image",
            "fileDimensions": {
                "width": 200,
                "height": 200
            }
        },
        "filePost": {
            "name": "file.csv",
            "type": "file",
            "parentDirectory": "/",
            "fileSize": 500,
            "contentType": "text/csv"
        },
        "fileUploadPostResponse": {
            "id": "575ec8687ae143cd83dc4a97",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "authorId": "575ed70c7ae143cd83dc4aa9",
            "authorType": "user",
            "status": "pending",
            "name": "file.csv",
            "type": "file",
            "parentDirectory": "/",
            "fileSize": 500,
            "contentType": "text/csv",
            "upload": {
                "url": "https://s3.us-west-1.amazonaws.com/a-bucket-on-amazon",
                "fields": {
                    "key": "5630dcbe1035c9d0011/file.js",
                    "bucket": "a-bucket-on-amazon",
                    "X-Amz-Algorithm": "AWS4-HMAC-SHA256",
                    "X-Amz-Credential": "AKIAJPGQGBQX4PYM6FXA/20180416/us-west-1/s3/aws4_request",
                    "X-Amz-Date": "20180416T142402Z",
                    "Policy": "wMloiLCJjb25kaXRpb25zIjpbeyJrZXkiOiI1NjMwZGNiZTEwM2Y4ZTQ4NWM5ZDAwMTEvZmlsZS5qcyJ9LHsiYnVja2V0IjoibG9zYW50LWZpbGVzIn0seyJYLUFtei1BbGdvcml0aG0iOiJBV1M0LUhNQUMtU0hBMjU2In0seyJYLUFtei1DcmVkZW50aWFsIjoiQUtJQUpQR1FHQlFYNFBZTTZGWEEvMjAxODA0MTYvdXMtd2VzdC0xL3MzL2F3czRfcmVxdWVzdCJ9LHsiWC1BbXotRGF0ZSI6IjIwMTgwNDE2VDE0MjQwMloifV19",
                    "X-Amz-Signature": "a4a411df572c43b4427ff08ef51763bc2d834fa399c3688f347d936370"
                }
            }
        },
        "files": {
            "items": [
                {
                    "id": "575ec8687ae143cd83dc4a97",
                    "applicationId": "575ec8687ae143cd83dc4a97",
                    "creationDate": "2016-06-13T04:00:00.000Z",
                    "lastUpdated": "2016-06-13T04:00:00.000Z",
                    "authorId": "575ed70c7ae143cd83dc4aa9",
                    "authorType": "user",
                    "status": "pending",
                    "name": "file.csv",
                    "type": "file",
                    "parentDirectory": "/",
                    "fileSize": 500,
                    "contentType": "text/csv"
                },
                {
                    "id": "575ec8687ae143cd83dc4a96",
                    "applicationId": "575ec8687ae143cd83dc4a97",
                    "creationDate": "2016-06-13T04:00:00.000Z",
                    "lastUpdated": "2016-06-13T04:00:00.000Z",
                    "authorId": "575ed70c7ae143cd83dc4aa9",
                    "authorType": "user",
                    "status": "completed",
                    "name": "b",
                    "type": "directory",
                    "parentDirectory": "/a/",
                    "fileSize": 500,
                    "contentType": "text/csv"
                }
            ],
            "count": 2
        },
        "flow": {
            "id": "575ed18f7ae143cd83dc4aa6",
            "flowId": "575ed18f7ae143cd83dc4aa6",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "name": "My Workflow",
            "description": "Description of my empty workflow",
            "enabled": true,
            "triggers": [],
            "nodes": [],
            "globals": [],
            "stats": {
                "runCount": 0,
                "errorCount": 0
            }
        },
        "flowLog": [
            {
                "flowVersionId": "develop",
                "time": "2016-06-03T00:56:22.447Z",
                "pathsFailed": 0,
                "pathsCompleted": 1,
                "runCount": 1,
                "wallTime": 450,
                "errors": []
            },
            {
                "flowVersionId": "develop",
                "time": "2016-06-03T00:56:22.447Z",
                "pathsFailed": 0,
                "pathsCompleted": 1,
                "runCount": 3,
                "wallTime": 152,
                "errors": []
            }
        ],
        "flowPatch": {
            "name": "My Updated Workflow",
            "description": "Description of my updated workflow",
            "enabled": false
        },
        "flowPost": {
            "name": "My New Workflow",
            "description": "Description of my new workflow"
        },
        "flowStorageEntries": {
            "myStorageKey": "hello",
            "other key": [
                13,
                21,
                34
            ]
        },
        "flowStorageEntry": {
            "key": "myStorageKey",
            "value": 12
        },
        "flowTriggerFilter": [
            {
                "type": "webhook",
                "key": "575ed78e7ae143cd83dc4aab"
            }
        ],
        "flowVersion": {
            "id": "675ed18f7ae143cd83dc4bb7",
            "flowVersionId": "675ed18f7ae143cd83dc4bb7",
            "flowId": "575ed18f7ae143cd83dc4aa6",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "version": "v1.2.3",
            "notes": "Description of my workflow version",
            "enabled": true,
            "triggers": [],
            "nodes": [],
            "globals": []
        },
        "flowVersionPatch": {
            "notes": "Updated workflow version notes",
            "enabled": false
        },
        "flowVersionPost": {
            "version": "v1.2.3",
            "notes": "Notes about my new workflow version",
            "enabled": false
        },
        "flowVersions": {
            "items": [
                {
                    "$ref": "#/examples/flowVersion"
                }
            ],
            "count": 1,
            "totalCount": 4,
            "perPage": 1,
            "page": 0,
            "sortField": "version",
            "sortDirection": "asc",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "flowId": "575ed18f7ae143cd83dc4aa6"
        },
        "flows": {
            "items": [
                {
                    "$ref": "#/examples/flow"
                }
            ],
            "count": 1,
            "totalCount": 4,
            "perPage": 1,
            "page": 0,
            "sortField": "name",
            "sortDirection": "asc",
            "applicationId": "575ec8687ae143cd83dc4a97"
        },
        "flowsImportPost": {
            "flows": [
                {
                    "$ref": "#/examples/flow"
                }
            ],
            "flowVersions": []
        },
        "flowsImportResult": {
            "flows": [
                {
                    "$ref": "#/examples/flow"
                }
            ],
            "flowVersions": [],
            "importedFlowIdMap": {
                "575ed18f7ae143cd83dc4aa6": "575efbcc7ae143cd83dc4aae"
            },
            "importedVersionIdMap": {}
        },
        "githubLogin": {
            "accessToken": "the github access token"
        },
        "integration": {
            "id": "58ec07f20c747f65243d0d76",
            "integrationId": "58ec07f20c747f65243d0d76",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "name": "Example Integrations",
            "integrationType": "mqtt",
            "enabled": true,
            "topics": [
                "myTopic"
            ],
            "mqttConfig": {
                "clientId": "exampleClientId",
                "username": "exampleUsername",
                "password": "examplePassword",
                "port": 8883,
                "protocol": "mqtts",
                "host": "broker.example.com"
            },
            "status": {
                "lastKeepAlive": 1491863679994,
                "connectInfo": {
                    "ts": 1490629589313
                },
                "disconnectInfo": {
                    "ts": 1490629587190,
                    "error": "Keepalive Timeout"
                }
            }
        },
        "integrationPatch": {
            "topics": [
                "differentTopic"
            ]
        },
        "integrationPost": {
            "name": "Example Integrations",
            "integrationType": "mqtt",
            "topics": [
                "myTopic"
            ],
            "mqttConfig": {
                "clientId": "exampleClientId",
                "username": "exampleUsername",
                "password": "examplePassword",
                "port": 8883,
                "protocol": "mqtts",
                "host": "broker.example.com"
            }
        },
        "integrations": {
            "items": [
                {
                    "$ref": "#/examples/integration"
                }
            ],
            "count": 1,
            "totalCount": 4,
            "perPage": 1,
            "page": 0,
            "sortField": "name",
            "sortDirection": "asc",
            "applicationId": "575ec8687ae143cd83dc4a97"
        },
        "jobEnqueuedResult": {
            "jobQueued": true
        },
        "lastValueData": {
            "575ecf887ae143cd83dc4aa2": {
                "time": "2016-06-13T04:00:00.000Z",
                "data": {
                    "voltage": 12
                }
            },
            "575ef5c97ae143cd83dc4aac": {
                "time": "2016-06-12T08:30:00.000Z",
                "data": {
                    "voltage": 19
                }
            }
        },
        "lastValueQuery": {
            "deviceIds": [
                "575ecf887ae143cd83dc4aa2",
                "575ef5c97ae143cd83dc4aac"
            ],
            "attribute": "voltage"
        },
        "me": {
            "id": "575ed70c7ae143cd83dc4aa9",
            "userId": "575ed70c7ae143cd83dc4aa9",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "passwordLastUpdated": "2016-06-13T04:00:00.000Z",
            "email": "example@wnology.io",
            "firstName": "Example",
            "lastName": "Name",
            "companyName": "WEGnology IoT, Inc.",
            "url": "https://console.app.wnology.io",
            "emailVerified": true,
            "twoFactorAuthEnabled": false,
            "fullName": "Example Name",
            "summary": {
                "appCount": 8,
                "dashCount": 5,
                "orgCount": 2,
                "deviceCount": 12,
                "flowCount": 3,
                "webhookCount": 0,
                "keyCount": 2,
                "deviceRecipeCount": 0
            },
            "ssoLinked": false
        },
        "mePatch": {
            "email": "example@wnology.io",
            "firstName": "Example",
            "lastName": "Name",
            "companyName": "WEGnology IoT, Inc.",
            "url": "https://console.app.wnology.io",
            "password": "my new password"
        },
        "mqttPublishBody": {
            "topic": "an/mqtt/topic",
            "message": "The MQTT message!"
        },
        "multiDeviceCommand": {
            "time": "2016-06-13T04:00:00.000Z",
            "name": "myCommand",
            "payload": [
                1,
                1,
                2,
                3,
                5
            ],
            "deviceTags": [
                {
                    "key": "floor",
                    "value": 8
                }
            ]
        },
        "notebook": {
            "id": "5c782b8d4f3a8e51c1db42e4",
            "notebookId": "5c782b8d4f3a8e51c1db42e4",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "name": "Example Notebook",
            "jupyterFileName": "myNotebook.ipynb",
            "jupyterFileUrl": "https://mystoragedomain.com/myNotebook.ipynb",
            "inputs": [
                {
                    "fileName": "deviceDataWithAttributes",
                    "inputType": "deviceData",
                    "attributes": [
                        "aNumber"
                    ],
                    "deviceIds": [
                        "5c926894a111ea00063978ac"
                    ],
                    "deviceTags": [],
                    "start": -10368000000,
                    "end": 0
                },
                {
                    "fileName": "dataTableWithQuery",
                    "inputType": "dataTable",
                    "dataTableId": "5c91584211126400069179c1",
                    "queryJson": "{\n  \"$or\": [\n    {\n      \"createdAt\": {\n        \"$gt\": \"12345\"\n      }\n    }\n  ]\n}"
                },
                {
                    "fileName": "deviceMetaData",
                    "inputType": "deviceMetadata",
                    "deviceIds": [
                        "5c926894a111ea00063978ac"
                    ],
                    "deviceTags": [
                        {
                            "key": "aTag",
                            "value": "and value"
                        }
                    ]
                },
                {
                    "fileName": "deviceDataAllAttributes",
                    "inputType": "deviceData",
                    "attributes": [],
                    "deviceIds": [],
                    "deviceTags": [
                        {
                            "value": "and value"
                        }
                    ],
                    "start": -43200000,
                    "end": 0
                },
                {
                    "fileName": "anExternalUrl",
                    "inputType": "externalUrl",
                    "sourceUrl": "https://foo.com"
                }
            ],
            "outputs": [
                {
                    "fileName": "result.html",
                    "outputType": "executionResult",
                    "destinationDirectoryTemplate": "/{{notebook.name}}/{{execution.runStartedAt}}",
                    "destinationFileNameTemplate": "result.html"
                },
                {
                    "fileName": "result.pdf",
                    "outputType": "executionResult",
                    "destinationDirectoryTemplate": "/{{notebook.name}}/{{execution.runStartedAt}}",
                    "destinationFileNameTemplate": "result.pdf"
                },
                {
                    "fileName": "result.ipynb",
                    "outputType": "executionResult",
                    "destinationDirectoryTemplate": "/{{notebook.name}}/{{execution.runStartedAt}}",
                    "destinationFileNameTemplate": "result.ipynb"
                },
                {
                    "fileName": "result.error.log",
                    "outputType": "executionResult",
                    "destinationDirectoryTemplate": "/{{notebook.name}}/{{execution.runStartedAt}}",
                    "destinationFileNameTemplate": "result.error.log"
                },
                {
                    "fileName": "result.log",
                    "outputType": "executionResult",
                    "destinationDirectoryTemplate": "/{{notebook.name}}/{{execution.runStartedAt}}",
                    "destinationFileNameTemplate": "result.log"
                },
                {
                    "fileName": "myDataTableFile.csv",
                    "outputType": "dataTable",
                    "dataTableId": "5c925132a111ea00063978a7",
                    "createMissingColumns": true,
                    "truncateExistingTable": false
                },
                {
                    "fileName": "myDataTableFileTwo.csv",
                    "outputType": "dataTable",
                    "dataTableId": "5c91584211126400069179c1",
                    "createMissingColumns": false,
                    "truncateExistingTable": true
                },
                {
                    "fileName": "myApplicationFile.png",
                    "outputType": "file",
                    "destinationDirectoryTemplate": "/{{notebook.name}}/{{execution.runStartedAt}}",
                    "destinationFileNameTemplate": "myApplicationFile.png"
                },
                {
                    "directoryName": "myApplicationFolder",
                    "outputType": "directory",
                    "destinationDirectoryTemplate": "/{{notebook.name}}/{{execution.runStartedAt}}"
                }
            ]
        },
        "notebookDataExportOptions": {
            "email": "user@example.com"
        },
        "notebookExecutionLogs": [
            {
                "id": "5c7d3f9cd32c87a49f04c260",
                "notebookExecutionId": "5c7d3f9cd32c87a49f04c260",
                "notebookId": "5c782b8d4f3a8e51c1db42e4",
                "applicationId": "575ec8687ae143cd83dc4a97",
                "runStartedAt": "2016-06-13T04:00:00.000Z",
                "runQueuedAt": "2016-06-13T03:59:00.000Z",
                "sourceId": "575ed70c7ae143cd83dc4aa9",
                "sourceType": "user",
                "status": "inProgress",
                "maxAllowedRunMinutes": 5,
                "inputInfo": {},
                "outputInfo": {},
                "executionErrors": []
            }
        ],
        "notebookExecutionOptions": {
            "relativeTo": 1570549199451
        },
        "notebookPatch": {
            "name": "New Notebook Name"
        },
        "notebookPost": {
            "name": "Example Notebook"
        },
        "notebooks": {
            "items": [
                {
                    "$ref": "#/examples/notebook"
                }
            ],
            "count": 1,
            "totalCount": 4,
            "perPage": 1,
            "page": 0,
            "sortField": "name",
            "sortDirection": "asc",
            "applicationId": "575ec8687ae143cd83dc4a97"
        },
        "org": {
            "id": "575ed6e87ae143cd83dc4aa8",
            "orgId": "575ed6e87ae143cd83dc4aa8",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "name": "My Organization",
            "description": "My organization description",
            "members": [
                {
                    "userId": "575ed70c7ae143cd83dc4aa9",
                    "firstName": "Example",
                    "lastName": "Name",
                    "email": "example@wnology.io",
                    "role": "admin"
                },
                {
                    "userId": "575ef90f7ae143cd83dc4aad",
                    "firstName": "Other View",
                    "lastName": "Only User",
                    "email": "viewer@wnology.io",
                    "role": "view"
                }
            ],
            "summary": {
                "appCount": 2,
                "dashCount": 1,
                "deviceCount": 12,
                "flowCount": 3,
                "webhookCount": 0,
                "keyCount": 2,
                "deviceRecipeCount": 0
            }
        },
        "orgInviteAction": {
            "email": "invitedUser@wnology.io",
            "token": "the_invitation_token",
            "accept": true
        },
        "orgInviteInfo": {
            "orgName": "My Organization",
            "email": "invitedUser@wnology.io",
            "role": "edit",
            "inviteDate": "2016-05-13T04:00:00.000Z",
            "ttl": 4233600000
        },
        "orgInvitePost": {
            "email": "invitedUser@wnology.io",
            "role": "edit"
        },
        "orgInviteResult": {
            "accepted": true,
            "orgId": "575ed6e87ae143cd83dc4aa8"
        },
        "orgInvites": [
            {
                "id": "575ed71e7ae143cd83dc4aaa",
                "email": "invitedUser@wnology.io",
                "role": "edit",
                "inviteDate": "2016-05-13T04:00:00.000Z",
                "ttl": 4233600000,
                "hasExpired": true
            }
        ],
        "orgMemberPatch": {
            "userId": "575ef90f7ae143cd83dc4aad",
            "role": "view"
        },
        "orgPatch": {
            "name": "My Updated Organization",
            "description": "Description of my updated organization"
        },
        "orgPost": {
            "name": "My New Organization",
            "description": "Description of my new organization"
        },
        "orgs": {
            "items": [
                {
                    "$ref": "#/examples/org"
                }
            ],
            "count": 1,
            "totalCount": 2,
            "perPage": 1,
            "page": 0,
            "sortField": "name",
            "sortDirection": "asc"
        },
        "passwordResetFinish": {
            "token": "the_password_reset_token",
            "email": "example@wnology.io",
            "password": "the new password"
        },
        "passwordResetInput": {
            "email": "example@wnology.io"
        },
        "passwordResetResponse": {
            "success": true,
            "accountIsLocked": false,
            "twoFactorAuthEnabled": false
        },
        "payloadCounts": {
            "timer": {
                "timer.flow": 19772
            },
            "deviceState": {
                "flow.flow": 5215,
                "device.mqtt": 1244049
            },
            "mqttOut": {
                "device.mqtt": 12
            },
            "webhook": {
                "public.rest": 1713284
            },
            "deviceConnect": {
                "device.mqtt": 1016
            },
            "deviceDisconnect": {
                "device.mqtt": 1016
            }
        },
        "recentItem": {
            "itemType": "device",
            "parentId": "575ec8687ae143cd83dc4a97",
            "itemId": "575ecf887ae143cd83dc4aa2"
        },
        "recentItemList": {
            "itemType": "application",
            "items": [
                {
                    "id": "575ec8687ae143cd83dc4a97",
                    "name": "My Application"
                },
                {
                    "id": "575efbcc7ae143cd83dc4aae",
                    "name": "My Other Application"
                }
            ]
        },
        "resourceTransfer": {
            "destinationId": "575ed6e87ae143cd83dc4aa8",
            "destinationType": "organization",
            "applicationIds": [
                "575ec8687ae143cd83dc4a97"
            ]
        },
        "samlResponse": {
            "SAMLResponse": "PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoy...",
            "SAMLDomain": "wnology.io"
        },
        "ssoRequest": {
            "ssoType": "SAML",
            "ssoRequest": "http://localhost:8080/simplesaml/saml2/idp/SSOService.php?SAMLRequest=fZJdT8MgFIb%2..."
        },
        "success": {
            "success": true
        },
        "timeSeriesData": {
            "start": "2016-06-15T03:50:00.000Z",
            "end": "2016-06-15T04:00:00.000Z",
            "resolution": 300000,
            "aggregation": "MEAN",
            "devices": {
                "575ecf887ae143cd83dc4aa2": {
                    "name": "My Device",
                    "points": [
                        {
                            "time": "2016-06-15T03:50:00.000Z",
                            "data": {
                                "voltage": 10.3
                            }
                        },
                        {
                            "time": "2016-06-15T03:55:00.000Z",
                            "data": {
                                "voltage": 12.7
                            }
                        }
                    ]
                },
                "575ef5c97ae143cd83dc4aac": {
                    "name": "My Other Device",
                    "points": [
                        {
                            "time": "2016-06-15T03:50:00.000Z",
                            "data": {
                                "voltage": 10.3
                            }
                        },
                        {
                            "time": "2016-06-15T03:55:00.000Z",
                            "data": {
                                "voltage": 12.7
                            }
                        }
                    ]
                }
            }
        },
        "timeSeriesQuery": {
            "end": 0,
            "duration": 600000,
            "resolution": 300000,
            "aggregation": "MEAN",
            "attributes": [
                "voltage"
            ],
            "deviceTags": [
                {
                    "key": "floor",
                    "value": "8"
                }
            ]
        },
        "userCredentials": {
            "email": "example@wnology.io",
            "password": "this is the password"
        },
        "userPost": {
            "email": "example@wnology.io",
            "firstName": "Example",
            "lastName": "Name",
            "companyName": "WEGnology IoT, Inc.",
            "url": "https://console.app.wnology.io",
            "password": "the new password",
            "acceptTerms": "on"
        },
        "validateContextError": {
            "type": "Validation",
            "message": "deviceId-noValidationNoFullDevice (589de9bca1975a00017b22ff) is not a valid deviceId",
            "ctx": {
                "$ref": "#/examples/validateContextSuccess/ctx"
            }
        },
        "validateContextSuccess": {
            "success": true,
            "ctx": {
                "deviceId-withIdAndTagValidationAndIncludeFullDevice": {
                    "id": "589de9bca1975a00017b2295",
                    "name": "Cincinnati",
                    "tags": {
                        "type": [
                            "Weather Station"
                        ],
                        "region": [
                            "Midwest"
                        ],
                        "DeviceRecipe": [
                            "Weather Station"
                        ]
                    }
                },
                "deviceId-noValidationNoFullDevice": "589de9bca1975a00017b2296",
                "deviceAttribute": "dew-point",
                "deviceTag-withValidation": {
                    "key": "DeviceRecipe",
                    "value": "Weather Station"
                },
                "deviceTag-noValidation": {
                    "key": "DeviceRecipe",
                    "value": "Weather Station"
                }
            }
        },
        "validationErrors": {
            "type": "Validation",
            "message": "Too many validation errors occurred.",
            "validationErrors": [
                {
                    "type": "Notebook",
                    "id": "575ec8687ae143cd83dc4a97",
                    "name": "myNote",
                    "message": "Specified Data Table ID for data table output does not exist"
                }
            ]
        },
        "virtualButtonPress": {
            "key": "575ed18f7ae143cd83dc4aa6-SJaEw_dV",
            "payload": {
                "some": "data"
            }
        },
        "webhook": {
            "id": "575ed78e7ae143cd83dc4aab",
            "webhookId": "575ed78e7ae143cd83dc4aab",
            "applicationId": "575ec8687ae143cd83dc4a97",
            "creationDate": "2016-06-13T04:00:00.000Z",
            "lastUpdated": "2016-06-13T04:00:00.000Z",
            "name": "My Webhook",
            "token": "the_webhook_token",
            "responseCode": 200
        },
        "webhookPatch": {
            "name": "My Updated Webhook",
            "responseCode": 201
        },
        "webhookPost": {
            "name": "My New Webhook"
        },
        "webhooks": {
            "items": [
                {
                    "$ref": "#/examples/webhook"
                }
            ],
            "count": 1,
            "totalCount": 4,
            "perPage": 1,
            "page": 0,
            "sortField": "name",
            "sortDirection": "asc",
            "applicationId": "575ec8687ae143cd83dc4a97"
        }
    }
}
